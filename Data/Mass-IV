#!/bin/bash

# FILE : Mass-IV
# FUNCTION: Creates ONE character for play in the Chronicles of
# Ember Campaign Setting per run, which it deposits on the user's
# Desktop in a folder labeled "Characters". If the directory does
# not exist it will be created.
# Copyright © 2013-17 Alan Wortman <awortman at grnco dot net>
#
# Version Number: 1.18.1
#=======================================================================#
#  ★☆★☆★☆★☆★☆★☆★☆★☆ NOTES: ☆★☆★☆★☆★☆★☆★☆★☆★☆★☆	#
#=======================================================================#
#									#
#	Mass-IV does not yet create dual-class or multi-class 		#
#	characters. The following feature requests and bugs are		#
#	all that remains to be done.					#
#									#
#	FEATURE REQUESTS						#
#									#
#	* Skall, Koza, Qhava, and Vu races (stubbed out).		#
#	* Add dual & multiclass functionality (stubbed out). Most	#
#	  of the work is already done. Functions for average HP 	#
#	  (concurrent classes) and best saving throw selection 		#
#	  are written. TAB could be done with a re-purposed "Best	#
#	  Saves" function. Dual classed characters are a whole		#
#	  new animal.							#
#	* Related to the above, display for experience in 		#
#	  multiple classes requires a redesigned header.		#
#	* List Specialty Priest powers (dependent upon completion	#
#	  of the priest lorebooks for data) - IN PROGRESS - STUB!	#
#	* Generate money type by location (Trivial) - STUB!		#
#	* Generate deity names by location (Trivial)			#
#									#
#	KNOWN BUGS							#
#	* Armor Class ratings are wonky for non-monk characters.	#
#	* Elkan characters have a "blank" first name			#
#									#
#	WORK THAT'S PROBABLY UNNECESSARY - DO LAST, IF AT ALL		#
#	* Add sphere access to Priest class sheets			#
#	  (Cleric, Specialty Priest, Monk, Druid, & Shaman)		#
#	* Generate Spell lists (based on divine spell list 		#
#	  generator work).						#
#	* Generate Wizard spellbooks where appropriate.			#
#	* Enable "Small" size generation.				#
#	* HOUSEKEEPING: Pull all functions out of Main and place	#
#	  them at the top of the script to avoid conflicts with		#
#	  future program upgrades. (Was I drunk or something?)		#
#	* Some spell ranges (and likely saving throws as well), 	#
#	  are not implemented for levels > 10.				#
#									#
#	-Alan								#
#									#
# --------------------------------------------------------------------- #	

# This line runs MASS-IV in a gnome terminal and allows for 
# multi-character generation with user input. Commenting this 
# line out results in a single character being generated per 
# run of the Mass-IV shell file.
STARTTIME=$(date +%s)
tty -s; if [ $? -ne 0 ]; then gnome-terminal  -x "$0"; exit; fi 

# Make the ~/Desktop/Characters folder if it does not exist
mkdir -p ~/Desktop/Characters

# Pretty stuff: The following heiroglyphics set the username to sentence case
name=$USER; Name="$(tr '[:lower:]' '[:upper:]' <<< ${name:0:1})${name:1}"

# Blank the terminal and display the welcome dialogue
clear
echo "★ ☆ ★ ☆ ★ ☆ ★ ☆ ★ ☆  MASS-IV version 1.18.0  ★ ☆ ★ ☆ ★ ☆ ★ ☆ ★ ☆"
echo " ★ ☆ ★ ☆ ★ ☆ ★ ☆ ★  © 2013-2017 Alan Wortman  ☆ ★ ☆ ★ ☆ ★ ☆ ★ ☆"
echo
echo "Hello, "$Name". Welcome to MASS-IV! This script generates characters"
echo "for the Chronicles of Ember campaign."
echo
echo "Enter the number of characters you wish to generate and press Enter."
echo "They will appear in a folder labeled 'Characters' on your Desktop."
echo -n "(Just pressing Enter will generate a single character by default.):" 
read USERCOUNTER

	if [[ $USERCOUNTER = "" ]]; then USERCOUNTER=1;fi 
	until [ $USERCOUNTER -le "0" ]; do

###############################################################
# Set character creation mode. This affects the skew on the   #
# generation of ability scores. "WEENIE" mode rolls the dice  #
# without discarding arbitrary low values, while "DEMIGOD"    #
# mode ensures that only results of a 6 on a 1d6 will be      #
# generated.						      #
###############################################################

Mode=HERO # Options are WEENIE, NORMAL, HERO, LEGEND, PARAGON, and DEMIGOD

    case "$Mode" in
	WEENIE)		SPOTS=6; SPOTMOD=1 ;;
	NORMAL)		SPOTS=5; SPOTMOD=2 ;;
	HERO)		SPOTS=4; SPOTMOD=3 ;;
	LEGEND)		SPOTS=3; SPOTMOD=4 ;;
	PARAGON)	SPOTS=2; SPOTMOD=5 ;;
	DEMIGOD)	SPOTS=1; SPOTMOD=6 ;;
    esac

# Initialize some variables
bold=$(tput bold)		#Adds bold text functionality with ${bold} and ${normal} tags in HTML usage style
normal=$(tput sgr0)
First=""			#First Name
Sur=""				#Surname
Pat=" "				#Patronymic (Ursa only)
TAB=0; SPEC=""; Genders=2; LEVEL=0; RaisedAmongHumans=2; BAB=0
PickPockets=3			# These are the base thief 
OpenLocks=2			# skills
FindRemoveTraps=1		#
MoveSilently=2			#
HideinShadows=1			#
DetectNoise=3			#
ClimbWalls=12			#
ReadLanguages=0			#
Pronoun="she"
Pronoun2="her"
RACE=""; BEAST=""; HUMANOID=""; SIZE=""; CLASS=""; SkillsperLevel=0; Age=0; MaxAge=0
HeightInches=0; Feet=0; Inches=0; CharWeight=0
MinXP="Not Implemented"
NextXP="Not Implemented"
HairColor="Not Implemented"	# These ARE implemented, but 
ScaleColor="Not Implemented"	# They're great initializers,
BellyColor="Not Implemented"	# so I've left them in place.
EyeColor="Not Implemented"	# 
SkinColor="Not Implemented"	#
CoatColor="Not Implemented"	#
Religion="Not Implemented"	#
XPBonus=0			
BonusXP="N"			
SpentSkills=0	
SHINYTYPE1=""
Minimum_Level=""
Maximum_Level=""
Ethics="Neutral" 
Morality="Neutral"
WeaponSpecialization=0
SpecHitBonus=0
SpecDamageBonus=0
SPEC_OVERRIDE=""
WMat_Mod=0
Mdie=0
MountHP=0
Skillset=()		# This is CRITICAL! Not blanking this array causes 
			# it to cat with previous iterations, resulting in
			# characters with *way* too many skills.
AlbChk=()
MelChk=()
# HairType="Not Implemented"	# I may not use these two 
# HairLength="Not Implemented"	# variables.

# Albinism Check
let "AlbChk=$RANDOM%17000+1"
if [ "$AlbChk" = "1" ]; then let "Albino = Y";fi

# Melanism Check
let "MelChk=$RANDOM%1000+1"
if [ "$MelChk" = "1" ]; then let "Melanid = Y";fi

# -------------------------------------------------------------
# ---------- BEGIN ABILITY SCORE GENERATION BLOCK -------------
# -------------------------------------------------------------
###############################################################
# Tosses each die separately, and so gives correct odds. I 
# could have written a simple random generator for values 
# between 6 and 18 and called it good, but that wasn't the 
# right way to do it - I'd get a flat distribution where I want 
# a proper (slightly skewed) Gaussian.
#
# This portion of the script was greatly improved by Andrew
# Hoke's suggestion for removing do-while loops for dice rolls.
#
# The script was further improved by Dan Britton's suggestion 
# to use a function call instead of a script.
###############################################################
#
# Dear maintainer:
#
# Once you are done trying to 'optimize' this routine, and have
# realized what a terrible mistake that was, please increment 
# the following counter as a warning to the next guy:
#
# total_hours_wasted_here = 18
#
# the 18th hour was wasted due to a bug in Alan's code
# Kier fixed it during the 19th hour which was not wasted because
# Kier is awesome.
#
###############################################################
# ABILITY SCORE FUNCTION ######################################
function AbilityScore {
declare -a score; sum=0; dierolls=4; lowest=6;
until [ $dierolls -le "0" ]; do die=0; let "die = $RANDOM % $SPOTS + $SPOTMOD"; score+=($die); let dierolls-=1; done
for n in "${score[@]}"; do (( n < lowest )) && lowest=$n; done; # [These two lines are Kier's funky shit. I still
for n in "${score[@]}"; do (( sum += n )); done;		# [don't know what they do, but they *work*. I guess
let "Ability = $sum - $lowest"; }				# a CS degree makes all the difference, huh? ^_^ -Alan

###############################################################
# Determine ability scores by calling the function above.
AbilityScore; STRthrow=$Ability
AbilityScore; DEXthrow=$Ability
AbilityScore; CONthrow=$Ability
AbilityScore; INTthrow=$Ability
AbilityScore; WISthrow=$Ability
AbilityScore; CHAthrow=$Ability
AbilityScore; COMthrow=$Ability
AbilityScore; PERthrow=$Ability

#################################################################
# HIT POINTS FUNCTION
function HitPoints {
	num=0; hilev=0; SkillsperLevel=0; COUNTER=$LEVEL

case "$CLASS" in
    Fighter|Ranger|Paladin)
	SkillsperLevel=$(( $LEVEL + 2 )) 
	until [ $COUNTER -lt 10 ]; do let hilev+=3; let COUNTER-=1; done
         while [  $COUNTER -gt 1 ]; do
	 if [ "$HPBOOST" != "Y" ]; then die=$[ 1 + $[ RANDOM % 10 ]]; fi
	 if [ "$HPBOOST" = "Y" ]; then die=$[ 6 + $[ RANDOM % 5 ]]; fi
	     let num+=$die; let COUNTER-=1; done
	HPbonus=$(( $LEVEL * ${con[0]})); HP=$(( 10 + $HPbonus + $num + $hilev )) ;;

    Cleric|Specialty\ Priest|Druid|Monk|Shaman)
	SkillsperLevel=$(( $LEVEL + 3 ))
         while [  $COUNTER -gt 1 ]; do
	 if [ "$HPBOOST" != "Y" ]; then die=$[ 1 + $[ RANDOM % 8 ]]; fi
	 if [ "$HPBOOST" = "Y" ]; then die=$[ 5 + $[ RANDOM % 4 ]]; fi
	     let num+=$die; let COUNTER-=1; done
	HPbonus=$(( $LEVEL * ${con[0]})); HP=$(( 8 + $HPbonus + $num + $hilev )) ;;

    Thief|Bard|Handler)
	SkillsperLevel=$(( $LEVEL + 2 ))
         while [  $COUNTER -gt 1 ]; do
	 if [ "$HPBOOST" != "Y" ]; then die=$[ 1 + $[ RANDOM % 6 ]]; fi
	 if [ "$HPBOOST" = "Y" ]; then die=$[ 4 + $[ RANDOM % 3 ]]; fi
		     let num+=$die; let COUNTER-=1; done
	HPbonus=$(( $LEVEL * ${con[0]})); HP=$(( 6 + $HPbonus + $num + $hilev )) ;;

    Mage|Abjurer|Conjurer|Diviner|Enchanter|Illusionist|Invoker|Necromancer|Transmuter|Sorcerer|Arcanist)
	SkillsperLevel=$(( $LEVEL + 3 ))
         while [  $COUNTER -gt 1 ]; do
	 if [ "$HPBOOST" != "Y" ]; then die=$[ 1 + $[ RANDOM % 4 ]]; fi
	 if [ "$HPBOOST" = "Y" ]; then die=$[ 3 + $[ RANDOM % 2 ]]; fi
		     let num+=$die; let COUNTER-=1; done
	HPbonus=$(( $LEVEL * ${con[0]})); HP=$(( 4 + $HPbonus + $num + $hilev )) ;;

    Mentalist)
	SkillsperLevel=$(( $LEVEL + 3 ))
         while [  $COUNTER -gt 1 ]; do
		if [ "$HPBOOST" != "Y" ]; then die=$[ 1 + $[ RANDOM % 8 ]]; fi
		if [ "$HPBOOST" = "Y" ]; then die=$[ 5 + $[ RANDOM % 4 ]]; fi
		     let num+=$die; let COUNTER-=1; done
	HPbonus=$(( $LEVEL * ${con[0]})); HP=$(( 8 + $HPbonus + $num + $hilev + 0 )) ;;
esac }

# End HitPoints Function ########################################

#################################################################
# CHARISMA MODIFIERS TO COMELINESS ##############################

case "$CHAthrow" in
        6|7|8) 			let COMthrow-=1 ;;
        13|14|15) 		let COMthrow+=1 ;;
        16|17) 			let COMthrow+=2 ;;
	18) 			let COMthrow+=3 ;;
	19|20|21|22|23|24|25) 	let COMthrow+=5 ;;
esac

#################################################################
# ABILITY SCORE OVERRIDES #######################################
#
# STRthrow="18"
# DEXthrow="15"
# CONthrow="16"
# INTthrow="17"
# WISthrow="14"
# CHAthrow="13"
# COMthrow="14"
# PERthrow="15"
# -------------------------------------------------------------   
# ----------- END ABILITY SCORE GENERATION BLOCK --------------
# -------------------------------------------------------------

###############################################################
# RANDOM CHARACTER LEVEL ######################################
let "LEVEL = $RANDOM % 20 +1"

###############################################################
# RANDOM RACE CODE BLOCK -- Uncomment the array you want to use
RACE=()
# ARRAY=( Human Elf Half-Elf Dwarf Kenderkin Jaka Kobold Minotaur Alvani Redblood Fairborn Greenblood Halfblood Lugan Waterfolk Ursa Selah Half-Orc )
# ARRAY=( Human Elkan Gnooshe Protean Rotan Elf Half-Elf Dwarf Kenderkin Jaka Kobold Minotaur Alvani Redblood Fairborn Greenblood Halfblood Lugan Waterfolk Ursa Selah Half-Orc Nibbin Skall Relic Qhava Koza Vu)
# ARRAY=( Human Elkan Gnooshe Protean Rotan Jaka Kobold Minotaur Alvani Redblood Fairborn Greenblood Halfblood Lugan Waterfolk Ursa Selah Half-Orc Relic )
  ARRAY=( Human Elkan Gnooshe Protean Rotan Jaka Kobold Minotaur Alvani Redblood Fairborn Greenblood Halfblood Lugan Waterfolk Ursa Selah Half-Orc )
	for index in `shuf --input-range=0-$(( ${#ARRAY[*]} - 1 )) | head -1`; do RACE=${ARRAY[$index]}; done

###############################################################
# RANDOM SEX CODE BLOCK #######################################
function get_sex {
let "CSex = $RANDOM % 2"; 
if [ "$CSex" = "0" ]; then SEX="Male"; fi
if [ "$CSex" = "1" ]; then SEX="Female"; fi }
get_sex
###############################################################
# RANDOM HANDEDNESS CODE BLOCK ################################
Handedness="Right"
let "Hand = $RANDOM % 5"; if [ "$Hand" = "0" ]; then Handedness="Left"; fi

###############################################################
# RANDOM ALIGNMENT SELECTION ##################################
let "Ethos = $RANDOM % 3"; let "Morals = $RANDOM % 2"
if [ "$Ethos" = "0" ]; then Ethics="Lawful"; fi
if [ "$Ethos" = "2" ]; then Ethics="Chaotic"; fi
if [ "$Morals" = "0" ]; then Morality="Good"; fi

###############################################################
# WEIGHT FUNCTION #############################################
  function CharWeight {
	let "charheight = $HeightInches * 10000"				# BASH doesn't allow floating point operations without the use of external libs, so
	let "height1 = ($charheight/$BaseHeight) ** 3"				# I can't count on them to be there. Workaround: multiply everything by 10000 to keep
	let "weight = ($height1 * $BaseWt) / (10000 ** 3)"; }			# the significant figures I needed through the calculation. Then one last division
										# by 10000 ^3 brings it all back to normal again in the end.
###############################################################
# BMI CALCULATION FUNCTION ####################################
  function BMI_Calc {
	let "BMI = ($weight * 703) / $HeightInches ** 2"			# This is the real-world formula. Needs tweaks below to be useful to Mass-IV.
BMI2=$BMI
case "$STRthrow" in
	6|7)		let "BMI2 +=3"	;;					# I want BMI evaluation to be influenced by how strong the character is.
	8|9)		let "BMI2 +=1"	;;					# The more muscle mass you have, the less blobby you'll be and visa versa.
	15|16)		let "BMI2 -=3"	;;
	17|18)		let "BMI2 -=5"	;;
	19|20)		let "BMI2 -=7"	;;
esac

# Racial Tweaks	to BMI calculations
					
case "$RACE" in
	Human)		:		;;
	Elkan)		let "BMI -=0"	;;
	Gnooshe)	let "BMI +=0"	;;
	Rotan)		let "BMI +=0"	;;
	Elf)		let "BMI -=0"	;;
	Half-Elf)	let "BMI -=0"	;;
	Dwarf)		let "BMI -=20"	;;
	Kenderkin)	:		;;
	Jaka)		let "BMI +=0"	;;
	Kobold)		:		;;
	Minotaur)	let "BMI -=0"	;;
	Alvani)		let "BMI +=0"	;;
	Redblood)	:		;;
	Fairborn)	:		;;
	Greenblood)	let "BMI -=0"	;;
	Halfblood)	let "BMI -=0"	;;
	Lugan)		let "BMI +=0"	;;
	Waterfolk)	let "BMI +=0"	;;
	Ursa) 		let "BMI -=30"	;;
#	Selah) 		: SPECIAL CASE	;;
	Half-Orc) 	let "BMI -=5"	;;
	Nibbin) 	:		;;
	Skall)		:		;;
	Qhava)		let "BMI +=0"	;;
	Koza)		:		;;
	Vu)		let "BMI +=0"	;;
esac

BMI2=$BMI
case "$BMI2" in
	1|2|3|4|5|6|7|8|9|10|11|12)	BMI_Eval=disturbingly\ thin\ and\ appears\ sick		;;	# I want BMI evaluation to be influenced by how strong the character is.
	13|14|15|16|17)			BMI_Eval=a\ little\ scrawny				;;	# The more muscle mass you have, the less blobby you'll be and visa versa.
	18|19|20|21|22|23|24)		BMI_Eval=trim\ and\ powerful				;;
	25|26|27|28|29)			BMI_Eval=getting\ a\ little\ soft\ in\ the\ middle	;;
	30|31|32|33|34|35|36|37|38|39)  BMI_Eval=fat\ and\ pudgy				;;
	*)				BMI_Eval=morbidly\ obese				;;
esac ;}
##############################################################

#=======================================================================================================================================================================================================#
# OVERRIDE BLOCK == Uncomment for magic ================================================================================================================================================================#
#																									#
 LEVEL=1			# Use this to generate characters of a specific level. Range is between 1 and 20, inclusive. DO NOT USE WITH THE FOLLOWING TWO LINES!					#
# Minimum_Level=1		# Sets the lower level bound for generated characters. Use with the line below.												#
# Maximum_Level=10		# Sets the upper level bound for generated characters. Level 20 is the absolute maximum which is supported (but it'll do more)!						#
 RACE=Half-Orc			# Options: Human Elf Half-Elf Dwarf Kenderkin Elkan Gnooshe Protean Rotan Jaka Kobold Minotaur Alvani Redblood Fairborn Greenblood Halfblood Lugan Waterfolk Ursa Selah	#
				# 	   Half-Orc Relic Nibbin																	#
# SEX=Female			# Options: Male Female Asexual Hermaphrodite																#
# Handedness=Right		# Options: Right Left -- This is currently cosmetic and affects absolutely nothing.											#
 CLASS_OVERRIDE=Fighter		# Options: Fighter Ranger Paladin Cleric SpecP Druid Monk Shaman Thief Bard Handler Mage SpecM Mentalist Sorcerer Arcanist 	(Allows illegal combinations!)		#
# SPEC_OVERRIDE=Dawn		# Options: Dawn, Amar, Nanawen, Vellis, Larian, Fifred, Damsinorlay, Patrakius, Gerna, Isone, Tyche, Parador, Mordain, Oleander, Llyr					#
# RELIGION_OVERRIDE=STUB!	# Not Implemented: STUB!																		#
# ARCHETYPE=Warrior 		# Options: Warrior Priest Rogue Wizard. Do NOT use this with CLASS_OVERRIDE above. Select race @ line 358 in this block.						#
 Racial_Armors=Y		# Options: Y/N -- Flavor enhancement to armor type. Some even grant modifications to armor statistics.									#
 Weapon_Materials=Y		# Options: Y/N -- Toggles weapon material mods. Commenting this out (or using illegal options) defaults to "N" state							#
 AdvancedAge=Y			# Options: Y/N -- Allows characters generated at levels > 1 to begin play at advanced ages.			 							#
 HPBOOST=Y			# Options: Y/N -- Ensures at least median hit points per hit die. Select N for unboosted hit point rolls.								#
# Albino=N			# Options: Y/N -- Forces an albino character. Only biological humanoids can have this condition.									#
# Melanid=N			# Options: Y/N -- Forces a melanid character. Only beastfolk can have this condition.											#
 Ethics=Chaotic			# Options: Lawful, Neutral, Chaotic: 	This may be overridden by class selection.											#
 Morality=Neutral		# Options: Good, Neutral, Evil: 	This may be overridden by class selection											#
# Mount_Gen=STUB!		# Options: Y/N -- Attempts to generate a mount/bonded mount for the character												#
# Followers=Y			# Options: Y/N -- Attempts to generate followers (animal and otherwise), for the character 										#
 Terminal_Output=Y		# Options: Y/N -- Echoes character to the terminal - Commenting this out (or using illegal options) defaults to Line Output Summary					#
 CompactFormat=Y		# Options: Y/N -- Reduces unnecessary whitespace on character printouts. Y=Compact; Anything Else=Classic								#
# Play_Region=1	STUB!		# Options: 1) Moonguard 2) Ta'an 3) Badlands 4) Dragonreach 5) Iron Forest 6) Grand Dutchy 7) Qualashaierenenian 8) Zan 9) Lathi 10) Loxodon 11) Wastes 12) Qualatha	#
#=======================================================================================================================================================================================================#
# DUAL AND MULTI-CLASS OPTIONS == Disabled by default == STUB! =========================================================================================================================================#
# Single-Class=Y																							#
#																									#
# Dual-Class=Y			# Options: Y/N -- Force the generation of a dual-class character (Two concurrent classes)										#
# 	BaseClass=		# Options: Fighter Ranger Cleric Druid Monk Thief Bard Mage Mentalist Sorcerer												#
# 	SecondClass=		# Options: Fighter Ranger Cleric Druid Monk Thief Bard Mage Mentalist Sorcerer												#
# Multi-Class=Y			# Options: Y/N -- Force the generation of a multi-class character (Two or more sequential classes - quit one to start another)						#
# 	Class1=Null		# Options: Null Fighter Ranger Paladin Cleric SpecP Druid Monk Thief Bard Mage SpecM Mentalist Sorcerer									#
# 	Class2=Null		# Options: Null Fighter Ranger Paladin Cleric SpecP Druid Monk Thief Bard Mage SpecM Mentalist Sorcerer									#
# 	Class3=Null		# Options: Null Fighter Ranger Paladin Cleric SpecP Druid Monk Thief Bard Mage SpecM Mentalist Sorcerer									#
#																									#
# if [ "$Single-Class" = "Y" ]; then 	Dual-Class=N; Multi-Class=N; fi																	#
# if [ "$Dual-Class" = "Y" ]; then	Single-Class=N; Multi-Class=N; fi																#
# if [ "$Multi-Class" = "Y" ]; then 	Single-Class=N; Dual-Class=N; fi																#
#																									#
# code to return the largest value in an array	(Multiclass Saves)	# IDEA: Rewrite the saving throw block to use this code for even one character. The results will be the same.			#
# TestArray=(10 12 99); IFS=$'\n' 					# IFS stands for "internal field separator". Gotta have this or it won't work!							#
# echo "${TestArray[*]}" | sort -nr | head -n1				# Must do one instance of this for every save type - Do something similar for TAB.						#
#																									#
# code to return the average value of an array  (Multiclass HP)																		#
#    HPARRAY=(18 38 24) 						# Average of 24 HP for three classes 												#
#    for i in "${HPARRAY[@]}"; do ((HPsum += $i)); ((HPtotal++)); done	# This loop does all the work													#
#    echo $((HPsum/HPtotal))						# Call this as the HP total and everything should work fine									#
#=======================================================================================================================================================================================================#

###############################################################
# GENDER PRONOUN CODE BLOCK ###################################
# This could be better optimized, but it is easier for me to 
# understand when it is explicit and redundant. Should I need to 
# troubleshoot or modify this later, I don't want to unravel the 
# plate of spaghetti that is this code. It's bad enough already.

if [ "$SEX" = "Male" ]; then he="he"; He="He"; his="his"; His="His"; him="him"; Him="Him"; fi
if [ "$SEX" = "Female" ]; then he="she"; his="her"; him="her"; He="She"; His="Her"; Him="Her"; fi 

###############################################################
# LEVEL RANGE MATH ############################################
let "LevelRange = $Maximum_Level-$Minimum_Level + 1"
if [ "$Minimum_Level" != "" ] && [ "$Maximum_Level" != "" ]; then
	let "LEVEL = $RANDOM % $LevelRange + $Minimum_Level"; fi

################################################################
#=======================================================================
#==================== Part II: RACIAL ADJUSTMENTS ======================
#=======================================================================

# The following mini-blocks describe the races' ability score 
# adjustments (if any), generates a character's name appropriate
# to their sex and according to the naming conventions of each
# race, and describes their size as either man-sized or large
# for purposes of equipment selection and saves it to the new
# variable "$SIZE".

# Use this format for assigning ability scores and setting equipment variables.
#ARCH="ON" 	#Forces race selection by class archetype - not recommended

if [ "$ARCHETYPE" != "" ] && [ "$RACE" == "" ]; then

    case "$ARCHETYPE" in
	Rogue)
		ARRAY=( Human Elf Half-Elf Dwarf Kenderkin Jaka Kobold Minotaur Alvani Redblood Fairborn Greenblood Halfblood Lugan Waterfolk Ursa Selah Half-Orc )
		for index in `shuf --input-range=0-$(( ${#ARRAY[*]} - 1 )) | head -1`
		do    RACE=${ARRAY[$index]};done ;;
	Warrior)
		ARRAY=( Human Elf Half-Elf Dwarf Jaka Kobold Minotaur Alvani Redblood Fairborn Greenblood Halfblood Lugan Waterfolk Ursa Selah Half-Orc )
		for index in `shuf --input-range=0-$(( ${#ARRAY[*]} - 1 )) | head -1`
		do    RACE=${ARRAY[$index]};done ;;
	Priest)
		ARRAY=( Human Elf Half-Elf Dwarf Jaka Kobold Minotaur Redblood Fairborn Greenblood Halfblood Lugan Waterfolk Ursa Selah Half-Orc )
		for index in `shuf --input-range=0-$(( ${#ARRAY[*]} - 1 )) | head -1`
		do    RACE=${ARRAY[$index]};done ;;
	Wizard)
		ARRAY=( Human Elf Half-Elf Kobold Minotaur Alvani Redblood Fairborn Greenblood Halfblood Lugan Waterfolk Ursa Selah Half-Orc )
		for index in `shuf --input-range=0-$(( ${#ARRAY[*]} - 1 )) | head -1`
		do    RACE=${ARRAY[$index]};done ;;
    esac; fi

function races {

#----------------------- HUMAN SECTION -------------------------#

case $RACE in
	Human)
	SIZE=M
	HUMANOID=Y
	let "XPBonus+=10" 
	if [ "$Dual-Class" = "Y" ] || [ "$Multi-Class" = "Y" ];	then HumanARRAY=( Fighter Ranger Cleric Druid Monk Thief Bard Mage Mentalist Sorcerer Arcanist ); fi
	if [ "$ARCHETYPE" = "" ];				then HumanARRAY=( Fighter Ranger Paladin Cleric "SpecP" Monk Druid Shaman Thief Bard Mage "SpecM" Sorcerer Arcanist ); fi
	if [ "$ARCHETYPE" = "Warrior" ];			then HumanARRAY=( Fighter Ranger Paladin ); fi
	if [ "$ARCHETYPE" = "Priest" ]; 			then HumanARRAY=( Cleric "SpecP" Monk Druid Shaman ); fi
	if [ "$ARCHETYPE" = "Rogue" ];				then HumanARRAY=( Thief Bard ); fi
	if [ "$ARCHETYPE" = "Wizard" ];				then HumanARRAY=( Mage "SpecM" Sorcerer Arcanist ); fi

#	HumanHairTypeARRAY=( Straight Curly Kinky Wavy ) #Neat Wild Unkempt
#	HumanHairLengthARRAY=( Stubbly Short Close-Cropped Shoulder-Length Long )

	HumanPhenotypeARRAY=( Negroid Mogoloid Caucazoid )
	HumanHairARRAY=( "Fine Black" "Blue-Black" "Jet-Black" "Black" "Dark Brown" "Brown" "Light Brown" "Chestnut Brown" "Chestnut Red" "Auburn" "Red" "Strawberry Blonde" "Light Blonde" "Sandy Blonde" "Dirty Blonde" "Dark Blonde" "Platinum Blonde" "Medium Blonde" "Gray" "Salt and Pepper" "White")
	HumanEyeARRAY=( Blue Black Brown Hazel Green Gray )
	HumanSkinARRAY=( "Pale white" "Fair" "Light Brown" "Brownish-Yellow" "Nut Brown" "Dark Brown" "Chocolate Brown" "Brownish-Black" "Ash Black" "Midnight-Purple" )

for index in `shuf --input-range=0-$(( ${#HumanSkinARRAY[*]} - 1 )) | head -1`
do    SkinColor=${HumanSkinARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#HumanHairARRAY[*]} - 1 )) | head -1`
do    HairColor=${HumanHairARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#HumanEyeARRAY[*]} - 1 )) | head -1`
do    EyeColor=${HumanEyeARRAY[$index]}; done

	let "Age = $RANDOM % 4 + 16"
	let "MaxAge = $RANDOM % 20 + 93"
	if [ "$LEVEL" != "1" ] && [ "$AdvancedAge" = "Y" ]; then
	let "Age = $RANDOM % 20 + 16"; fi

    case "$SEX" in
	Male)
	BaseHeight=70
	First=$(shuf -n 1 ./names/"Human Male First Names.txt") 
	let "HeightInches = $RANDOM % 20 + 63" 					# (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12" 	# Determines feet & inches
	let "BaseWt = $RANDOM % 60 + 167" ;;					# (Spread + Base Weight + 1) 

	Female)
	BaseHeight=69
	First=$(shuf -n 1 ./names/"Human Female First Names.txt")
	let "HeightInches = $RANDOM % 20 + 62" 					# (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"	# Determines feet & inches
	let "BaseWt = $RANDOM % 60 + 107" ;; 					# (Spread + Base Weight + 1) 	
    esac
	Sur=$(shuf -n 1 ./names/"Human Surnames.txt")

CLASS=$CLASS_OVERRIDE
if  [ "$CLASS_OVERRIDE" = "" ]; then
for index in `shuf --input-range=0-$(( ${#HumanARRAY[*]} - 1 )) | head -1`
do    CLASS=${HumanARRAY[$index]};done
for index in `shuf --input-range=0-$(( ${#HumanARRAY[*]} - 1 )) | head -1`
do    CLASS2=${HumanARRAY[$index]};done
for index in `shuf --input-range=0-$(( ${#HumanARRAY[*]} - 1 )) | head -1`
do    CLASS3=${HumanARRAY[$index]};done;fi 
	;;

# --------------------- ELF SECTION --------------------------- #
# NOTE: Depricated race - no elves remain on Ember. This section 
#	is still functional and can be called if an elf is 
#	desired for play. Edit line ~206 to enable random generation.
	Elf)
	SIZE=M
	HUMANOID=Y; DEXthrow=$[ $DEXthrow +1 ] && CONthrow=$[ $CONthrow -1 ] && COMthrow=$[ $COMthrow +2 ]
	if [ "$Dual-Class" = "Y" ] || [ "$Multi-Class" = "Y" ];	then ElfARRAY=( Fighter Ranger Cleric Druid Monk Thief Bard Mage Mentalist Sorcerer Arcanist ); fi
	if [ "$ARCHETYPE" = "" ];		then ElfARRAY=( Fighter Ranger Cleric "SpecP" Druid Thief Bard Mage "SpecM" Sorcerer Arcanist ); fi	
	if [ "$ARCHETYPE" = "Warrior" ];	then ElfARRAY=( Fighter Ranger ); fi
	if [ "$ARCHETYPE" = "Priest" ]; 	then ElfARRAY=( Cleric "SpecP" Druid ); fi
	if [ "$ARCHETYPE" = "Rogue" ];		then ElfARRAY=( Thief Bard ); fi
	if [ "$ARCHETYPE" = "Wizard" ];		then ElfARRAY=( Mage "SpecM" Sorcerer Arcanist ); fi

#	HairTypeARRAY=( Straight Curly Kinky Wavy )
#	HairLengthARRAY=( Shaved Chopped Short Close-Cropped Shoulder-Length Long )
#	ElvenPhenotypeARRAY=( High Moon Wood Sea Drow )
	ElfHairARRAY=( "Soft Black" "Blue-Black" "Jet-Black" "Deep Brunette" "Medium Brown" "Natural Brown" "Light Brown" "Chestnut Brown" "Chestnut Red" "Auburn" "Red" "Strawberry Blonde" "Blonde" "Platinum Blonde" "Medium Blonde" "Gray" "White" ) 
	ElfEyeARRAY=( Blue Black Brown Green "Blue-Black" "Blue-Green" "Deep Brown" "Dark Green" )
	ElfSkinARRAY=( "Pale White" "Fair" "Light Brown" "Nut-brown" )

for index in `shuf --input-range=0-$(( ${#ElfSkinARRAY[*]} - 1 )) | head -1`
do    SkinColor=${ElfSkinARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#ElfHairARRAY[*]} - 1 )) | head -1`
do    HairColor=${ElfHairARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#ElfEyeARRAY[*]} - 1 )) | head -1`
do    EyeColor=${ElfEyeARRAY[$index]}; done

	let "Age = $RANDOM % 30 + 106"
	let "MaxAge = $RANDOM % 400 + 355"
	if [ "$LEVEL" != "1" ] && [ "$AdvancedAge" = "Y" ]; then
	let "Age = $RANDOM % 100 + 107"; fi

	let PickPockets+=1; let OpenLocks-=1; let MoveSilently+=1; let HideinShadows+=2; let DetectNoise+=1
if   [ "$SEX" = "Male" ];then
	let "HeightInches = $RANDOM % 10 + 56"
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=60
	let "BaseWt = $RANDOM % 30 + 124" 
	First=$(cat ./names/Elven\ Male\ Names.txt | sort -R |head -1)
 	Sur=$(cat ./names/Elven\ Surnames.txt | sort -R |head -1);fi
if   [ "$SEX" = "Female" ];then
	let "HeightInches = $RANDOM % 10 + 51" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=55
	let "BaseWt = $RANDOM % 30 + 94" # (Spread + Base Weight + 1)
	First=$(cat ./names/Elven\ Female\ Names.txt | sort -R |head -1)
 	Sur=$(cat ./names/Elven\ Surnames.txt | sort -R |head -1);fi
CLASS=$CLASS_OVERRIDE
if  [ "$CLASS_OVERRIDE" = "" ]; then
for index in `shuf --input-range=0-$(( ${#ElfARRAY[*]} - 1 )) | head -1`
do    CLASS=${ElfARRAY[$index]};done
for index in `shuf --input-range=0-$(( ${#ElfARRAY[*]} - 1 )) | head -1`
do    CLASS2=${ElfARRAY[$index]};done
for index in `shuf --input-range=0-$(( ${#ElfARRAY[*]} - 1 )) | head -1`
do    CLASS3=${ElfARRAY[$index]};done;fi
	;;


# ------------------- HALF-ELF SECTION ------------------------ #
# NOTE: Depricated race - no half-elves remain on Ember. This section 
#	is still functional and can be called if a half-elf is 
#	desired for play. Edit line ~206 to enable random generation.
	Half-Elf) 
	SIZE=M
	HUMANOID=Y
	if [ "$Dual-Class" = "Y" ] || [ "$Multi-Class" = "Y" ];	then HalfElfARRAY=( Fighter Ranger Cleric Druid Monk Thief Bard Mage Mentalist Sorcerer Arcanist ); fi
	if [ "$ARCHETYPE" = "" ];		then HalfElfARRAY=( Fighter Ranger Cleric "SpecP" Monk Druid Thief Bard Mage "SpecM" Arcanist ); fi
	if [ "$ARCHETYPE" = "Warrior" ];	then HalfElfARRAY=( Fighter Ranger ); fi
	if [ "$ARCHETYPE" = "Priest" ]; 	then HalfElfARRAY=( Cleric "SpecP" Monk Druid ); fi
	if [ "$ARCHETYPE" = "Rogue" ];		then HalfElfARRAY=( Thief Bard ); fi
	if [ "$ARCHETYPE" = "Wizard" ];		then HalfElfARRAY=( Mage "SpecM" Arcanist ); fi

	COMthrow=$[ $COMthrow +1 ]

#	HairTypeARRAY=( Straight Curly Kinky Wavy )
#	HairLengthARRAY=( Shaved Chopped Short Close-Cropped Shoulder-Length Long )

	HalfElfHairARRAY=( "Soft Black" "Blue-Black" "Jet-Black" "Natural Black" "Deep Brunette" "Medium Brown" "Natural Brown" "Light Brown" "Chestnut Brown" "Chestnut Red" "Auburn" "Red" "Strawberry Blonde" "Light Blonde" "Dark Blonde" "Natural Blonde" "Platinum Blonde" "Medium Blonde" "Gray" "White" ) 
	HalfElfEyeARRAY=( Blue Black Brown Hazel Green Gray )
	HalfElfSkinARRAY=( "Pale white" "Fair" "Light Brown" "Brownish-Yellow" "Nut Brown" "Dark Brown" )

for index in `shuf --input-range=0-$(( ${#HalfElfSkinARRAY[*]} - 1 )) | head -1`
do    SkinColor=${HalfElfSkinARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#HalfElfHairARRAY[*]} - 1 )) | head -1`
do    HairColor=${HalfElfHairARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#HalfElfEyeARRAY[*]} - 1 )) | head -1`
do    EyeColor=${HalfElfEyeARRAY[$index]}; done

	let "Age = $RANDOM % 6 + 16"
	let "MaxAge = $RANDOM % 60 + 129"
	if [ "$LEVEL" != "1" ] && [ "$AdvancedAge" = "Y" ]; then
	let "Age = $RANDOM % 30 + 17"; fi

	let PickPockets+=2; let HideinShadows+=1
if [ "$SEX" = "Male" ]; then
	let "HeightInches = $RANDOM % 12 + 63" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=69
	let "BaseWt = $RANDOM % 36 + 148" # (Spread + Base Weight + 1)
	First=$(cat ./names/Half-Elven\ Male\ Names.txt | sort -R |head -1)
 	Sur=$(cat ./names/Half-Elven\ Surnames.txt | sort -R |head -1);fi
if [ "$SEX" = "Female" ];then
	let "HeightInches = $RANDOM % 12 + 61" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=67
	let "BaseWt = $RANDOM % 36 + 99" # (Spread + Base Weight + 1)
	First=$(cat ./names/Half-Elven\ Female\ Names.txt | sort -R |head -1)
 	Sur=$(cat ./names/Half-Elven\ Surnames.txt | sort -R |head -1);fi
CLASS=$CLASS_OVERRIDE
if  [ "$CLASS_OVERRIDE" = "" ]; then
for index in `shuf --input-range=0-$(( ${#HalfElfARRAY[*]} - 1 )) | head -1`
do    CLASS=${HalfElfARRAY[$index]};done;fi
	;;



# ---------------------- DWARF SECTION ------------------------ #
# NOTE: Depricated race - no dwarves remain on Ember. This section 
#	is still functional and can be called if an dwarf is 
#	desired for play. Edit line ~206 to enable random generation.
	Dwarf)
	SIZE=M
	HUMANOID=Y
	if [ "$Dual-Class" = "Y" ] || [ "$Multi-Class" = "Y" ];	then DwarfARRAY=( Fighter Ranger Cleric Druid Monk Thief Bard Mage Mentalist Sorcerer ); fi
	if [ "$ARCHETYPE" = "" ];		then DwarfARRAY=( Fighter "SpecP" Thief Bard ); fi
	if [ "$ARCHETYPE" = "Warrior" ];	then DwarfARRAY=( Fighter ); fi
	if [ "$ARCHETYPE" = "Priest" ]; 	then DwarfARRAY=( "SpecP" ); fi
	if [ "$ARCHETYPE" = "Rogue" ];		then DwarfARRAY=( Thief Bard ); fi
	if [ "$ARCHETYPE" = "Wizard" ];		then DwarfARRAY=( "" ); fi

	CONthrow=$[ $CONthrow +1 ] && CHAthrow=$[ $CHAthrow -1 ] && COMthrow=$[ $COMthrow -1 ]
	HairTypeARRAY=( Straight Curly Kinky Wavy )
	HairLengthARRAY=( Shaved Chopped Short Close-Cropped Shoulder-Length Long )
	DwarfPhenotypeARRAY=( Hill Mountain Iron Nameless Deep )

	DwarfSkinARRAY=( "Light Brown" "Fair" "Ruddy Brown" "Ruddy Gray" )
	DwarfHairARRAY=( "Coal Black" "Blue-Black" "Jet-Black" "Dark Brown" "Medium Brown" "Light Brown" "Fire Red" "Red" "Dark Blonde" "Gray" "White" ) 
	DwarfEyeARRAY=( Blue Black Brown Hazel Green Gray )

for index in `shuf --input-range=0-$(( ${#DwarfSkinARRAY[*]} - 1 )) | head -1`
do    SkinColor=${DwarfSkinARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#DwarfHairARRAY[*]} - 1 )) | head -1`
do    HairColor=${DwarfHairARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#DwarfEyeARRAY[*]} - 1 )) | head -1`
do    EyeColor=${DwarfEyeARRAY[$index]}; done

	let "Age = $RANDOM % 30 + 46"
	let "MaxAge = $RANDOM % 200 + 253"
	if [ "$LEVEL" != "1" ] && [ "$AdvancedAge" = "Y" ]; then
	let "Age = $RANDOM % 100 + 47"; fi

	let OpenLocks+=2; let FindRemoveTraps+3; let ClimbWalls-=2; let ReadLanguages-1
if [ "$SEX" = "Male" ];then
	let "HeightInches = $RANDOM % 10 + 44" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=49
	let "BaseWt = $RANDOM % 40 + 135" ;fi
if [ "$SEX" = "Female" ];then
	let "HeightInches = $RANDOM % 10 + 42" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=47
	let "BaseWt = $RANDOM % 40 + 110" ;fi

	First=$(cat ./names/Dwarf\ Names.txt | sort -R |head -1)
 	Sur=$(cat ./names/Dwarf\ Surnames.txt | sort -R |head -1)
CLASS=$CLASS_OVERRIDE
if  [ "$CLASS_OVERRIDE" = "" ]; then
for index in `shuf --input-range=0-$(( ${#DwarfARRAY[*]} - 1 )) | head -1`
do    CLASS=${DwarfARRAY[$index]}; done; fi
	;;


# --------------------- KENDERKIN SECTION --------------------- #
# NOTE: Depricated race - no kenderkin remain on Ember. This section 
#	is still functional and can be called if a kenderkin is 
#	desired for play. Edit line ~206 to enable random generation.
	Kenderkin)
	SIZE=M
	HUMANOID=Y
	CLASS=Handler
	if [ "$Dual-Class" = "Y" ] || [ "$Multi-Class" = "Y" ];	then KenderkinARRAY=( Handler ); fi
	if [ "$ARCHETYPE" = "" ];		then KenderkinARRAY=( Handler ); fi
	if [ "$ARCHETYPE" = "Warrior" ];	then KenderkinARRAY=(  ); fi
	if [ "$ARCHETYPE" = "Priest" ]; 	then KenderkinARRAY=(  ); fi
	if [ "$ARCHETYPE" = "Rogue" ];		then KenderkinARRAY=( Handler ); fi
	if [ "$ARCHETYPE" = "Wizard" ];		then KenderkinARRAY=(  ); fi

	ATYPE=Rogue
	STRthrow=$[ $STRthrow -1 ] && DEXthrow=$[ $DEXthrow +1 ] && PERthrow=$[ $PERthrow +1 ] 
	HairTypeARRAY=( Straight Curly Kinky Wavy )
	HairLengthARRAY=( Shaved Chopped Short Close-Cropped Shoulder-Length Long )


	KenderkinSkinARRAY=( "Fair" "Light Brown" "Nut Brown" "Olive" "Leather Brown")
	KenderkinHairARRAY=( "Soft Black" "Blue-Black" "Jet-Black" "Natural Black" "Deep Brunette" "Medium Brown" "Natural Brown" "Light Brown" "Chestnut Brown" "Chestnut Red" "Auburn" "Red" "Strawberry Blonde" "Light Blonde" "Dark Blonde" "Natural Blonde" "Platinum Blonde" "Medium Blonde" ) 
	KenderkinEyeARRAY=( Blue Black Brown Hazel Green Gray )

for index in `shuf --input-range=0-$(( ${#KenderkinSkinARRAY[*]} - 1 )) | head -1`
do    SkinColor=${KenderkinSkinARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#KenderkinHairARRAY[*]} - 1 )) | head -1`
do    HairColor=${KenderkinHairARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#KenderkinEyeARRAY[*]} - 1 )) | head -1`
do    EyeColor=${KenderkinEyeARRAY[$index]}; done

	let "Age = $RANDOM % 12 + 24"
	let "MaxAge = $RANDOM % 100 + 101"
	if [ "$LEVEL" != "1" ] && [ "$AdvancedAge" = "Y" ]; then
	let "Age = $RANDOM % 50 + 25"; fi

	let PickPockets+=3; let OpenLocks+=3; let FindRemoveTraps+3; let HideinShadows+1; let ReadLanguages+=2 

if   [ "$SEX" = "Male" ]; then
	let "HeightInches = $RANDOM % 16 + 43" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=51
	let "BaseWt = $RANDOM % 20 + 86" # (Spread + Base Weight + 1)
	First=$(cat ./names/Ken\ Male\ Names.txt | sort -R |head -1)
 	Sur=$(cat ./names/Ken\ Surnames.txt | sort -R |head -1); fi
if   [ "$SEX" = "Female" ]; then
	let "HeightInches = $RANDOM % 16 + 41" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=49
	let "BaseWt = $RANDOM % 20 + 84" # (Spread + Base Weight + 1)
	First=$(cat ./names/Ken\ Female\ Names.txt | sort -R |head -1)
 	Sur=$(cat ./names/Ken\ Surnames.txt | sort -R |head -1);fi 
	;;


# ----------------------- JAKA SECTION ------------------------ #

	Jaka)
	SIZE=M
	BEAST=Y
	let "XPBonus-=10" 
	if [ "$Dual-Class" = "Y" ] || [ "$Multi-Class" = "Y" ];	then JakaARRAY=( Fighter Ranger Cleric Druid Monk Thief Bard Mage Mentalist Sorcerer ); fi
	if [ "$ARCHETYPE" = "" ];		then JakaARRAY=( Fighter Ranger Cleric "SpecP" Monk Druid Shaman Thief Bard ); fi
	if [ "$ARCHETYPE" = "Warrior" ];	then JakaARRAY=( Fighter Ranger ); fi
	if [ "$ARCHETYPE" = "Priest" ]; 	then JakaARRAY=( Cleric "SpecP" Monk Druid Shaman ); fi
	if [ "$ARCHETYPE" = "Rogue" ];		then JakaARRAY=( Thief Bard ); fi
	if [ "$ARCHETYPE" = "Wizard" ];		then JakaARRAY=( "" ); fi

	STRthrow=$[ $STRthrow -1 ] && DEXthrow=$[ $DEXthrow +2 ] && CHAthrow=$[ $CHAthrow -1 ] && COMthrow=$[ $COMthrow +1 ] && PERthrow=$[ $PERthrow +3 ]
	FurLengthARRAY=( Short Long "Double Coated" )

	JakaHairARRAY=( "Soft Black" "Blue-Black" "Jet-Black" "Natural Black" "Deep Brunette" "Medium Brown" "Natural Brown" "Light Brown" "Chestnut Brown" "Chestnut Red" "Auburn" "Red" "Strawberry Blonde" "Light Blonde" "Dark Blonde" "Natural Blonde" "Platinum Blonde" "Medium Blonde" "Dark Gray" "Gray" "White" )
	JakaFurARRAY=( "Soft Black" "Blue-Black" "Jet-Black" "Natural Black" "Deep Brunette" "Medium Brown" "Natural Brown" "Light Brown" "Chestnut Brown" "Chestnut Red" "Auburn" "Red" "Strawberry Blonde" "Light Blonde" "Dark Blonde" "Natural Blonde" "Platinum Blonde" "Medium Blonde" "Dark Gray" "Gray" "White" ) 
	JakaEyeARRAY=( Yellow Black Brown Green )

for index in `shuf --input-range=0-$(( ${#JakaFurARRAY[*]} - 1 )) | head -1`
do    CoatColor=${JakaFurARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#JakaHairARRAY[*]} - 1 )) | head -1`
do    HairColor=${JakaHairARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#JakaEyeARRAY[*]} - 1 )) | head -1`
do    EyeColor=${JakaEyeARRAY[$index]}; done

	let "Age = $RANDOM % 4 + 11"
	let "MaxAge = $RANDOM % 16 + 65"
	if [ "$LEVEL" != "1" ] && [ "$AdvancedAge" = "Y" ]; then
	let "Age = $RANDOM % 16 + 12"; fi

	let PickPockets-=1; let OpenLocks+=1; let MoveSilently+=2; let HideinShadows+=2; let DetectNoise+=1; let ClimbWalls+=3
if   [ "$PERthrow" -gt "19" ]; then PERthrow=$[ 19 ];fi

if   [ "$SEX" = "Male" ]; then
	let "HeightInches = $RANDOM % 16 + 65" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=73
	let "BaseWt = $RANDOM % 36 + 124"
	First=$(cat ./names/Jaka\ Male\ Names.txt | sort -R |head -1)
 	Sur=$(cat ./names/Jaka\ Surnames.txt | sort -R |head -1); fi

if   [ "$SEX" = "Female" ]; then
	let "HeightInches = $RANDOM % 16 + 63" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=70
	let "BaseWt = $RANDOM % 36 + 114"
	First=$(cat ./names/Jaka\ Female\ Names.txt | sort -R |head -1)
 	Sur=$(cat ./names/Jaka\ Surnames.txt | sort -R |head -1); fi

CLASS=$CLASS_OVERRIDE
if  [ "$CLASS_OVERRIDE" = "" ]; then
	for index in `shuf --input-range=0-$(( ${#JakaARRAY[*]} - 1 )) | head -1`
	do    CLASS=${JakaARRAY[$index]};done;fi
	;;


# ---------------------- KOBOLD SECTION ----------------------- #


	Kobold)
	SIZE=M
	BEAST=Y
	if [ "$Dual-Class" = "Y" ] || [ "$Multi-Class" = "Y" ];	then KoboldARRAY=( Fighter Ranger Cleric Druid Monk Thief Bard Mage Sorcerer Arcanist ); fi
	if [ "$ARCHETYPE" = "" ];		then KoboldARRAY=( Fighter Ranger Cleric "SpecP" Druid Shaman Thief Bard Mage "SpecM" Arcanist ); fi
	if [ "$ARCHETYPE" = "Warrior" ];	then KoboldARRAY=( Fighter Ranger ); fi
	if [ "$ARCHETYPE" = "Priest" ]; 	then KoboldARRAY=( Cleric "SpecP" Druid Shaman ); fi
	if [ "$ARCHETYPE" = "Rogue" ];		then KoboldARRAY=( Thief Bard ); fi
	if [ "$ARCHETYPE" = "Wizard" ];		then KoboldARRAY=( Mage "SpecM" Arcanist ); fi


	INTthrow=$[ $INTthrow -1 ]&& CHAthrow=$[ $CHAthrow +2 ] && COMthrow=$[ $COMthrow + 1 ] 
	STRthrow=$[ $STRthrow -1 ] && DEXthrow=$[ $DEXthrow +2 ] && CHAthrow=$[ $CHAthrow -1 ] && COMthrow=$[ $COMthrow +1 ] && PERthrow=$[ $PERthrow +3 ]
	FurLengthARRAY=( Short Long "Double Coated" )
	KoboldHairARRAY=( "Soft Black" "Blue-Black" "Jet-Black" "Natural Black" "Deep Brunette" "Medium Brown" "Natural Brown" "Light Brown" "Chestnut Brown" "Chestnut Red" "Auburn" "Red" "Strawberry Blonde" "Light Blonde" "Dark Blonde" "Natural Blonde" "Platinum Blonde" "Medium Blonde" "Dark Gray" "Gray" "White" )
	KoboldFurARRAY=( "Soft Black" "Blue-Black" "Jet-Black" "Natural Black" "Deep Brunette" "Medium Brown" "Natural Brown" "Light Brown" "Chestnut Brown" "Chestnut Red" "Auburn" "Red" "Strawberry Blonde" "Light Blonde" "Dark Blonde" "Natural Blonde" "Platinum Blonde" "Medium Blonde" "Dark Gray" "Gray" "White" )
	KoboldEyeARRAY=( "Ice Blue" Blue Black Brown Hazel Green Gray )

SkinARRAY=( Gray "Gray-Green" "Dark Gray" "Charcoal Green" "Ash Gray")
for index in `shuf --input-range=0-$(( ${#KoboldFurARRAY[*]} - 1 )) | head -1`
do    CoatColor=${KoboldFurARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#KoboldHairARRAY[*]} - 1 )) | head -1`
do    HairColor=${KoboldHairARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#KoboldEyeARRAY[*]} - 1 )) | head -1`
do    EyeColor=${KoboldEyeARRAY[$index]}; done

	let "Age = $RANDOM % 4 + 13"
	let "MaxAge = $RANDOM % 16 + 65"
	if [ "$LEVEL" != "1" ] && [ "$AdvancedAge" = "Y" ]; then
	let "Age = $RANDOM % 16 + 14"; fi

	let MoveSilently+=1; let HideinShadows+=2; let DetectNoise+=2
if [ "$SEX" = "Male" ]; then
	let "HeightInches = $RANDOM % 16 + 65" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=73
	let "BaseWt = $RANDOM % 60 + 167" # (Spread + Base Weight + 1)
	First=$(cat ./names/Kobold\ Female\ Names.txt | sort -R |head -1)
 	Sur=$(cat ./names/Kobold\ Surnames.txt | sort -R |head -1);fi
if [ "$SEX" = "Female" ]; then
	let "HeightInches = $RANDOM % 16 + 60" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=68
	let "BaseWt = $RANDOM % 36 + 134" # (Spread + Base Weight + 1)
	First=$(cat ./names/Kobold\ Female\ Names.txt | sort -R |head -1)
 	Sur=$(cat ./names/Kobold\ Surnames.txt | sort -R |head -1); fi
CLASS=$CLASS_OVERRIDE
if  [ "$CLASS_OVERRIDE" = "" ]; then
	for index in `shuf --input-range=0-$(( ${#KoboldARRAY[*]} - 1 )) | head -1`
	do    CLASS=${KoboldARRAY[$index]};done;fi
	;;



# --------------------- MINOTAUR SECTION ---------------------- #

	Minotaur)
	SIZE=L
	BEAST=Y
	if [ "$Dual-Class" = "Y" ] || [ "$Multi-Class" = "Y" ];	then MinotaurARRAY=( Fighter Ranger Cleric Druid Monk Thief Bard Mage Mentalist Sorcerer Arcanist ); fi
	if [ "$ARCHETYPE" = "" ];		then MinotaurARRAY=( Fighter Ranger Cleric "SpecP" Druid Thief Bard Mage "SpecM" Sorcerer Arcanist ); fi
	if [ "$ARCHETYPE" = "Warrior" ];	then MinotaurARRAY=( Fighter Ranger ); fi
	if [ "$ARCHETYPE" = "Priest" ]; 	then MinotaurARRAY=( Cleric "SpecP" Druid ); fi
	if [ "$ARCHETYPE" = "Rogue" ];		then MinotaurARRAY=( Thief Bard ); fi
	if [ "$ARCHETYPE" = "Wizard" ];		then MinotaurARRAY=( Mage "SpecM" Sorcerer Arcanist ); fi

	STRthrow=$[ $STRthrow +2 ] && DEXthrow=$[ $DEXthrow -2 ] && COMthrow=$[ $COMthrow -1 ]
	FurLengthARRAY=( Short Long "Double Coated" )
	MinotaurHairARRAY=( "Soft Black" "Blue-Black" "Jet-Black" "Natural Black" "Deep Brunette" "Medium Brown" "Natural Brown" "Light Brown" "Chestnut Brown" "Chestnut Red" "Auburn" "Red" "Strawberry Blonde" "Light Blonde" "Dark Blonde" "Natural Blonde" "Platinum Blonde" "Medium Blonde" "Dark Gray" "Gray" "White" )
	MinotaurFurARRAY=( "Soft Black" "Blue-Black" "Jet-Black" "Natural Black" "Deep Brunette" "Medium Brown" "Natural Brown" "Light Brown" "Chestnut Brown" "Chestnut Red" "Auburn" "Red" "Strawberry Blonde" "Light Blonde" "Dark Blonde" "Natural Blonde" "Platinum Blonde" "Medium Blonde" "Dark Gray" "Gray" "White" )
	MinotaurEyeARRAY=( Black Brown )

for index in `shuf --input-range=0-$(( ${#MinotaurFurARRAY[*]} - 1 )) | head -1`
do    CoatColor=${MinotaurFurARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#MinotaurHairARRAY[*]} - 1 )) | head -1`
do    HairColor=${MinotaurHairARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#MinotaurEyeARRAY[*]} - 1 )) | head -1`
do    EyeColor=${MinotaurEyeARRAY[$index]}; done

	let "Age = $RANDOM % 3 + 10"
	let "MaxAge = $RANDOM % 4 + 56"
	if [ "$LEVEL" != "1" ] && [ "$AdvancedAge" = "Y" ]; then
	let "Age = $RANDOM % 15 + 11"; fi

	let PickPockets-=1; let MoveSilently-=2; let HideinShadows-=1; let ReadLanguages-=1

	if [ "$SEX" = "Male" ]; then
	let "HeightInches = $RANDOM % 24 + 75" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=87
	let "BaseWt = $RANDOM % 100 + 251" # (Spread + Base Weight + 1)
	First=$(cat ./names/Minotaur\ Male\ Names.txt | sort -R |head -1)
	Sur=$(cat ./names/Minotaur\ Surnames.txt | sort -R |head -1); fi
	if   [ "$SEX" = "Female" ]; then
	let "HeightInches = $RANDOM % 24 + 73" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=85
	let "BaseWt = $RANDOM % 100 + 206" # (Spread + Base Weight + 1)
	First=$(cat ./names/Minotaur\ Female\ Names.txt | sort -R |head -1)
 	Sur=$(cat ./names/Minotaur\ Surnames.txt | sort -R |head -1); fi

CLASS=$CLASS_OVERRIDE
if  [ "$CLASS_OVERRIDE" = "" ]; then
	for index in `shuf --input-range=0-$(( ${#MinotaurARRAY[*]} - 1 )) | head -1`
	do    CLASS=${MinotaurARRAY[$index]}; done; fi
	;;



# ---------------------- ALVANI SECTION ----------------------- #

	Alvani)
	SIZE=M
	HUMANOID=Y
	if [ "$Dual-Class" = "Y" ] || [ "$Multi-Class" = "Y" ];	then AlvaniARRAY=( Fighter Ranger Cleric Druid Monk Thief Bard Mage Mentalist Sorcerer Arcanist ); fi
	if [ "$ARCHETYPE" = "" ];		then AlvaniARRAY=( Fighter Monk Thief Bard Mage "SpecM" Mentalist Arcanist ); fi
	if [ "$ARCHETYPE" = "Warrior" ];	then AlvaniARRAY=( Fighter ); fi
	if [ "$ARCHETYPE" = "Priest" ]; 	then AlvaniARRAY=( Monk ); fi
	if [ "$ARCHETYPE" = "Rogue" ];		then AlvaniARRAY=( Thief Bard ); fi
	if [ "$ARCHETYPE" = "Wizard" ];		then AlvaniARRAY=( Mage "SpecM" Mentalist Arcanist ); fi

	CONthrow=$[ $CONthrow -2 ] && INTthrow=$[ $INTthrow +2 ] && CHAthrow=$[ $CHAthrow -2 ] && COMthrow=$[ $COMthrow -4 ]

	HairTypeARRAY=( Straight Curly Kinky Wavy )
	HairLengthARRAY=( Shaved Chopped Short Close-Cropped Shoulder-Length Long )

	AlvaniSkinARRAY=( "Pale Yellow" "Yellow-Orange" "Ash-Yellow" "Dun Yellow" "Burnt Yellow" "Jaundice Yellow" )
	AlvaniHairARRAY=( "Soft Black" "Blue-Black" "Jet-Black" "Natural Black" "Dirty Brown" "Bald" ) 
	AlvaniEyeARRAY=( Silver Silver Silver Silver Silver Silver Silver Silver Silver Gray "Blue-Silver" )

for index in `shuf --input-range=0-$(( ${#AlvaniSkinARRAY[*]} - 1 )) | head -1`
do    SkinColor=${AlvaniSkinARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#AlvaniHairARRAY[*]} - 1 )) | head -1`
do    HairColor=${AlvaniHairARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#AlvaniEyeARRAY[*]} - 1 )) | head -1`
do    EyeColor=${AlvaniEyeARRAY[$index]}; done

	let "Age = $RANDOM % 4 + 18"
	let "MaxAge = $RANDOM % 100 + 252"
	if [ "$LEVEL" != "1" ] && [ "$AdvancedAge" = "Y" ]; then
	let "Age = $RANDOM % 50 + 19"; fi

	let OpenLocks+=1; let FindRemoveTraps+1; let HideinShadows-=2; let ReadLanguages+=3

	if   [ "$SEX" = "Male" ];then
	let "HeightInches = $RANDOM % 20 + 63" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=73
	let "BaseWt = $RANDOM % 36 + 154" # (Spread + Base Weight + 1)
	First=$(cat ./names/Alvani\ Male\ Names.txt | sort -R |head -1); fi
	if   [ "$SEX" = "Female" ];then
	let "HeightInches = $RANDOM % 20 + 62" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=72
	let "BaseWt = $RANDOM % 36 + 134" # (Spread + Base Weight + 1)
	First=$(cat ./names/Alvani\ Female\ Names.txt | sort -R |head -1); fi


CLASS=$CLASS_OVERRIDE
if  [ "$CLASS_OVERRIDE" = "" ]; then
	for index in `shuf --input-range=0-$(( ${#AlvaniARRAY[*]} - 1 )) | head -1`
	do    CLASS=${AlvaniARRAY[$index]}; done; fi
	;;



# --------------------- REDBLOOD SECTION ---------------------- #

	Redblood)
	SIZE=M
	HUMANOID=Y
	let "XPBonus+=5"
	if [ "$Dual-Class" = "Y" ] || [ "$Multi-Class" = "Y" ];	then RedbloodARRAY=( Fighter Ranger Cleric Druid Monk Thief Bard Mage Mentalist Sorcerer Arcanist ); fi 
	if [ "$ARCHETYPE" = "" ];		then RedbloodARRAY=( Fighter Paladin Cleric "SpecP" Druid Shaman Thief Bard Mage "SpecM" Sorcerer Arcanist ); fi
	if [ "$ARCHETYPE" = "Warrior" ];	then RedbloodARRAY=( Fighter Paladin ); fi
	if [ "$ARCHETYPE" = "Priest" ]; 	then RedbloodARRAY=( Cleric "SpecP" Druid Shaman ); fi
	if [ "$ARCHETYPE" = "Rogue" ];		then RedbloodARRAY=( Thief Bard ); fi
	if [ "$ARCHETYPE" = "Wizard" ];		then RedbloodARRAY=( Mage "SpecM" Sorcerer Arcanist ); fi

	CONthrow=$[ $CONthrow +1 ] && INTthrow=$[ $INTthrow -1 ]

	HairTypeARRAY=( Straight )
	HairLengthARRAY=( Shaved Chopped Short Close-Cropped Shoulder-Length Long )
	
	RedbloodSkinARRAY=( "Fair" "Light Brown" "Brownish-Yellow" "Nut Brown" "Dark Brown" "Chocolate Brown" "Brownish-Black" "Ash Black" "Midnight-Purple" )
	RedbloodHairARRAY=( "Soft Black" "Blue-Black" "Jet-Black" "Natural Black" "Deep Brunette" "Medium Brown" "Natural Brown" "Light Brown" "Chestnut Brown" "Chestnut Red" "Auburn" )	
	RedbloodEyeARRAY=( Black Brown Hazel )

for index in `shuf --input-range=0-$(( ${#RedbloodSkinARRAY[*]} - 1 )) | head -1`
do    SkinColor=${RedbloodSkinARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#RedbloodHairARRAY[*]} - 1 )) | head -1`
do    HairColor=${RedbloodHairARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#RedbloodEyeARRAY[*]} - 1 )) | head -1`
do    EyeColor=${RedbloodEyeARRAY[$index]}; done

	let "Age = $RANDOM % 4 + 18"
	let "MaxAge = $RANDOM % 60 + 69"
	if [ "$LEVEL" != "1" ] && [ "$AdvancedAge" = "Y" ]; then
	let "Age = $RANDOM % 30 + 19"; fi

	let MoveSilently-=1; let HideinShadows-=1; let ReadLanguages-=1
	if   [ "$SEX" = "Male" ]; then
	let "HeightInches = $RANDOM % 20 + 63" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=73
	let "BaseWt = $RANDOM % 36 + 184" # (Spread + Base Weight + 1)
	First=$(cat ./names/Human\ Male\ First\ Names.txt | sort -R |head -1)
 	Sur=$(cat ./names/Human\ Surnames.txt | sort -R |head -1); fi
	if   [ "$SEX" = "Female" ]; then
	let "HeightInches = $RANDOM % 20 + 62" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=72
	let "BaseWt = $RANDOM % 36 + 164" # (Spread + Base Weight + 1)
	First=$(cat ./names/Human\ Female\ First\ Names.txt | sort -R |head -1)
 	Sur=$(cat ./names/Human\ Surnames.txt | sort -R |head -1); fi
CLASS=$CLASS_OVERRIDE
if  [ "$CLASS_OVERRIDE" = "" ]; then
	for index in `shuf --input-range=0-$(( ${#RedbloodARRAY[*]} - 1 )) | head -1`
	do    CLASS=${RedbloodARRAY[$index]}; done; fi
	;;


# --------------------- FAIRBORN SECTION ---------------------- #


	Fairborn)
	SIZE=M
	HUMANOID=Y
	if [ "$Dual-Class" = "Y" ] || [ "$Multi-Class" = "Y" ];	then FairbornARRAY=( Fighter Ranger Cleric Druid Monk Thief Bard Mage Mentalist Sorcerer Arcanist ); fi
	if [ "$ARCHETYPE" = "" ];		then FairbornARRAY=( Fighter Cleric "SpecP" Druid Shaman Thief Bard Mage "SpecM" Arcanist ); fi
	if [ "$ARCHETYPE" = "Warrior" ];	then FairbornARRAY=( Fighter ); fi
	if [ "$ARCHETYPE" = "Priest" ]; 	then FairbornARRAY=( Cleric "SpecP" Druid Shaman ); fi
	if [ "$ARCHETYPE" = "Rogue" ];		then FairbornARRAY=( Thief Bard ); fi
	if [ "$ARCHETYPE" = "Wizard" ];		then FairbornARRAY=( Mage "SpecM" Arcanist ); fi

	CONthrow=$[ $CONthrow +1 ] && INTthrow=$[ $INTthrow -1 ] && WISthrow=$[ $WISthrow -1 ]&& COMthrow=$[ $COMthrow -1 ] 

	HairTypeARRAY=( Straight )
	HairLengthARRAY=( Shaved Chopped Short Close-Cropped Shoulder-Length Long )

	FairbornHairARRAY=( "Soft Black" "Blue-Black" "Jet-Black" "Natural Black" "Deep Brunette" "Medium Brown" "Natural Brown" "Light Brown" "Chestnut Brown" "Chestnut Red" "Auburn" )
	FairbornSkinARRAY=( "Dark Gray" "Dark Brown" "Slate Gray" "Ash Gray")
	FairbornEyeARRAY=( Black Brown Hazel )

for index in `shuf --input-range=0-$(( ${#FairbornSkinARRAY[*]} - 1 )) | head -1`
do    SkinColor=${FairbornSkinARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#FairbornHairARRAY[*]} - 1 )) | head -1`
do    HairColor=${FairbornHairARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#FairbornEyeARRAY[*]} - 1 )) | head -1`
do    EyeColor=${FairbornEyeARRAY[$index]}; done

	let "Age = $RANDOM % 4 + 18"
	let "MaxAge = $RANDOM % 60 + 69"
	if [ "$LEVEL" != "1" ] && [ "$AdvancedAge" = "Y" ]; then
	let "Age = $RANDOM % 30 + 19"; fi

if   [ "$SEX" = "Male" ]; then
	let "HeightInches = $RANDOM % 20 + 63" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=73
	let "BaseWt = $RANDOM % 60 + 147" # (Spread + Base Weight + 1)
	First=$(cat ./names/Trollborn\ Male\ Names.txt | sort -R |head -1)
 	Sur=$(cat ./names/Trollborn\ Surnames.txt | sort -R |head -1); fi
if   [ "$SEX" = "Female" ]; then
	let "HeightInches = $RANDOM % 20 + 62" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=72
	let "BaseWt = $RANDOM % 60 + 107" # (Spread + Base Weight + 1)
	First=$(cat ./names/Trollborn\ Female\ Names.txt | sort -R |head -1)
 	Sur=$(cat ./names/Trollborn\ Surnames.txt | sort -R |head -1); fi
CLASS=$CLASS_OVERRIDE
if  [ "$CLASS_OVERRIDE" = "" ]; then
	for index in `shuf --input-range=0-$(( ${#FairbornARRAY[*]} - 1 )) | head -1`
	do    CLASS=${FairbornARRAY[$index]}; done; fi
	;;


# -------------------- GREENBLOOD SECTION --------------------- #


	Greenblood)
	SIZE=M
	HUMANOID=Y
	CONthrow=$[ $CONthrow +1 ] && INTthrow=$[ $INTthrow -1 ] && WISthrow=$[ $WISthrow -1 ] && COMthrow=$[ $COMthrow -2 ]
	if [ "$Dual-Class" = "Y" ] || [ "$Multi-Class" = "Y" ];	then GreenbloodARRAY=( Fighter Ranger Cleric Druid Monk Thief Bard Mage Mentalist Sorcerer Arcanist ); fi
	if [ "$ARCHETYPE" = "" ];		then GreenbloodARRAY=( Fighter Cleric "SpecP" Druid Shaman Thief Bard Mage "SpecM" Arcanist ); fi
	if [ "$ARCHETYPE" = "Warrior" ];	then GreenbloodARRAY=( Fighter ); fi
	if [ "$ARCHETYPE" = "Priest" ]; 	then GreenbloodARRAY=( Cleric "SpecP" Druid Shaman ); fi
	if [ "$ARCHETYPE" = "Rogue" ];		then GreenbloodARRAY=( Thief Bard ); fi
	if [ "$ARCHETYPE" = "Wizard" ];		then GreenbloodARRAY=( Mage "SpecM" Arcanist ); fi
CLASS=$CLASS_OVERRIDE
if  [ "$CLASS_OVERRIDE" = "" ]; then
for index in `shuf --input-range=0-$(( ${#GreenbloodARRAY[*]} - 1 )) | head -1`
do    CLASS=${GreenbloodARRAY[$index]}; done;fi

	HairTypeARRAY=( Straight )
	HairLengthARRAY=( Shaved Chopped Short Close-Cropped Shoulder-Length Long )
	GreenbloodSkinARRAY=( "Dark Gray" "Dark Brown" "Slate Gray" "Ash Gray")
	GreenbloodHairARRAY=( "Blue-Black" "Natural Black" "Deep Brunette" "Medium Brown" "Light Brown" "Chestnut Brown" "Auburn" "Red" "Strawberry Blonde" "Gray" "White" "Green" ) 
	GreenbloodEyeARRAY=( Black Brown )

for index in `shuf --input-range=0-$(( ${#GreenbloodSkinARRAY[*]} - 1 )) | head -1`
do    SkinColor=${GreenbloodSkinARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#GreenbloodHairARRAY[*]} - 1 )) | head -1`
do    HairColor=${GreenbloodHairARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#GreenbloodEyeARRAY[*]} - 1 )) | head -1`
do    EyeColor=${GreenbloodEyeARRAY[$index]}; done

	let "Age = $RANDOM % 4 + 18"
	let "MaxAge = $RANDOM % 60 + 69"
	if [ "$LEVEL" != "1" ] && [ "$AdvancedAge" = "Y" ]; then
	let "Age = $RANDOM % 30 + 19"; fi

		let MoveSilently-=2
		let HideinShadows-=1
		let ReadLanguages-=1
if   [ "$SEX" = "Male" ]; then
	let "HeightInches = $RANDOM % 36 + 70" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=88
	let "BaseWt = $RANDOM % 60 + 326" # (Spread + Base Height + 1)
	First=$(cat ./names/Trollborn\ Male\ Names.txt | sort -R |head -1)
	Sur=$(cat ./names/Trollborn\ Surnames.txt | sort -R |head -1); fi
if   [ "$SEX" = "Female" ]; then
	let "HeightInches = $RANDOM % 36 + 64" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=82
	let "BaseWt = $RANDOM % 60 + 296" # (Spread + Base Height + 1)
	First=$(cat ./names/Trollborn\ Female\ Names.txt | sort -R |head -1)
	Sur=$(cat ./names/Trollborn\ Surnames.txt | sort -R |head -1); fi
	;;



# -------------------- HALFBLOOD SECTION ---------------------- #


	Halfblood)
	SIZE=L
	HUMANOID=Y
	if [ "$Dual-Class" = "Y" ] || [ "$Multi-Class" = "Y" ];	then HalfbloodARRAY=( Fighter Ranger Cleric Druid Monk Thief Bard Mage Mentalist Sorcerer ); fi
	if [ "$ARCHETYPE" = "" ];		then HalfbloodARRAY=( Fighter Cleric "SpecP" Druid Thief Bard  ); fi
	if [ "$ARCHETYPE" = "Warrior" ];	then HalfbloodARRAY=( Fighter ); fi
	if [ "$ARCHETYPE" = "Priest" ]; 	then HalfbloodARRAY=( Cleric "SpecP"  Druid ); fi
	if [ "$ARCHETYPE" = "Rogue" ];		then HalfbloodARRAY=( Thief Bard ); fi
	if [ "$ARCHETYPE" = "Wizard" ];		then HalfbloodARRAY=(  ); fi

	STRthrow=$[ $STRthrow +2 ] && CONthrow=$[ $CONthrow +2 ] && INTthrow=$[ $INTthrow -2 ] && WISthrow=$[ $WISthrow -2 ] && CHAthrow=$[ $CHAthrow -1 ] && COMthrow=$[ $COMthrow -3 ] 

CLASS=$CLASS_OVERRIDE
if  [ "$CLASS_OVERRIDE" = "" ]; then
for index in `shuf --input-range=0-$(( ${#HalfbloodARRAY[*]} - 1 )) | head -1`
do    CLASS=${HalfbloodARRAY[$index]}; done;fi

	HairTypeARRAY=( Straight )
	HairLengthARRAY=( Shaved Chopped Short Close-Cropped Shoulder-Length Long )
	HalfbloodSkinARRAY=( "Dark Gray" "Dark Brown" "Slate Gray" "Ash Gray")
	HalfbloodHairARRAY=( "Blue-Black" "Natural Black" "Deep Brunette" "Medium Brown" "Light Brown" "Chestnut Brown" "Auburn" "Red" "Strawberry Blonde" "Gray" "White" "Green" ) 
	HalfbloodEyeARRAY=( Black Brown )

for index in `shuf --input-range=0-$(( ${#HalfbloodSkinARRAY[*]} - 1 )) | head -1`
do    SkinColor=${HalfbloodSkinARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#HalfbloodHairARRAY[*]} - 1 )) | head -1`
do    HairColor=${HalfbloodHairARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#HalfbloodEyeARRAY[*]} - 1 )) | head -1`
do    EyeColor=${HalfbloodEyeARRAY[$index]}; done

	let "Age = $RANDOM % 4 + 18"
	let "MaxAge = $RANDOM % 60 + 69"
	if [ "$LEVEL" != "1" ] && [ "$AdvancedAge" = "Y" ]; then
	let "Age = $RANDOM % 30 + 19"; fi

		let PickPockets-=1
		let OpenLocks-=1
		let MoveSilently-=3
		let HideinShadows-=2
		let ReadLanguages-=2
if   [ "$SEX" = "Male" ]; then
	let "HeightInches = $RANDOM % 48 + 77" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=101
	let "BaseWt = $RANDOM % 100 + 556" # (Spread + Base Height + 1)
	First=$(cat ./names/Trollborn\ Male\ Names.txt | sort -R |head -1)
	Sur=$(cat ./names/Trollborn\ Surnames.txt | sort -R |head -1); fi
if   [ "$SEX" = "Female" ]; then
	let "HeightInches = $RANDOM % 48 + 75" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=98
	let "BaseWt = $RANDOM % 100 + 441" # (Spread + Base Height + 1)
	First=$(cat ./names/Trollborn\ Female\ Names.txt | sort -R |head -1)
 	Sur=$(cat ./names/Trollborn\ Surnames.txt | sort -R |head -1); fi
if   [ "$STRthrow" -gt "18" ]; then STRthrow=18; fi
	;;



# ---------------------- LUGAN SECTION ------------------------ #


	Lugan)
	SIZE=M
	BEAST=Y
	if [ "$Dual-Class" = "Y" ] || [ "$Multi-Class" = "Y" ];	then LuganARRAY=( Fighter Ranger Cleric Druid Monk Thief Bard Mage Mentalist Sorcerer Arcanist ); fi
	if [ "$ARCHETYPE" = "" ];		then LuganARRAY=( Fighter Ranger Cleric "SpecP" Monk Druid Shaman Thief Bard Mage "SpecM" Sorcerer Arcanist ); fi
	if [ "$ARCHETYPE" = "Warrior" ];	then LuganARRAY=( Fighter Ranger ); fi
	if [ "$ARCHETYPE" = "Priest" ]; 	then LuganARRAY=( Cleric "SpecP" Monk Druid Shaman ); fi
	if [ "$ARCHETYPE" = "Rogue" ];		then LuganARRAY=( Thief Bard ); fi
	if [ "$ARCHETYPE" = "Wizard" ];		then LuganARRAY=( Mage "SpecM" Sorcerer Arcanist ); fi

	DEXthrow=$[ $DEXthrow +2 ] && CONthrow=$[ $CONthrow -2 ] && COMthrow=$[ $COMthrow +2 ]

CLASS=$CLASS_OVERRIDE
if  [ "$CLASS_OVERRIDE" = "" ]; then
for index in `shuf --input-range=0-$(( ${#LuganARRAY[*]} - 1 )) | head -1`
do    CLASS=${LuganARRAY[$index]}; done;fi

	LuganEyeARRAY=( Blue Black Brown Hazel Green Gray )
	FurLengthARRAY=( Short Long "Double Coated" )
	LuganHairARRAY=( "Soft Black" "Blue-Black" "Jet-Black" "Natural Black" "Deep Brunette" "Medium Brown" "Natural Brown" "Light Brown" "Chestnut Brown" "Chestnut Red" "Auburn" "Red" "Strawberry Blonde" "Light Blonde" "Dark Blonde" "Natural Blonde" "Platinum Blonde" "Medium Blonde" "Dark Gray" "Gray" "White" )
	LuganFurARRAY=( "Velvet Black" "Blue-Black" "Light Brown" "Chestnut Brown" "Chestnut Red" "Auburn" "Red" "Dark Blonde" "Dark Gray" "Dusty Gray" "White" )

for index in `shuf --input-range=0-$(( ${#LuganFurARRAY[*]} - 1 )) | head -1`
do    CoatColor=${LuganFurARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#LuganHairARRAY[*]} - 1 )) | head -1`
do    HairColor=${LuganHairARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#LuganEyeARRAY[*]} - 1 )) | head -1`
do    EyeColor=${LuganEyeARRAY[$index]}; done

	let "Age = $RANDOM % 6 + 13"
	let "MaxAge = $RANDOM % 60 + 74"
	if [ "$LEVEL" != "1" ] && [ "$AdvancedAge" = "Y" ]; then
	let "Age = $RANDOM % 30 + 14"; fi

		let PickPockets-=1
		let OpenLocks-=1
		let FindRemoveTraps+2
		let MoveSilently+=1
		let HideinShadows+=1
		let ClimbWalls+=2

if   [ "$DEXthrow" -gt "19" ]; then DEXthrow=$[ 19 ];fi
if   [ "$SEX" = "Male" ]; then
	let "HeightInches = $RANDOM % 12 + 54" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=60
	let "BaseWt = $RANDOM % 60 + 91" # (Spread + Base Height + 1)
	First=$(cat ./names/Lugan\ Male\ Names.txt | sort -R |head -1)
 	Sur=$(cat ./names/Lugan\ Surnames.txt | sort -R |head -1); fi
if   [ "$SEX" = "Female" ]; then
	let "HeightInches = $RANDOM % 12 + 52" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=58
	let "BaseWt = $RANDOM % 60 + 86"; fi # (Spread + Base Height + 1)
	;;


# -------------------- WATERFOLK SECTION ---------------------- #

	Waterfolk)
	SIZE=M
	BEAST=Y
	if [ "$Dual-Class" = "Y" ] || [ "$Multi-Class" = "Y" ];	then WaterfolkARRAY=( Fighter Ranger Cleric Druid Monk Thief Bard Mage Mentalist Sorcerer Arcanist ); fi
	if [ "$ARCHETYPE" = "" ];		then WaterfolkARRAY=( Fighter Ranger Cleric "SpecP" Druid Shaman Thief Bard Mage "SpecM" Arcanist ); fi
	if [ "$ARCHETYPE" = "Warrior" ];	then WaterfolkARRAY=( Fighter Ranger ); fi
	if [ "$ARCHETYPE" = "Priest" ]; 	then WaterfolkARRAY=( Cleric "SpecP" Druid Shaman ); fi
	if [ "$ARCHETYPE" = "Rogue" ];		then WaterfolkARRAY=( Thief Bard ); fi
	if [ "$ARCHETYPE" = "Wizard" ];		then WaterfolkARRAY=( Mage "SpecM" Arcanist ); fi

	DEXthrow=$[ $DEXthrow -1 ] && COMthrow=$[ $COMthrow +1 ]

CLASS=$CLASS_OVERRIDE
if  [ "$CLASS_OVERRIDE" = "" ]; then
for index in `shuf --input-range=0-$(( ${#WaterfolkARRAY[*]} - 1 )) | head -1`
do    CLASS=${WaterfolkARRAY[$index]}; done;fi

	WaterfolkEyeARRAY=( Blue Black Brown Hazel Green Gray )
	FurLengthARRAY=( Short Long "Double Coated" )
	WaterfolkHairARRAY=( "Soft Black" "Blue-Black" "Jet-Black" "Natural Black" "Deep Brunette" "Medium Brown" "Natural Brown" "Light Brown" "Chestnut Brown" "Chestnut Red" "Auburn" "Red" "Strawberry Blonde" "Light Blonde" "Dark Blonde" "Natural Blonde" "Platinum Blonde" "Medium Blonde" "Dark Gray" "Gray" "White" )
	WaterfolkFurARRAY=( "Blue-Black" "Jet-Black" "Deep Brown" "Natural Brown" "Light Brown" "Chestnut Brown" "Chestnut Red" "Auburn" "Dark Blonde" "Dark Gray" )

for index in `shuf --input-range=0-$(( ${#WaterfolkFurARRAY[*]} - 1 )) | head -1`
do    CoatColor=${WaterfolkFurARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#WaterfolkHairARRAY[*]} - 1 )) | head -1`
do    HairColor=${WaterfolkHairARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#WaterfolkEyeARRAY[*]} - 1 )) | head -1`
do    EyeColor=${WaterfolkEyeARRAY[$index]}; done


	let "Age = $RANDOM % 4 + 13"
	let "MaxAge = $RANDOM % 30 + 58"
	if [ "$LEVEL" != "1" ] && [ "$AdvancedAge" = "Y" ]; then
	let "Age = $RANDOM % 15 + 14"; fi

		let OpenLocks+=1
		let FindRemoveTraps+2
		let MoveSilently+=1
		let HideinShadows+=1
		let DetectNoise+=2
		let ClimbWalls-=3

		First=$(cat ./names/Waterfolk\ Names.txt | sort -R |head -1)
		Sur=$(cat ./names/Waterfolk\ Surnames.txt | sort -R |head -1)

if [ "$SEX" = "Male" ]; then
	let "HeightInches = $RANDOM % 12 + 39" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=45
	let "BaseWt = $RANDOM % 60 + 69" ;fi
if [ "$SEX" = "Female" ]; then
	let "HeightInches = $RANDOM % 12 + 34" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=40
	let "BaseWt = $RANDOM % 60 + 70"; fi
	;;



# ----------------------- URSA SECTION ------------------------ #

	Ursa)
	SIZE=L
	BEAST=Y
	if [ "$Dual-Class" = "Y" ] || [ "$Multi-Class" = "Y" ];	then UrsaARRAY=( Fighter Druid Bard Mage Sorcerer Arcanist ); fi
	if [ "$ARCHETYPE" = "" ];		then UrsaARRAY=( Fighter "SpecP" Druid Bard Mage "SpecM" Sorcerer Arcanist ); fi
	if [ "$ARCHETYPE" = "Warrior" ];	then UrsaARRAY=( Fighter ); fi
	if [ "$ARCHETYPE" = "Priest" ]; 	then UrsaARRAY=( "SpecP" Druid ); fi
	if [ "$ARCHETYPE" = "Rogue" ];		then UrsaARRAY=( Bard ); fi
	if [ "$ARCHETYPE" = "Wizard" ];		then UrsaARRAY=( Mage "SpecM" Sorcerer Arcanist ); fi
	STRthrow=$[ $STRthrow +4 ] && WISthrow=$[ $WISthrow -2 ] && COMthrow=$[ $COMthrow -1 ]

CLASS=$CLASS_OVERRIDE
if  [ "$CLASS_OVERRIDE" = "" ]; then
for index in `shuf --input-range=0-$(( ${#UrsaARRAY[*]} - 1 )) | head -1`
do    CLASS=${UrsaARRAY[$index]}; done;fi

	UrsaEyeARRAY=( Blue Black Brown Hazel Green Gray )
	FurLengthARRAY=( Short Long "Double Coated" )
	UrsaHairARRAY=( "Soft Black" "Blue-Black" "Jet-Black" "Natural Black" "Deep Brunette" "Medium Brown" "Natural Brown" "Light Brown" "Chestnut Brown" "Chestnut Red" "Auburn" "Red" "Strawberry Blonde" "Light Blonde" "Dark Blonde" "Natural Blonde" "Platinum Blonde" "Medium Blonde" "Dark Gray" "Gray" "White" )
	UrsaFurARRAY=( "Soft Black" "Blue-Black" "Jet-Black" "Natural Black" "Deep Brunette" "Medium Brown" "Natural Brown" "Light Brown" "Chestnut Brown" "Chestnut Red" "Auburn" "Red" "Strawberry Blonde" "Light Blonde" "Dark Blonde" "Natural Blonde" "Platinum Blonde" "Medium Blonde" "Dark Gray" "Gray" "White" )

for index in `shuf --input-range=0-$(( ${#UrsaFurARRAY[*]} - 1 )) | head -1`
do    CoatColor=${UrsaFurARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#UrsaHairARRAY[*]} - 1 )) | head -1`
do    HairColor=${UrsaHairARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#UrsaEyeARRAY[*]} - 1 )) | head -1`
do    EyeColor=${UrsaEyeARRAY[$index]}; done

	let "Age = $RANDOM % 6 + 12"
	let "MaxAge = $RANDOM % 18 + 54"
	if [ "$LEVEL" != "1" ] && [ "$AdvancedAge" = "Y" ]; then
	let "Age = $RANDOM % 15 + 13"; fi

	let PickPockets-=3; let MoveSilently-=2; let HideinShadows-=1; let ClimbWalls-=3

if   [ "$STRthrow" -gt "20" ]; then STRthrow=$[ 20 ];fi

if   [ "$SEX" = "Male" ]; then
	let "HeightInches = $RANDOM % 24 + 83" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=95
	let "BaseWt = $RANDOM % 100 + 586" # (Spread + Base Height + 1)
	First=$(cat ./names/Ursa\ Male\ Names.txt | sort -R |head -1)
 	Pat=$(cat ./names/Ursa\ Male\ Patronymic.txt | sort -R |head -1)
 	Sur=$(cat ./names/Ursa\ Surnames.txt | sort -R |head -1); fi
if   [ "$SEX" = "Female" ]; then
	let "HeightInches = $RANDOM % 24 + 73" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=85
	let "BaseWt = $RANDOM % 100 + 556" # (Spread + Base Height + 1)
	First=$(cat ./names/Ursa\ Female\ Names.txt | sort -R |head -1)
 	Pat=$(cat ./names/Ursa\ Female\ Patronymic.txt | sort -R |head -1)
 	Sur=$(cat ./names/Ursa\ Surnames.txt | sort -R |head -1); fi
	;;



# ---------------------- SELAH SECTION ------------------------ #

	Selah)
	SIZE=L
	BEAST=Y
	if [ "$Dual-Class" = "Y" ] || [ "$Multi-Class" = "Y" ];	then SelahARRAY=( Fighter Cleric Druid Thief Bard Mage Sorcerer Arcanist ); fi
	if [ "$ARCHETYPE" = "" ];				then SelahARRAY=( Fighter Cleric Druid "SpecP" Thief Bard Mage "SpecM" Sorcerer Arcanist ); fi
	if [ "$ARCHETYPE" = "Warrior" ];			then SelahARRAY=( Fighter ); fi
	if [ "$ARCHETYPE" = "Priest" ]; 			then SelahARRAY=( Cleric Druid "SpecP" ); fi
	if [ "$ARCHETYPE" = "Rogue" ];				then SelahARRAY=( Thief Bard ); fi
	if [ "$ARCHETYPE" = "Wizard" ];				then SelahARRAY=( Mage "SpecM" Sorcerer Arcanist ); fi
	STRthrow=$[ $STRthrow +2 ] && WISthrow=$[ $WISthrow -2 ] && COMthrow=$[ $COMthrow -3 ]

CLASS=$CLASS_OVERRIDE
if  [ "$CLASS_OVERRIDE" = "" ]; then
for index in `shuf --input-range=0-$(( ${#SelahARRAY[*]} - 1 )) | head -1`
do    CLASS=${SelahARRAY[$index]}; done;fi

	SelahEyeARRAY=( Blue Black Red Purple Green Gray White Yellow )
	SelahBellyScaleARRAY=( Beige Sandy White Red Brown Yellow Green )
	SelahScaleColorARRAY=( "Black" "Blue-Black" "Brown" "Deep Green" "Blue" "Gray" )

#Choose a scale, belly, and eye color
for index in `shuf --input-range=0-$(( ${#SelahScaleColorARRAY[*]} - 1 )) | head -1`
do    ScaleColor=${SelahScaleColorARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#SelahBellyScaleARRAY[*]} - 1 )) | head -1`
do    BellyColor=${SelahBellyScaleARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#SelahEyeARRAY[*]} - 1 )) | head -1`
do    EyeColor=${SelahEyeARRAY[$index]}; done

	let "Age = $RANDOM % 20 + 31"
	let "MaxAge = $RANDOM % 400 + 203"
	if [ "$LEVEL" != "1" ] && [ "$AdvancedAge" = "Y" ]; then
	let "Age = $RANDOM % 100 + 32"; fi

	let MoveSilently+=2; let HideinShadows+=2; let DetectNoise+=1; let ClimbWalls-=2


	if [ "$SEX" = "Male" ]; then
	let "HeightInches = $RANDOM % 50 + 166" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=151
	let "BaseWt = $RANDOM % 200 + 553" ;fi
	if [ "$SEX" = "Female" ]; then
	let "HeightInches = $RANDOM % 50 + 186" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=191
	let "BaseWt = $RANDOM % 200 + 603" ;fi

	First=$(cat ./names/Selah\ Names.txt | sort -R |head -1)

if   [ "$STRthrow" -gt "20" ]; then STRthrow=$[ 20 ]; fi
	;;



# --------------------- HALF-ORC SECTION ---------------------- #


	Half-Orc)
let "OrcBirth = $RANDOM % $RaisedAmongHumans +1"
	SIZE=M
	HUMANOID=Y
	if [ "$Dual-Class" = "Y" ] || [ "$Multi-Class" = "Y" ];	then HalfOrcARRAY=( Fighter Cleric Druid Thief Bard Mage Sorcerer Arcanist ); fi
	if [ "$ARCHETYPE" = "" ];				then HalfOrcARRAY=( Fighter Cleric "SpecP" Druid Monk Shaman Thief Bard Mage "SpecM" Sorcerer Arcanist )
	elif [ "$ARCHETYPE" = "Warrior" ];			then HalfOrcARRAY=( Fighter )
	elif [ "$ARCHETYPE" = "Priest" ]; 			then HalfOrcARRAY=( Cleric "SpecP" Druid Shaman )
	elif [ "$ARCHETYPE" = "Rogue" ];			then HalfOrcARRAY=( Thief Bard )
	elif [ "$ARCHETYPE" = "Wizard" ];			then HalfOrcARRAY=( Mage "SpecM" Sorcerer Arcanist ); fi

CLASS=$CLASS_OVERRIDE
if  [ "$CLASS_OVERRIDE" = "" ]; then
for index in `shuf --input-range=0-$(( ${#HalfOrcARRAY[*]} - 1 )) | head -1`
do    CLASS=${HalfOrcARRAY[$index]}; done;fi

	STRthrow=$[ $STRthrow +1 ] && CONthrow=$[ $CONthrow +1 ] && INTthrow=$[ $INTthrow -2 ] && WISthrow=$[ $WISthrow -1 ] && COMthrow=$[ $COMthrow -3 ]

	HairTypeARRAY=( Curly Kinky Wiry )
	HairLengthARRAY=( Shaved Chopped Short Close-Cropped Shoulder-Length Long )
	HalfOrcSkinARRAY=( "Nut Brown" "Gray" "Purple Gray" "Gray-Green" "Dark Gray" "Ash Green" "Ash Gray")
	HalfOrcHairARRAY=( "Dirty Black" "Flat Black" "Deep Brunette" "Sandy Brown" "Light Brown" "Chestnut Brown" "Dark Blonde" ) 
	HalfOrcEyeARRAY=( "Jet Black" "Dull Black" "Muddy Brown" "Red" "Purple" )

#Choose a skin, hair, and eye color
for index in `shuf --input-range=0-$(( ${#HalfOrcSkinARRAY[*]} - 1 )) | head -1`
do    SkinColor=${HalfOrcSkinARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#HalfOrcHairARRAY[*]} - 1 )) | head -1`
do    HairColor=${HalfOrcHairARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#HalfOrcEyeARRAY[*]} - 1 )) | head -1`
do    EyeColor=${HalfOrcEyeARRAY[$index]}; done

	let "Age = $RANDOM % 4 + 16"
	let "MaxAge = $RANDOM % 40 + 82"
	if [ "$LEVEL" != "1" ] && [ "$AdvancedAge" = "Y" ]; then
	let "Age = $RANDOM % 20 + 17"; fi

	let "PHP = $LEVEL * 2" 	# Phantom hit point calculation for rage

	let PickPockets+=1; let MoveSilently+=1; let HideinShadows+=1; let ClimbWalls+=1; let ReadLanguages-=3
	if [ "$OrcBirth" = "1" ]; then
	if   [ "$SEX" = "Male" ]; then
	let "HeightInches = $RANDOM % 20 + 66" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=76
	let "BaseWt = $RANDOM % 60 + 247" # (Spread + Base Height + 1)
	First=$(cat ./names/Human\ Male\ First\ Names.txt | sort -R |head -1)
	Sur=$(cat ./names/Human\ Surnames.txt | sort -R |head -1);fi
	if   [ "$SEX" = "Female" ]; then
	let "HeightInches = $RANDOM % 20 + 63" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=73
	let "BaseWt = $RANDOM % 60 + 177" # (Spread + Base Height + 1)
	First=$(cat ./names/Human\ Female\ First\ Names.txt | sort -R |head -1)
	Sur=$(cat ./names/Human\ Surnames.txt | sort -R |head -1); fi;fi
	if [ "$OrcBirth" = "2" ]; then
	if   [ "$SEX" = "Male" ]; then
	let "HeightInches = $RANDOM % 20 + 66" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=76
	let "BaseWt = $RANDOM % 60 + 247" # (Spread + Base Height + 1)
	First=$(cat ./names/Half\ Orc\ Male\ Names.txt | sort -R |head -1); fi
	if   [ "$SEX" = "Female" ]; then
	let "HeightInches = $RANDOM % 20 + 63" # (Spread + Base Height + 1
	BaseHeight=73
	let "BaseWt = $RANDOM % 60 + 177" # (Spread + Base Height + 1)
	First=$(cat ./names/Half\ Orc\ Female\ Names.txt | sort -R |head -1); fi; fi
	;;



# ---------------------- ELKAN SECTION ------------------------ #


	Elkan)
	SIZE=M
	BEAST=Y
	if [ "$Dual-Class" = "Y" ] || [ "$Multi-Class" = "Y" ];	then ElkanARRAY=( Fighter Ranger Cleric Druid Thief Bard Mage Arcanist ); fi
	if [ "$ARCHETYPE" = "" ];				then ElkanARRAY=( Fighter Ranger Cleric "SpecP" Druid Shaman Thief Bard Mage "SpecM" Arcanist ); fi
	if [ "$ARCHETYPE" = "Warrior" ];			then ElkanARRAY=( Fighter Ranger ); fi
	if [ "$ARCHETYPE" = "Priest" ]; 			then ElkanARRAY=( Cleric "SpecP" Druid Shaman ); fi
	if [ "$ARCHETYPE" = "Rogue" ];				then ElkanARRAY=( Thief Bard ); fi
	if [ "$ARCHETYPE" = "Wizard" ];				then ElkanARRAY=( Mage "SpecM" Arcanist ); fi

	DEXthrow=$[ $DEXthrow +1 ] && CHAthrow=$[ $CHAthrow -4 ] && COMthrow=$[ $COMthrow +2 ]

CLASS=$CLASS_OVERRIDE
if  [ "$CLASS_OVERRIDE" = "" ]; then
for index in `shuf --input-range=0-$(( ${#ElkanARRAY[*]} - 1 )) | head -1`
do    CLASS=${ElkanARRAY[$index]}; done;fi

	ElkanEyeARRAY=( Blue Black Brown Hazel Green Gray )
	FurLengthARRAY=( Short Long "Double Coated" )
	ElkanHairARRAY=( "Soft Black" "Blue-Black" "Jet-Black" "Natural Black" "Deep Brunette" "Medium Brown" "Natural Brown" "Light Brown" "Chestnut Brown" "Chestnut Red" "Auburn" "Red" "Strawberry Blonde" "Light Blonde" "Dark Blonde" "Natural Blonde" "Platinum Blonde" "Medium Blonde" "Dark Gray" "Gray" "White" )
	ElkanFurARRAY=( "Blue-Black" "Jet-Black" "Deep Brown" "Natural Brown" "Light Brown" "Chestnut Brown" "Chestnut Red" "Auburn" "Dark Blonde" "Dark Gray" )

for index in `shuf --input-range=0-$(( ${#ElkanFurARRAY[*]} - 1 )) | head -1`
do    CoatColor=${ElkanFurARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#ElkanHairARRAY[*]} - 1 )) | head -1`
do    HairColor=${ElkanHairARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#ElkanEyeARRAY[*]} - 1 )) | head -1`
do    EyeColor=${ElkanEyeARRAY[$index]}; done


	let "Age = $RANDOM % 4 + 13"
	let "MaxAge = $RANDOM % 40 + 66"
	if [ "$LEVEL" != "1" ] && [ "$AdvancedAge" = "Y" ]; then
	let "Age = $RANDOM % 15 + 14"; fi

		let OpenLocks+=1
		let FindRemoveTraps+2
		let MoveSilently+=1
		let HideinShadows+=1
		let DetectNoise+=2
		let ClimbWalls-=3
		First=$(cat ./names/Elkan\ Surnames.txt | sort -R |head -1)

if [ "$SEX" = "Male" ]; then
	let "HeightInches = $RANDOM % 12 + 69" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=74
	let "BaseWt = $RANDOM % 60 + 180"; fi
if [ "$SEX" = "Female" ]; then
	let "HeightInches = $RANDOM % 12 + 67" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=72
	let "BaseWt = $RANDOM % 60 + 170"; fi
	;;


# --------------------- GNOOSHE SECTION ----------------------- #

	Gnooshe)
	SIZE=M
	BEAST=Y
	if [ "$Dual-Class" = "Y" ] || [ "$Multi-Class" = "Y" ];	then GnoosheARRAY=( Fighter Ranger Cleric Druid Thief Bard Mage Arcanist ); fi
	if [ "$ARCHETYPE" = "" ];				then GnoosheARRAY=( Fighter Ranger Cleric "SpecP" Druid Shaman Thief Bard Mage "SpecM" Arcanist ); fi
	if [ "$ARCHETYPE" = "Warrior" ];			then GnoosheARRAY=( Fighter Ranger ); fi
	if [ "$ARCHETYPE" = "Priest" ]; 			then GnoosheARRAY=( Cleric "SpecP" Druid Shaman ); fi
	if [ "$ARCHETYPE" = "Rogue" ];				then GnoosheARRAY=( Thief Bard ); fi
	if [ "$ARCHETYPE" = "Wizard" ];				then GnoosheARRAY=( Mage "SpecM" Arcanist ); fi

	CONthrow=$[ $CONthrow +1 ] && INTthrow=$[ $INTthrow -1 ] && CHAthrow=$[ $CHAthrow -1 ]

CLASS=$CLASS_OVERRIDE
if  [ "$CLASS_OVERRIDE" = "" ]; then
for index in `shuf --input-range=0-$(( ${#GnoosheARRAY[*]} - 1 )) | head -1`
do    CLASS=${GnoosheARRAY[$index]}; done;fi

	GnoosheEyeARRAY=( Blue Black Brown Hazel Green Gray )
	FurLengthARRAY=( Short Long "Double Coated" )
	GnoosheHairARRAY=( "Soft Black" "Blue-Black" "Jet-Black" "Natural Black" "Deep Brunette" "Medium Brown" "Natural Brown" "Light Brown" "Chestnut Brown" "Chestnut Red" "Auburn" "Red" "Strawberry Blonde" "Light Blonde" "Dark Blonde" "Natural Blonde" "Platinum Blonde" "Medium Blonde" "Dark Gray" "Gray" "White" )
	GnoosheFurARRAY=( "Blue-Black" "Jet-Black" "Deep Brown" "Natural Brown" "Light Brown" "Chestnut Brown" "Chestnut Red" "Auburn" "Dark Blonde" "Dark Gray" )

for index in `shuf --input-range=0-$(( ${#GnoosheFurARRAY[*]} - 1 )) | head -1`
do    CoatColor=${GnoosheFurARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#GnoosheHairARRAY[*]} - 1 )) | head -1`
do    HairColor=${GnoosheHairARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#GnoosheEyeARRAY[*]} - 1 )) | head -1`
do    EyeColor=${GnoosheEyeARRAY[$index]}; done


	let "Age = $RANDOM % 4 + 13"
	let "MaxAge = $RANDOM % 30 + 58"
	if [ "$LEVEL" != "1" ] && [ "$AdvancedAge" = "Y" ]; then
	let "Age = $RANDOM % 15 + 14"; fi

		let OpenLocks+=1
		let FindRemoveTraps+2
		let MoveSilently+=1
		let HideinShadows+=1
		let DetectNoise+=2
		let ClimbWalls-=3


if [ "$SEX" = "Male" ]; then
	let "HeightInches = $RANDOM % 12 + 39" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=45
	let "BaseWt = $RANDOM % 60 + 69" 
	First=$(cat ./names/Gnooshe\ Male\ Names.txt | sort -R |head -1); fi
if [ "$SEX" = "Female" ]; then
	let "HeightInches = $RANDOM % 12 + 34" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=40
	let "BaseWt = $RANDOM % 60 + 70"
	First=$(cat ./names/Gnooshe\ Female\ Names.txt | sort -R |head -1); fi

	Sur=$(cat ./names/Gnooshe\ Surnames.txt | sort -R |head -1)
	
	;;



# --------------- PROTEAN (PRESERVER) SECTION ----------------- #

	Protean)
	SIZE=M
	HUMANOID=Y
	PROTEAN=Y
	if [ "$Dual-Class" = "Y" ] || [ "$Multi-Class" = "Y" ];	then ProteanARRAY=( Fighter Ranger Cleric Monk Thief Bard Mage Arcanist ); fi
	if [ "$ARCHETYPE" = "" ];				then ProteanARRAY=( Fighter Ranger Paladin Cleric Monk Thief Bard Mage "SpecM" Arcanist ); fi
	if [ "$ARCHETYPE" = "Warrior" ];			then ProteanARRAY=( Fighter Ranger Paladin ); fi
	if [ "$ARCHETYPE" = "Priest" ]; 			then ProteanARRAY=( Cleric Monk ); fi
	if [ "$ARCHETYPE" = "Rogue" ];				then ProteanARRAY=( Thief Bard ); fi
	if [ "$ARCHETYPE" = "Wizard" ];				then ProteanARRAY=( Mage "SpecM" Arcanist ); fi

#	This race gets no ability score adjustments

CLASS=$CLASS_OVERRIDE
if  [ "$CLASS_OVERRIDE" = "" ]; then
for index in `shuf --input-range=0-$(( ${#ProteanARRAY[*]} - 1 )) | head -1`
do    CLASS=${ProteanARRAY[$index]}; done;fi

	ProteanEyeARRAY=( Blue )
	ProteanHairARRAY=( "None" )
	ProteanSkinARRAY=( "Blue-Black" "Gold" "Silver" "Dull White" )

for index in `shuf --input-range=0-$(( ${#ProteanSkinARRAY[*]} - 1 )) | head -1`
do    SkinColor=${ProteanSkinARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#ProteanHairARRAY[*]} - 1 )) | head -1`
do    HairColor=${ProteanHairARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#ProteanEyeARRAY[*]} - 1 )) | head -1`
do    EyeColor=${ProteanEyeARRAY[$index]}; done

	let "Age = $RANDOM % 2 + 3"
	MaxAge="Unknown"
	if [ "$LEVEL" != "1" ] && [ "$AdvancedAge" = "Y" ]; then
	let "Age = $RANDOM % 750 + 1500"; fi

		let OpenLocks+=1
		let FindRemoveTraps+2
		let MoveSilently+=1
		let HideinShadows+=1
		let DetectNoise+=2
		let ClimbWalls-=3

		First=$(cat /dev/urandom | tr -cd A-Z | fold -w2 | head -n 1)
		Pat=$(cat /dev/urandom | tr -cd 0001-9999 | fold -w4 | head -n 1)
	 	Sur=$(cat ./names/Protean\ Surnames.txt | sort -R |head -1)

	let "HeightInches = 70" 
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=70
	let "BaseWt = 220"
	;;



# ---------------------- ROTAN SECTION ------------------------ #

	Rotan) 
	SIZE=M
	BEAST=Y
	if [ "$Dual-Class" = "Y" ] || [ "$Multi-Class" = "Y" ];	then RotanARRAY=( Fighter Ranger Cleric Druid Thief Bard Mage Arcanist ); fi
	if [ "$ARCHETYPE" = "" ];				then RotanARRAY=( Fighter Ranger Cleric "SpecP" Druid Thief Bard Mage "SpecM" Arcanist ); fi
	if [ "$ARCHETYPE" = "Warrior" ];			then RotanARRAY=( Fighter Ranger ); fi
	if [ "$ARCHETYPE" = "Priest" ]; 			then RotanARRAY=( Cleric "SpecP" Druid ); fi
	if [ "$ARCHETYPE" = "Rogue" ];				then RotanARRAY=( Thief Bard ); fi
	if [ "$ARCHETYPE" = "Wizard" ];				then RotanARRAY=( Mage "SpecM" Arcanist ); fi

	CONthrow=$[ $CONthrow +1 ] && DEXthrow=$[ $DEXthrow +1 ] && WISthrow=$[ $WISthrow -2 ]

CLASS=$CLASS_OVERRIDE
if  [ "$CLASS_OVERRIDE" = "" ]; then
for index in `shuf --input-range=0-$(( ${#RotanARRAY[*]} - 1 )) | head -1`
do    CLASS=${RotanARRAY[$index]}; done;fi

	RotanEyeARRAY=( Blue Black Brown Hazel Green Gray )
	FurLengthARRAY=( Short Long "Double Coated" )
	RotanHairARRAY=( "Soft Black" "Blue-Black" "Jet-Black" "Natural Black" "Deep Brunette" "Medium Brown" "Natural Brown" "Dark Gray" "Light Gray" "White" )
	RotanFurARRAY=( "Blue-Black" "Jet-Black" "Deep Brown" "Dark Gray" "Black" "Dusty Black" )

for index in `shuf --input-range=0-$(( ${#RotanFurARRAY[*]} - 1 )) | head -1`
do    CoatColor=${RotanFurARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#RotanHairARRAY[*]} - 1 )) | head -1`
do    HairColor=${RotanHairARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#RotanEyeARRAY[*]} - 1 )) | head -1`
do    EyeColor=${RotanEyeARRAY[$index]}; done


	let "Age = $RANDOM % 4 + 13"
	let "MaxAge = $RANDOM % 30 + 58"
	if [ "$LEVEL" != "1" ] && [ "$AdvancedAge" = "Y" ]; then
	let "Age = $RANDOM % 15 + 14"; fi

		let OpenLocks+=1
		let FindRemoveTraps+2
		let MoveSilently+=1
		let HideinShadows+=1
		let DetectNoise+=2
		let ClimbWalls-=3


if [ "$SEX" = "Male" ]; then
	let "HeightInches = $RANDOM % 12 + 39" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=45
	let "BaseWt = $RANDOM % 60 + 69"
	First=$(cat ./names/Rotan\ Male\ Names.txt | sort -R |head -1)
	FFirst=$(cat ./names/Rotan\ Male\ Names.txt | sort -R |head -1) ;fi
if [ "$SEX" = "Female" ]; then
	let "HeightInches = $RANDOM % 12 + 34" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=40
	let "BaseWt = $RANDOM % 60 + 70"
	First=$(cat ./names/Rotan\ Female\ Names.txt | sort -R |head -1)
	FFirst=$(cat ./names/Rotan\ Female\ Names.txt | sort -R |head -1); fi
	;;





# --------------------- NIBBIN SECTION ------------------------ #

	Nibbin)
	SIZE=M
	BEAST=Y
	if [ "$Dual-Class" = "Y" ] || [ "$Multi-Class" = "Y" ];	then NibbinARRAY=( Fighter Ranger Cleric Druid Thief Bard Mage Arcanist ); fi
	if [ "$ARCHETYPE" = "" ];				then NibbinARRAY=( Fighter Ranger Cleric "SpecP" Druid Shaman Thief Bard Mage "SpecM" Sorcerer Arcanist ); fi
	if [ "$ARCHETYPE" = "Warrior" ];			then NibbinARRAY=( Fighter Ranger ); fi
	if [ "$ARCHETYPE" = "Priest" ]; 			then NibbinARRAY=( Cleric "SpecP" Druid Shaman ); fi
	if [ "$ARCHETYPE" = "Rogue" ];				then NibbinARRAY=( Thief Bard ); fi
	if [ "$ARCHETYPE" = "Wizard" ];				then NibbinARRAY=( Mage "SpecM" Sorcerer Arcanist ); fi

	STRthrow=$[ $STRthrow -1 ] && DEXthrow=$[ $DEXthrow +1 ] && WISthrow=$[ $WISthrow -1 ] && PERthrow=$[ $PERthrow +1 ] 

CLASS=$CLASS_OVERRIDE
if  [ "$CLASS_OVERRIDE" = "" ]; then
for index in `shuf --input-range=0-$(( ${#NibbinARRAY[*]} - 1 )) | head -1`
do    CLASS=${NibbinARRAY[$index]}; done;fi

	NibbinEyeARRAY=( Black Brown Black Brown Black Brown Black Brown Black Brown Black Brown Black Brown Black Brown Red )
	FurLengthARRAY=( Short Long "Double Coated" )
	NibbinHairARRAY=( "Soft Black" "Blue-Black" "Jet-Black" "Natural Black" "Deep Brunette" "Medium Brown" "Natural Brown" "Dark Gray" "Light Gray" "White" )
	NibbinFurARRAY=( "Light Gray" "Medium Gray" "Deep Brown" "Dark Gray" "Dusty Gray" "Dusty Black" )

for index in `shuf --input-range=0-$(( ${#NibbinFurARRAY[*]} - 1 )) | head -1`
do    CoatColor=${NibbinFurARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#NibbinHairARRAY[*]} - 1 )) | head -1`
do    HairColor=${NibbinHairARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#NibbinEyeARRAY[*]} - 1 )) | head -1`
do    EyeColor=${NibbinEyeARRAY[$index]}; done


	let "Age = $RANDOM % 4 + 13"
	let "MaxAge = $RANDOM % 30 + 58"
	if [ "$LEVEL" != "1" ] && [ "$AdvancedAge" = "Y" ]; then
	let "Age = $RANDOM % 15 + 14"; fi

		let OpenLocks-=1
		let FindRemoveTraps-=2
		let MoveSilently+=3
		let HideinShadows+=3
		let DetectNoise+=2
		let ClimbWalls+=3


if [ "$SEX" = "Male" ]; then
	let "HeightInches = $RANDOM % 7 + 39" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=40
	let "BaseWt = $RANDOM % 30 + 29"
	First=$(cat ./names/Nibbin\ Male\ Names.txt | sort -R |head -1)
	Sur=$(cat ./names/Nibbin\ Surnames.txt | sort -R |head -1)
	FFirst=$(cat ./names/Nibbin\ Male\ Names.txt | sort -R |head -1)
	FSur=$(cat ./names/Nibbin\ Surnames.txt | sort -R |head -1);fi
if [ "$SEX" = "Female" ]; then
	let "HeightInches = $RANDOM % 5 + 34" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=35
	let "BaseWt = $RANDOM % 30 + 22"
	First=$(cat ./names/Nibbin\ Female\ Names.txt | sort -R |head -1)
	Sur=$(cat ./names/Nibbin\ Surnames.txt | sort -R |head -1)
	FFirst=$(cat ./names/Nibbin\ Female\ Names.txt | sort -R |head -1)
	FSur=$(cat ./names/Nibbin\ Surnames.txt | sort -R |head -1); fi
	;;



# ---------------------- SKALL SECTION ------------------------ #

	Skall)
	SIZE=M
	BEAST=Y
	if [ "$Dual-Class" = "Y" ] || [ "$Multi-Class" = "Y" ];	then SkallARRAY=( Fighter Ranger Cleric Druid Thief Bard Mage Arcanist ); fi
	if [ "$ARCHETYPE" = "" ];				then SkallARRAY=( Fighter Ranger Cleric "SpecP" Druid Shaman Thief Bard Mage "SpecM" Arcanist ); fi
	if [ "$ARCHETYPE" = "Warrior" ];			then SkallARRAY=( Fighter Ranger ); fi
	if [ "$ARCHETYPE" = "Priest" ]; 			then SkallARRAY=( Cleric "SpecP" Druid Shaman ); fi
	if [ "$ARCHETYPE" = "Rogue" ];				then SkallARRAY=( Thief Bard ); fi
	if [ "$ARCHETYPE" = "Wizard" ];				then SkallARRAY=( Mage "SpecM" Arcanist ); fi

	CONthrow=$[ $CONthrow +1 ] && DEXthrow=$[ $DEXthrow +1 ] && WISthrow=$[ $WISthrow -2 ]

CLASS=$CLASS_OVERRIDE
if  [ "$CLASS_OVERRIDE" = "" ]; then
for index in `shuf --input-range=0-$(( ${#SkallARRAY[*]} - 1 )) | head -1`
do    CLASS=${SkallARRAY[$index]}; done;fi

	SkallEyeARRAY=( Blue Black Brown Hazel Green Gray )
	FurLengthARRAY=( Short Long "Double Coated" )
	SkallHairARRAY=( "Soft Black" "Blue-Black" "Jet-Black" "Natural Black" "Deep Brunette" "Medium Brown" "Natural Brown" "Dark Gray" "Light Gray" "White" )
	SkallFurARRAY=( "Blue-Black" "Jet-Black" "Deep Brown" "Dark Gray" "Black" "Dusty Black" )

for index in `shuf --input-range=0-$(( ${#SkallFurARRAY[*]} - 1 )) | head -1`
do    CoatColor=${SkallFurARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#SkallHairARRAY[*]} - 1 )) | head -1`
do    HairColor=${SkallHairARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#SkallEyeARRAY[*]} - 1 )) | head -1`
do    EyeColor=${SkallEyeARRAY[$index]}; done


	let "Age = $RANDOM % 4 + 13"
	let "MaxAge = $RANDOM % 30 + 58"
	if [ "$LEVEL" != "1" ] && [ "$AdvancedAge" = "Y" ]; then
	let "Age = $RANDOM % 15 + 14"; fi

		let OpenLocks+=1
		let FindRemoveTraps+2
		let MoveSilently+=1
		let HideinShadows+=1
		let DetectNoise+=2
		let ClimbWalls-=3


if [ "$SEX" = "Male" ]; then
	let "HeightInches = $RANDOM % 12 + 39" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=45
	let "BaseWt = $RANDOM % 60 + 69"
	First=$(cat ./names/Skall\ Male\ Names.txt | sort -R |head -1)
	FFirst=$(cat ./names/Skall\ Male\ Names.txt | sort -R |head -1) ;fi
if [ "$SEX" = "Female" ]; then
	let "HeightInches = $RANDOM % 12 + 34" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=40
	let "BaseWt = $RANDOM % 60 + 70"
	First=$(cat ./names/Skall\ Female\ Names.txt | sort -R |head -1)
	FFirst=$(cat ./names/Skall\ Female\ Names.txt | sort -R |head -1); fi
	;;


# ------------------ PROTEAN (RELIC) SECTION -------------------- #

	Relic)
	SIZE=M
	HUMANOID=Y
	PROTEAN=Y
	let "XPBonus-=50"
	if [ "$Dual-Class" = "Y" ] || [ "$Multi-Class" = "Y" ];	then ProteanARRAY=( Fighter Ranger Cleric Monk Thief Bard Mage Arcanist ); fi
	if [ "$ARCHETYPE" = "" ];				then ProteanARRAY=( Fighter Ranger Cleric Monk Thief Bard Mage "SpecM" Arcanist ); fi
	if [ "$ARCHETYPE" = "Warrior" ];			then ProteanARRAY=( Fighter Ranger ); fi
	if [ "$ARCHETYPE" = "Priest" ]; 			then ProteanARRAY=( Cleric Monk ); fi
	if [ "$ARCHETYPE" = "Rogue" ];				then ProteanARRAY=( Thief Bard ); fi
	if [ "$ARCHETYPE" = "Wizard" ];				then ProteanARRAY=( Mage "SpecM" Arcanist ); fi

	STRthrow=$[ $STRthrow -2 ] && DEXthrow=$[ $DEXthrow -2 ] && CONthrow=$[ $CONthrow -2 ] && INTthrow=$[ $INTthrow -2 ] && WISthrow=$[ $WISthrow +4 ]

CLASS=$CLASS_OVERRIDE
if  [ "$CLASS_OVERRIDE" = "" ]; then
for index in `shuf --input-range=0-$(( ${#ProteanARRAY[*]} - 1 )) | head -1`
do    CLASS=${ProteanARRAY[$index]}; done;fi

	ProteanEyeARRAY=( Blue )
	ProteanHairARRAY=( "None" )
	ProteanSkinARRAY=( "Blue-Black" "Gold" "Silver" "Dull White" )

for index in `shuf --input-range=0-$(( ${#ProteanSkinARRAY[*]} - 1 )) | head -1`
do    SkinColor=${ProteanSkinARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#ProteanHairARRAY[*]} - 1 )) | head -1`
do    HairColor=${ProteanHairARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#ProteanEyeARRAY[*]} - 1 )) | head -1`
do    EyeColor=${ProteanEyeARRAY[$index]}; done


	let "Age = $RANDOM % 20 + 2200"
	MaxAge="Unknown"

		First=$(cat /dev/urandom | tr -cd A-Z | fold -w2 | head -n 1)
		Pat=$(cat /dev/urandom | tr -cd 0001-9999 | fold -w4 | head -n 1)
		Sur=$(cat ./names/Protean\ Surnames.txt | sort -R |head -1)

	SEX="Non-Gendered (⚲)"	# Sets Relic sex to blank
	let "HeightInches = 73" 
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=73
	let "BaseWt = 160"
	;;

# ---------------------- QHAVA SECTION ------------------------ #

	Qhava) #STUB
	SIZE=M
	BEAST=Y
	if [ "$Dual-Class" = "Y" ] || [ "$Multi-Class" = "Y" ];	then HumanARRAY=( Fighter Ranger Cleric Druid Monk Thief Bard Mage Mentalist Sorcerer Arcanist ); fi
	if [ "$ARCHETYPE" = "" ];		then SkallARRAY=( Fighter Ranger Cleric "SpecP" Druid Thief Bard Mage "SpecM" Arcanist ); fi
	if [ "$ARCHETYPE" = "Warrior" ];	then SkallARRAY=( Fighter Ranger ); fi
	if [ "$ARCHETYPE" = "Priest" ]; 	then SkallARRAY=( Cleric "SpecP" Druid ); fi
	if [ "$ARCHETYPE" = "Rogue" ];		then SkallARRAY=( Thief Bard ); fi
	if [ "$ARCHETYPE" = "Wizard" ];		then SkallARRAY=( Mage "SpecM" Arcanist ); fi

	CONthrow=$[ $CONthrow +1 ] && DEXthrow=$[ $DEXthrow +1 ] && WISthrow=$[ $WISthrow -2 ]

CLASS=$CLASS_OVERRIDE
if  [ "$CLASS_OVERRIDE" = "" ]; then
for index in `shuf --input-range=0-$(( ${#SkallARRAY[*]} - 1 )) | head -1`
do    CLASS=${SkallARRAY[$index]}; done;fi

	SkallEyeARRAY=( Blue Black Brown Hazel Green Gray )
	FurLengthARRAY=( Short Long "Double Coated" )
	SkallHairARRAY=( "Soft Black" "Blue-Black" "Jet-Black" "Natural Black" "Deep Brunette" "Medium Brown" "Natural Brown" "Dark Gray" "Light Gray" "White" )
	SkallFurARRAY=( "Blue-Black" "Jet-Black" "Deep Brown" "Dark Gray" "Black" "Dusty Black" )

for index in `shuf --input-range=0-$(( ${#SkallFurARRAY[*]} - 1 )) | head -1`
do    CoatColor=${SkallFurARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#SkallHairARRAY[*]} - 1 )) | head -1`
do    HairColor=${SkallHairARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#SkallEyeARRAY[*]} - 1 )) | head -1`
do    EyeColor=${SkallEyeARRAY[$index]}; done


	let "Age = $RANDOM % 4 + 13"
	let "MaxAge = $RANDOM % 30 + 58"
	if [ "$LEVEL" != "1" ] && [ "$AdvancedAge" = "Y" ]; then
	let "Age = $RANDOM % 15 + 14"; fi

		let OpenLocks+=1
		let FindRemoveTraps+2
		let MoveSilently+=1
		let HideinShadows+=1
		let DetectNoise+=2
		let ClimbWalls-=3


if [ "$SEX" = "Male" ]; then
	let "HeightInches = $RANDOM % 12 + 39" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=45
	let "BaseWt = $RANDOM % 60 + 69"
	First=$(cat ./names/Skall\ Male\ Names.txt | sort -R |head -1) ;fi
if [ "$SEX" = "Female" ]; then
	let "HeightInches = $RANDOM % 12 + 34" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=40
	let "BaseWt = $RANDOM % 60 + 70"
	First=$(cat ./names/Skall\ Female\ Names.txt | sort -R |head -1); fi
	;;

# ---------------------- KOZA SECTION ------------------------- #

	Koza) #STUB
	SIZE=M
	BEAST=Y
	if [ "$Dual-Class" = "Y" ] || [ "$Multi-Class" = "Y" ];	then HumanARRAY=( Fighter Ranger Cleric Druid Monk Thief Bard Mage Sorcerer Arcanist ); fi
	if [ "$ARCHETYPE" = "" ];		then SkallARRAY=( Fighter Ranger Cleric "SpecP" Druid Thief Bard Mage "SpecM" Arcanist ); fi
	if [ "$ARCHETYPE" = "Warrior" ];	then SkallARRAY=( Fighter Ranger ); fi
	if [ "$ARCHETYPE" = "Priest" ]; 	then SkallARRAY=( Cleric "SpecP" Druid ); fi
	if [ "$ARCHETYPE" = "Rogue" ];		then SkallARRAY=( Thief Bard ); fi
	if [ "$ARCHETYPE" = "Wizard" ];		then SkallARRAY=( Mage "SpecM" Arcanist ); fi

	CONthrow=$[ $CONthrow +1 ] && DEXthrow=$[ $DEXthrow +1 ] && WISthrow=$[ $WISthrow -2 ]

CLASS=$CLASS_OVERRIDE
if  [ "$CLASS_OVERRIDE" = "" ]; then
for index in `shuf --input-range=0-$(( ${#SkallARRAY[*]} - 1 )) | head -1`
do    CLASS=${SkallARRAY[$index]}; done;fi

	SkallEyeARRAY=( Blue Black Brown Hazel Green Gray )
	FurLengthARRAY=( Short Long "Double Coated" )
	SkallHairARRAY=( "Soft Black" "Blue-Black" "Jet-Black" "Natural Black" "Deep Brunette" "Medium Brown" "Natural Brown" "Dark Gray" "Light Gray" "White" )
	SkallFurARRAY=( "Blue-Black" "Jet-Black" "Deep Brown" "Dark Gray" "Black" "Dusty Black" )

for index in `shuf --input-range=0-$(( ${#SkallFurARRAY[*]} - 1 )) | head -1`
do    CoatColor=${SkallFurARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#SkallHairARRAY[*]} - 1 )) | head -1`
do    HairColor=${SkallHairARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#SkallEyeARRAY[*]} - 1 )) | head -1`
do    EyeColor=${SkallEyeARRAY[$index]}; done


	let "Age = $RANDOM % 4 + 13"
	let "MaxAge = $RANDOM % 30 + 58"
	if [ "$LEVEL" != "1" ] && [ "$AdvancedAge" = "Y" ]; then
	let "Age = $RANDOM % 15 + 14"; fi

		let OpenLocks+=1
		let FindRemoveTraps+2
		let MoveSilently+=1
		let HideinShadows+=1
		let DetectNoise+=2
		let ClimbWalls-=3


if [ "$SEX" = "Male" ]; then
	let "HeightInches = $RANDOM % 12 + 39" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=45
	let "BaseWt = $RANDOM % 60 + 69"
	First=$(cat ./names/Skall\ Male\ Names.txt | sort -R |head -1) ;fi
if [ "$SEX" = "Female" ]; then
	let "HeightInches = $RANDOM % 12 + 34" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=40
	let "BaseWt = $RANDOM % 60 + 70"
	First=$(cat ./names/Skall\ Female\ Names.txt | sort -R |head -1); fi
	;;

# ------------------------ VU SECTION ------------------------- #

	Vu) #STUB
	SIZE=M
	BEAST=Y
	if [ "$Dual-Class" = "Y" ] || [ "$Multi-Class" = "Y" ];	then HumanARRAY=( Fighter Ranger Cleric Druid Monk Thief Bard Mage Sorcerer Arcanist ); fi
	if [ "$ARCHETYPE" = "" ];		then SkallARRAY=( Fighter Ranger Cleric "SpecP" Druid Thief Bard Mage "SpecM" Arcanist ); fi
	if [ "$ARCHETYPE" = "Warrior" ];	then SkallARRAY=( Fighter Ranger ); fi
	if [ "$ARCHETYPE" = "Priest" ]; 	then SkallARRAY=( Cleric "SpecP" Druid ); fi
	if [ "$ARCHETYPE" = "Rogue" ];		then SkallARRAY=( Thief Bard ); fi
	if [ "$ARCHETYPE" = "Wizard" ];		then SkallARRAY=( Mage "SpecM" Arcanist ); fi

	CONthrow=$[ $CONthrow +1 ] && DEXthrow=$[ $DEXthrow +1 ] && WISthrow=$[ $WISthrow -2 ]

CLASS=$CLASS_OVERRIDE
if  [ "$CLASS_OVERRIDE" = "" ]; then
for index in `shuf --input-range=0-$(( ${#SkallARRAY[*]} - 1 )) | head -1`
do    CLASS=${SkallARRAY[$index]}; done;fi

	SkallEyeARRAY=( Blue Black Brown Hazel Green Gray )
	FurLengthARRAY=( Short Long "Double Coated" )
	SkallHairARRAY=( "Soft Black" "Blue-Black" "Jet-Black" "Natural Black" "Deep Brunette" "Medium Brown" "Natural Brown" "Dark Gray" "Light Gray" "White" )
	SkallFurARRAY=( "Blue-Black" "Jet-Black" "Deep Brown" "Dark Gray" "Black" "Dusty Black" )

for index in `shuf --input-range=0-$(( ${#SkallFurARRAY[*]} - 1 )) | head -1`
do    CoatColor=${SkallFurARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#SkallHairARRAY[*]} - 1 )) | head -1`
do    HairColor=${SkallHairARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#SkallEyeARRAY[*]} - 1 )) | head -1`
do    EyeColor=${SkallEyeARRAY[$index]}; done


	let "Age = $RANDOM % 4 + 13"
	let "MaxAge = $RANDOM % 30 + 58"
	if [ "$LEVEL" != "1" ] && [ "$AdvancedAge" = "Y" ]; then
	let "Age = $RANDOM % 15 + 14"; fi

		let OpenLocks+=1
		let FindRemoveTraps+2
		let MoveSilently+=1
		let HideinShadows+=1
		let DetectNoise+=2
		let ClimbWalls-=3


if [ "$SEX" = "Male" ]; then
	let "HeightInches = $RANDOM % 12 + 39" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=45
	let "BaseWt = $RANDOM % 60 + 69"
	First=$(cat ./names/Skall\ Male\ Names.txt | sort -R |head -1) ;fi
if [ "$SEX" = "Female" ]; then
	let "HeightInches = $RANDOM % 12 + 34" # (Spread + Base Height + 1)
	let "Feet = $HeightInches / 12"; let "Inches = $HeightInches % 12"
	BaseHeight=40
	let "BaseWt = $RANDOM % 60 + 70"
	First=$(cat ./names/Skall\ Female\ Names.txt | sort -R |head -1); fi
	;;
esac; }

races
# -------------- SPECIALTY CLASS SECTION --------------------- #

# Random Character Religion - No Druid
ReligionARRAY=( "Dawn" "Amar" "Nanawen" "Vellis" "Larian" "Fifred" "Damsinorlay" "Patrakius" "Isone" "Gerna" "Tyche" "Parador" "Mordain" "Oleander" "Llyr" "Non-Denominational" )
if [ "$CLASS" != "SpecP" ] && [ "$CLASS" != "Druid" ] ; then for index in `shuf --input-range=0-$(( ${#ReligionARRAY[*]} - 1 )) | head -1`
do    Religion=${ReligionARRAY[$index]};done;fi

# This first block selects character religion too. For free!

SPEC=()
PriestSpecialties=( "Dawn" "Amar" "Nanawen" "Vellis" "Larian" "Fifred" "Damsinorlay" "Patrakius" "Isone" "Gerna" "Tyche" "Parador" "Mordain" "Oleander" "Llyr" )
if [ "$CLASS" = "SpecP" ]; then for index in `shuf --input-range=0-$(( ${#PriestSpecialties[*]} - 1 )) | head -1`
do    Religion=${PriestSpecialties[$index]}
CLASS="Specialty Priest"
SPEC="of $Religion"
done; else SPEC=""; fi

#================SPEC OVERRIDE======================#
if [ "$SPEC_OVERRIDE" != "" ]; then
 CLASS="Specialty Priest"
 Religion=$SPEC_OVERRIDE
 SPEC="of $SPEC_OVERRIDE"; fi
#===================================================#


if [ "$CLASS" = "Druid" ] || [ "$CLASS" = "Cleric" ] || [ "$CLASS" = "Shaman" ]; then 
Religion="Non-Denominational";fi

if [ "$RACE" = "Alvani" ]; then Religion="None";fi

if [ "$CLASS" = "SpecM" ]; then
MageSpecialties=( "Abjurer" "Conjurer" "Diviner" "Enchanter" "Illusionist" "Invoker" "Necromancer" "Transmuter" )
for index in `shuf --input-range=0-$(( ${#MageSpecialties[*]} - 1 )) | head -1`
do    CLASS=${MageSpecialties[$index]}
if ( [[ $RACE = "Minotaur" ]] && [[ $CLASS = "Illusionist" ]] ); then						# Minotaurs cannot be Illusionists - it's tantamount to lying. 
MinotaurMageSpecialties=( "Abjurer" "Conjurer" "Diviner" "Enchanter" "Invoker" "Necromancer" "Transmuter" )	# If Mino-Illusionist is generated, it rerolls the specialty.
for index in `shuf --input-range=0-$(( ${#MinotaurMageSpecialties[*]} - 1 )) | head -1`
do    CLASS=${MinotaurMageSpecialties[$index]}; done; fi
done; fi

if [ "$CLASS" = "Specialty Priest" ]; then
case "$SPEC" in
    of\ Nanawen)	#This is a nice little "gotcha". SpecP listings are of the form "of <name>".
    case "$LEVEL" in 
	1)	TI=(10 13 16 19 20 -- -- -- -- -- -- -- --)												;;
	2) 	TI=(" 7" 10 13 16 19 20 -- -- -- -- -- -- --)												;;
	3)	TI=(" 4" " 7" 10 13 16 19 20 -- -- -- -- -- --)												;;
	4)	TI=("Turned" " 4" " 7" 10 13 16 19 20 -- -- -- -- --)											;;
	5)	TI=("Turned"  "Turned" " 4" " 7" 10 13 16 19 20 -- -- -- --)										;;
	6)	TI=("Enthralled"  "Turned"  "Turned" " 4" " 7" 10 13 16 19 20 -- -- --)									;;
	7)	TI=("Enthralled"  "Enthralled"  "Turned"  "Turned" " 4" " 7" 10 13 16 19 20 -- --)							;;
	8)	TI=("Enthralled*" "Enthralled"  "Enthralled"  "Turned"  "Turned" " 4" " 7" 10 13 16 19 20 --)						;;
	9)	TI=("Enthralled*" "Enthralled*" "Enthralled"  "Enthralled"  "Turned"  "Turned"  " 4" " 7" 10 13 16 19 20)				;;
	10|11)	TI=("Enthralled*" "Enthralled*" "Enthralled*" "Enthralled"  "Enthralled"  "Turned"  "Turned"  " 4" " 7" 10 13 16 19)			;;
	12|13)	TI=("Enthralled*" "Enthralled*" "Enthralled*" "Enthralled*" "Enthralled"  "Enthralled" "Turned" "Turned" " 4" " 7" 10 13 16)		;;
	*)	TI=("Enthralled*" "Enthralled*" "Enthralled*" "Enthralled*" "Enthralled*" "Enthralled" "Enthralled" "Turned" "Turned" " 4" " 7" 10 13)	;;
    esac																		;;
    *)			# Any other priesthood
    case "$LEVEL" in 
	1)	TI=(10 13 16 19 20 -- -- -- -- -- -- -- --)												;;
	2) 	TI=(" 7" 10 13 16 19 20 -- -- -- -- -- -- --)												;;
	3)	TI=(" 4" " 7" 10 13 16 19 20 -- -- -- -- -- --)												;;
	4)	TI=("Turned" " 4" " 7" 10 13 16 19 20 -- -- -- -- --)											;;
	5)	TI=("Turned"  "Turned" " 4" " 7" 10 13 16 19 20 -- -- -- --)										;;
	6)	TI=("Destroyed"  "Turned"  "Turned" " 4" " 7" 10 13 16 19 20 -- -- --)									;;
	7)	TI=("Destroyed"  "Destroyed"  "Turned"  "Turned" " 4" " 7" 10 13 16 19 20 -- --)							;;
	8)	TI=("Destroyed*" "Destroyed"  "Destroyed"  "Turned"  "Turned" " 4" " 7" 10 13 16 19 20 --)						;;
	9)	TI=("Destroyed*" "Destroyed*" "Destroyed"  "Destroyed"  "Turned"  "Turned" " 4" " 7" 10 13 16 19 20)					;;
	10|11)	TI=("Destroyed*" "Destroyed*" "Destroyed*" "Destroyed"  "Destroyed"  "Turned"  "Turned" " 4" " 7" 10 13 16 19)				;;
	12|13)	TI=("Destroyed*" "Destroyed*" "Destroyed*" "Destroyed*" "Destroyed"  "Destroyed"  "Turned"  "Turned" " 4" " 7" 10 13 16)		;;
	*)	TI=("Destroyed*" "Destroyed*" "Destroyed*" "Destroyed*" "Destroyed*" "Destroyed"  "Destroyed"  "Turned"  "Turned" " 4" " 7" 10 13)	;;
    esac																		;;
esac																			

Skeleton="${TI[0]}" Zombie="${TI[1]}" Ghoul="${TI[2]}" Shadow="${TI[3]}" Wight="${TI[4]}" Ghast="${TI[5]}" Wraith="${TI[6]}" 
Mummy="${TI[7]}" Spectre="${TI[8]}" Vampire="${TI[9]}" Ghost="${TI[10]}" Lich="${TI[11]}" Special="${TI[12]}" ;fi

if [ "$RACE" = "Kenderkin" ];then CLASS=Handler;fi

#Albino Overrides
if [ "$Albino" = "Y" ]; then
BellyColor=White	;CoatColor=White
SkinColor=Fair		;HairColor=White
EyeColor=Pink		;ScaleColor=White;fi

#Melanism Overrides
if [ "$Melanid" = "Y" ] && [ "$BEAST" = "Y" ]; then
BellyColor=Black	;CoatColor=Black
HairColor=Black		;EyeColor=Black
ScaleColor=Black;fi

#--------------------------------------------------------------#
#================  END RACE & CLASS SECTION  ==================#
#==============================================================#

#==============================================================
# Define Archetypes
#==============================================================

case "$CLASS" in
	Fighter|Ranger|Paladin)												ATYPE=Warrior ;;
	Cleric|"Specialty Priest"|Monk|Druid|Shaman)									ATYPE=Priest  ;;
	Thief|Bard|Handler)												ATYPE=Rogue   ;;
	Mage|Abjurer|Conjurer|Diviner|Enchanter|Illusionist|Invoker|Necromancer|Transmuter|Sorcerer|Mentalist|Arcanist)	ATYPE=Wizard  ;;
#	*)							 ATYPE=Wizard  ;; # I bet this works just as well as the above line
esac

#==============================================================#
# Class and Race adjustments to alignment - aka "THE PILE"     #
#==============================================================#
# COMMENT: This is a nasty little thing with a lot of if/then  #
# statements. It works, but I wish I could think of a better   #
# way to do it than this "Random catch a buncha shit" method.  #
#==============================================================#


if [ "$CLASS" = "Paladin" ];then 
		Ethics=Lawful
		Morality=Good;fi

if [ "$CLASS" = "Ranger" ]; then 
		Morality=Good
		RangerSkillPoints=$(( $LEVEL )) 
		while [ $RangerSkillPoints -gt 0 ]; do
		let MoveSilently+=1; let HideinShadows+=1; let RangerSkillPoints-=1
		if [ "$MoveSilently" -gt "19" ]; then MoveSilently=19; fi
		if [ "$HideinShadows" -gt "19" ]; then HideinShadows=19; fi; done;fi

if [ "$CLASS" = "Thief" ] || [ "$CLASS" = "Handler" ]; then 
BackStabMult=$(((( $LEVEL +3)/4)+1))
ThiefSkillPoints=$((( $LEVEL * 6) +6 )) 
		while [ $ThiefSkillPoints -gt 0 ]; do
		ThiefSkills=( "PP" "OL" "FRT" "MS" "HS" "DN" "CW" "RL" )
		for index in `shuf --input-range=0-$(( ${#ThiefSkills[*]} - 1 )) | head -1` ;do    		
 		Selection=${ThiefSkills[$index]}
		if [ "$Selection" = "PP" ]; then let PickPockets+=1; fi
		if [ "$Selection" = "OL" ]; then let OpenLocks+=1; fi
		if [ "$Selection" = "FRT" ]; then let FindRemoveTraps+=1; fi
		if [ "$Selection" = "MS" ]; then let MoveSilently+=1; fi
		if [ "$Selection" = "HS" ]; then let HideinShadows+=1; fi
		if [ "$Selection" = "DN" ]; then let DetectNoise+=1; fi
		if [ "$Selection" = "CW" ]; then let ClimbWalls+=1; fi
		if [ "$Selection" = "RL" ]; then let ReadLanguages+=1; fi
		let ThiefSkillPoints-=1; done; done; fi

if [ "$CLASS" = "Bard" ] ; then 
BackStabMult=$(((( $LEVEL +3)/4)+1))
		if [ "$BackStabMult" -gt "3" ]; then let BackStabMult=3; fi
BardSkillPoints=0
BardSkillPoints=$((( $LEVEL * 3) +1 )) 
		while [ $BardSkillPoints -gt 0 ]; do
		BardSkills=( "PP" "DN" "CW" "RL" )
		for index in `shuf --input-range=0-$(( ${#BardSkills[*]} - 1 )) | head -1` ;do    		
 		Selection=${BardSkills[$index]}
		if [ "$Selection" = "PP" ];then let PickPockets+=1; fi
		if [ "$Selection" = "DN" ]; then let DetectNoise+=1; fi
		if [ "$Selection" = "CW" ]; then let ClimbWalls+=1; fi
		if [ "$Selection" = "RL" ]; then let ReadLanguages+=1; fi
		let BardSkillPoints-=1; done; done; fi

if [ "$CLASS" = "Druid" ] || [ "$CLASS" = "Shaman" ]; then Morality=Neutral;fi

if [ "$CLASS" = "Cleric" ]; then Morality=Good;fi

if [ "$CLASS" = "Monk" ]; then Ethics=Lawful;fi

if [ "$CLASS" = "Sorcerer" ] && [ "$Ethics" = "Lawful" ]; then NonLawfulEthicsARRAY=( Neutral Chaotic )
		for index in `shuf --input-range=0-$(( ${#NonLawfulEthicsARRAY[*]} - 1 )) | head -1`
		do    Ethics=${NonLawfulEthicsARRAY[$index]};done;fi

if [ "$RACE" = "Alvani" ]; then MoreLawfulEthicsARRAY=( Lawful Lawful Lawful Lawful Neutral Chaotic )
		for index in `shuf --input-range=0-$(( ${#MoreLawfulEthicsARRAY[*]} - 1 )) | head -1`
		do     Ethics=${MoreLawfulEthicsARRAY[$index]};done;fi

if [ "$RACE" = "Minotaur" ]; then MoreLawfulEthicsARRAY=( Lawful Lawful Lawful Lawful Neutral )
		for index in `shuf --input-range=0-$(( ${#MoreLawfulEthicsARRAY[*]} - 1 )) | head -1`
		do     Ethics=${MoreLawfulEthicsARRAY[$index]};done;fi

if [ "$RACE" = "Kenderkin" ] && [ "$Ethics" = "Lawful" ]; then NonLawfulEthicsARRAY=( Neutral Chaotic Chaotic Chaotic Chaotic Chaotic )
		for index in `shuf --input-range=0-$(( ${#NonLawfulEthicsARRAY[*]} - 1 )) | head -1`
		do    Ethics=${NonLawfulEthicsARRAY[$index]};done;fi

if [ "$SPEC" = "of Dawn" ]; then NonChaoticEthicsARRAY=( Lawful Neutral )
		for index in `shuf --input-range=0-$(( ${#NonChaoticEthicsARRAY[*]} - 1 )) | head -1`
		do    Ethics=${NonChaoticEthicsARRAY[$index]};done; Morality=Good;fi

if [ "$SPEC" = "of Amar" ] && [ "$Morality" = "Neutral" ]; then Ethics=Neutral;fi

if [ "$SPEC" = "of Nanawen" ]; then Morality=Good
if [ "$SPEC" = "Lawful" ]; then NonLawfulEthicsARRAY=( Neutral Chaotic Chaotic Chaotic Chaotic Chaotic )
		for index in `shuf --input-range=0-$(( ${#NonLawfulEthicsARRAY[*]} - 1 )) | head -1`
		do    Ethics=${NonLawfulEthicsARRAY[$index]};done;fi; fi

if [ "$SPEC" = "of Vellis" ] && [ "$Morality" = "Chaotic" ]; then NonChaoticEthicsARRAY=( Lawful Neutral )
		for index in `shuf --input-range=0-$(( ${#NonChaoticEthicsARRAY[*]} - 1 )) | head -1`
		do    Ethics=${NonChaoticEthicsARRAY[$index]};done;fi

if [ "$SPEC" = "of Larian" ]; then Morality=Good
		NonLawfulEthicsARRAY=( Neutral Chaotic )
		for index in `shuf --input-range=0-$(( ${#NonLawfulEthicsARRAY[*]} - 1 )) | head -1`
		do    Ethics=${NonLawfulEthicsARRAY[$index]};done;fi

if [ "$SPEC" = "of Fifred" ] || [ "$SPEC" = "of Patrakius" ] || [ "$SPEC" = "of Isone" ] || [ "$SPEC" = "of Gerna" ]	
	then if [ "$Morality" = "Neutral" ]; then 
		Ethics=Chaotic;fi
		if [ "$Morality" = "Good" ]; then 
		NonLawfulEthicsARRAY=( Neutral Chaotic )
		for index in `shuf --input-range=0-$(( ${#NonLawfulEthicsARRAY[*]} - 1 )) | head -1`
		do    Ethics=${NonLawfulEthicsARRAY[$index]};done;fi;fi

if [ "$SPEC" = "of Damsinorlay" ]; then 
		Morality=Good
		NonChaoticEthicsARRAY=( Lawful Neutral )
		if [ "$LEVEL" -ge "3" ]; then let WISthrow+=1; fi
		if [ "$LEVEL" -ge "15" ]; then let WISthrow+=2; fi
		for index in `shuf --input-range=0-$(( ${#NonChaoticEthicsARRAY[*]} - 1 )) | head -1`
		do    Ethics=${NonChaoticEthicsARRAY[$index]};done;fi

if [ "$SPEC" = "of Tyche" ]; then 
		Ethics=Lawful
		Morality=Neutral;fi

if [ "$SPEC" = "of Parador" ]; then 
		Morality=Neutral;fi

if [ "$SPEC" = "of Mordain" ] || [ "$SPEC" = "of Llyr" ];then 
		Ethics=Chaotic
		Morality=Neutral;fi

if [ "$SPEC" = "of Oleander" ]; then Morality=Neutral;fi

if [ "$CLASS" = "Thief" ] && [ "$Ethics" = "Lawful" ]; then NonLawfulEthicsARRAY=( Neutral Chaotic )
		for index in `shuf --input-range=0-$(( ${#NonLawfulEthicsARRAY[*]} - 1 )) | head -1`
		do    Ethics=${NonLawfulEthicsARRAY[$index]};done;fi

if [ "$Ethics" = "Neutral" ] && [ "$Morality" = "Neutral" ]; then Ethics=True;fi

# CLASS-SPECIFIC ADJUSTMENTS AND CALCULATIONS
# Fighter
if   [ "$CLASS" = "Fighter" ]; then
	if [ "$STRthrow" -lt "9" ]; then STRthrow=$[ 9 ];fi
	if [ "$STRthrow" -ge "16" ]; then let "XPBonus+=10"; BonusXP="Y"; fi fi
# Ranger
if   [ "$CLASS" = "Ranger" ]; then
    	if [ "$STRthrow" -lt "13" ]; then STRthrow=$[ 13 ];fi
	if [ "$DEXthrow" -lt "13" ]; then DEXthrow=$[ 13 ];fi
	if [ "$CONthrow" -lt "14" ]; then CONthrow=$[ 14 ];fi
	if [ "$WISthrow" -lt "14" ]; then WISthrow=$[ 14 ];fi
	if [ "$STRthrow" -ge "16" ] && [ "$CONthrow" -ge "16" ] && [ "$WISthrow" -ge "16" ]; then let "XPBonus+=10";  BonusXP="Y"; fi 
	SpeciesEnemyARRAY=( Goblins Gnolls Silith "Hill Giants" "Stone Giants" "Frost Giants" Alveschi "Brown Bears" "Black Bears" "Polar Bears" Gnarlocks Draugr "Winter Wolves" Orcs Hobgoblins Horg "Frost Drakes" Skeletons Zombies Vampires Wererats Ghosts Liches Dragons "Ice Wraiths" "Snow Pumas" "Ettercaps" "Golems" "Mummies" "Ogres" "Nixies" "Ghouls" "Ghasts" "Phantoms" "Enlightened Ones" "Wendigos" )
		for index in `shuf --input-range=0-$(( ${#SpeciesEnemyARRAY[*]} - 1 )) | head -1`
		do    SpEnemy=${SpeciesEnemyARRAY[$index]};done
	PrimaryTerrainARRAY=( Tundra Steppe Moor Coast Forest Hills Mountains River Lake Sea Wasteland Glacier)
		for index in `shuf --input-range=0-$(( ${#PrimaryTerrainARRAY[*]} - 1 )) | head -1`
		do    PrTerrain=${PrimaryTerrainARRAY[$index]};done; fi
# Paladin
if   [ "$CLASS" = "Paladin" ]; then
	if [ "$STRthrow" -lt "12" ]; then STRthrow=$[ 12 ];fi
	if [ "$CONthrow" -lt "9" ]; then CONthrow=$[ 9 ];fi
	if [ "$WISthrow" -lt "13" ]; then WISthrow=$[ 13 ];fi
	if [ "$CHAthrow" -lt "17" ]; then CHAthrow=$[ 17 ];fi
	if [ "$STRthrow" -ge "16" ] && [ "$CHAthrow" -ge "16" ]; then let "XPBonus+=10"; BonusXP="Y"; fi fi
# Cleric
if   [ "$CLASS" = "Cleric" ]; then
	if [ "$WISthrow" -le "9" ]; then WISthrow=$[ 9 ];fi
	if [ "$WISthrow" -ge "16" ]; then let "XPBonus+=10"; BonusXP="Y"; fi fi
# Specialty Priest
if   [ "$CLASS" = "Specialty Priest" ]; then
	if [ "$STRthrow" -le "13" ]; then STRthrow=$[ 13 ];fi
	if [ "$DEXthrow" -le "13" ]; then DEXthrow=$[ 13 ];fi
	if [ "$CONthrow" -le "14" ]; then CONthrow=$[ 14 ];fi
	if [ "$WISthrow" -le "14" ]; then WISthrow=$[ 14 ];fi
	if [ "$STRthrow" -ge "16" ] && [ "$DEXthrow" -ge "16" ] && [ "$WISthrow" -ge "16" ]; then let "XPBonus+=10"; BonusXP="Y" ; fi fi
# Monk
if   [ "$CLASS" = "Monk" ]; then 
	if [ "$STRthrow" -le "15" ]; then STRthrow=$[ 15 ];fi
	if [ "$DEXthrow" -le "15" ]; then DEXthrow=$[ 15 ];fi
	if [ "$CONthrow" -le "11" ]; then CONthrow=$[ 11 ];fi
	if [ "$WISthrow" -le "15" ]; then WISthrow=$[ 15 ];fi
	if [ "$DEXthrow" -ge "16" ] && [ "$WISthrow" -ge "16" ]; then let "XPBonus+=10"; BonusXP="Y"; fi fi
#Druid
if   [ "$CLASS" = "Druid" ]; then
	if [ "$WISthrow" -lt "12" ]; then WISthrow=$[ 12 ];fi
	if [ "$CHAthrow" -lt "15" ]; then CHAthrow=$[ 15 ];fi
	if [ "$WISthrow" -ge "16" ] && [ "$CHAthrow" -ge "16" ]; then let "XPBonus+=10"; BonusXP="Y"; fi fi
#Thief
if   [ "$CLASS" = "Thief" ]; then
	if [ "$DEXthrow" -le "9" ]; then DEXthrow=$[ 9 ];fi
	if [ "$DEXthrow" -ge "16" ]; then let "XPBonus+=10"; BonusXP="Y"; fi fi
#Bard
if   [ "$CLASS" = "Bard" ]; then
	if [ "$STRthrow" -le "13" ]; then STRthrow=$[ 13 ];fi
	if [ "$DEXthrow" -le "13" ]; then DEXthrow=$[ 13 ];fi
	if [ "$CONthrow" -le "14" ]; then CONthrow=$[ 14 ];fi
	if [ "$WISthrow" -le "14" ]; then WISthrow=$[ 14 ];fi
	if [ "$STRthrow" -ge "16" ] && [ "$DEXthrow" -ge "16" ] && [ "$WISthrow" -ge "16" ]; then let "XPBonus+=10"; BonusXP="Y"; fi fi
#Handler
if   [ "$CLASS" = "Handler" ]; then
	if [ "$STRthrow" -le "13" ]; then STRthrow=$[ 13 ];fi
	if [ "$DEXthrow" -le "13" ]; then DEXthrow=$[ 13 ];fi
	if [ "$CONthrow" -le "14" ]; then CONthrow=$[ 14 ];fi
	if [ "$WISthrow" -le "14" ]; then WISthrow=$[ 14 ];fi
	if [ "$STRthrow" -ge "16" ] && [ "$DEXthrow" -ge "16" ] && [ "$WISthrow" -ge "16" ]; then let "XPBonus+=10"; BonusXP="Y"; fi fi
#Mage
if   [ "$CLASS" = "Mage" ]; then 
	if [ "$INTthrow" -le "9" ]; then INTthrow=$[ 9 ];fi
	if [ "$INTthrow" -ge "16" ]; then let "XPBonus+=10"; BonusXP="Y"; fi fi
#Abjurer
if   [ "$CLASS" = "Abjurer" ]; then
	if [ "$WISthrow" -le "15" ]; then WISthrow=$[ 15 ];fi
	if [ "$INTthrow" -le "12" ]; then INTthrow=$[ 12 ];fi
	if [ "$INTthrow" -ge "16" ] && [ "$WISthrow" -ge "16" ]; then let "XPBonus+=10"; BonusXP="Y"; fi fi
#Conjurer
if   [ "$CLASS" = "Conjurer" ]; then
	if [ "$CONthrow" -le "15" ]; then CONthrow=$[ 15 ];fi
	if [ "$CLASS" = "Conjurer" ] && [ "$INTthrow" -le "12" ]; then INTthrow=$[ 12 ];fi
	if [ "$INTthrow" -ge "16" ] && [ "$CONthrow" -ge "16" ]; then let "XPBonus+=10"; BonusXP="Y"; fi fi
#Diviner
if   [ "$CLASS" = "Diviner" ]; then
	if [ "$WISthrow" -le "16" ]; then WISthrow=$[ 16 ];fi
	if [ "$INTthrow" -le "12" ]; then INTthrow=$[ 12 ];fi
	if [ "$INTthrow" -ge "16" ] && [ "$WISthrow" -ge "16" ]; then let "XPBonus+=10"; BonusXP="Y"; fi fi
#Enchanter
if   [ "$CLASS" = "Enchanter" ]; then
	if [ "$CHAthrow" -le "16" ]; then CHAthrow=$[ 16 ];fi
	if [ "$COMthrow" -le "15" ]; then COMthrow=$[ 15 ];fi
	if [ "$INTthrow" -le "12" ]; then INTthrow=$[ 12 ];fi
	if [ "$INTthrow" -ge "16" ] && [ "$CHAthrow" -ge "16" ] && [ "$COMthrow" -ge "16" ]; then let "XPBonus+=10"; BonusXP="Y"; fi fi
#Illusionist
if   [ "$CLASS" = "Illusionist" ]; then
	if [ "$DEXthrow" -le "16" ]; then DEXthrow=$[ 16 ];fi
	if [ "$INTthrow" -le "12" ]; then INTthrow=$[ 12 ];fi
	if [ "$INTthrow" -ge "16" ] && [ "$DEXthrow" -ge "16" ]; then let "XPBonus+=10"; BonusXP="Y"; fi fi
#Invoker
if   [ "$CLASS" = "Invoker" ]; then
	if [ "$CONthrow" -le "16" ]; then CONthrow=$[ 16 ];fi
	if [ "$INTthrow" -le "12" ]; then INTthrow=$[ 12 ];fi
	if [ "$INTthrow" -ge "16" ] && [ "$CONthrow" -ge "16" ]; then let "XPBonus+=10"; BonusXP="Y"; fi fi
#Necromancer
if   [ "$CLASS" = "Necromancer" ]; then
	if [ "$WISthrow" -le "16" ]; then WISthrow=$[ 16 ];fi
	if [ "$INTthrow" -le "12" ]; then INTthrow=$[ 12 ];fi
	if [ "$INTthrow" -ge "16" ] && [ "$WISthrow" -ge "16" ]; then let "XPBonus+=10"; BonusXP="Y"; fi fi
#Transmuter
if   [ "$CLASS" = "Transmuter" ]; then
	if [ "$DEXthrow" -le "15" ]; then DEXthrow=$[ 15 ];fi
	if [ "$INTthrow" -le "12" ]; then INTthrow=$[ 12 ];fi
	if [ "$INTthrow" -ge "16" ] && [ "$DEXthrow" -ge "16" ]; then let "XPBonus+=10"; BonusXP="Y"; fi fi
#Sorcerer
if   [ "$CLASS" = "Sorcerer" ]; then
	if [ "$INTthrow" -le "15" ]; then INTthrow=$[ 15 ];fi
	if [ "$CONthrow" -le "15" ]; then CONthrow=$[ 15 ];fi
	if [ "$INTthrow" -ge "16" ] && [ "$CONthrow" -ge "16" ]; then let "XPBonus+=10"; BonusXP="Y"; fi fi
#Mentalist
if   [ "$CLASS" = "Mentalist" ]; then
	if [ "$STRthrow" -le "13" ]; then STRthrow=$[ 13 ];fi
	if [ "$DEXthrow" -le "13" ]; then DEXthrow=$[ 13 ];fi
	if [ "$INTthrow" -le "14" ]; then INTthrow=$[ 14 ];fi
	if [ "$STRthrow" -ge "16" ] && [ "$DEXthrow" -ge "16" ] && [ "$INTthrow" -ge "16" ]; then let "XPBonus+=10"; BonusXP="Y"; fi fi


		############################
		#####   SPELL TABLES   #####
		############################

# SORCERER SPELL POINT "TABLES"

	if   [ "$LEVEL" = "1" ]; then SpellPoints=$[ 2 ];fi
	if   [ "$LEVEL" = "2" ]; then SpellPoints=$[ 3 ];fi
	if   [ "$LEVEL" = "3" ]; then SpellPoints=$[ 6 ];fi
	if   [ "$LEVEL" = "4" ]; then SpellPoints=$[ 10 ];fi
	if   [ "$LEVEL" = "5" ]; then SpellPoints=$[ 17 ];fi
	if   [ "$LEVEL" = "6" ]; then SpellPoints=$[ 20 ];fi
	if   [ "$LEVEL" = "7" ]; then SpellPoints=$[ 30 ];fi
	if   [ "$LEVEL" = "8" ]; then SpellPoints=$[ 37 ];fi
	if   [ "$LEVEL" = "9" ]; then SpellPoints=$[ 47 ];fi
	if   [ "$LEVEL" = "10" ]; then SpellPoints=$[ 54 ];fi
	if   [ "$LEVEL" = "11" ]; then SpellPoints=$[ 65 ];fi
	if   [ "$LEVEL" = "12" ]; then SpellPoints=$[ 78 ];fi
	if   [ "$LEVEL" = "13" ]; then SpellPoints=$[ 89 ];fi
	if   [ "$LEVEL" -ge "14" ]; then SpellPoints=$[ 100 ];fi

#MENTALIST "TABLES"
#PSPs
	if [ "$LEVEL" = "1" ]; then PSIPoints=$[ 2 ];fi
	if [ "$LEVEL" = "2" ]; then PSIPoints=$[ 6 ];fi
	if [ "$LEVEL" = "3" ]; then PSIPoints=$[ 11 ];fi
	if [ "$LEVEL" = "4" ]; then PSIPoints=$[ 17 ];fi
	if [ "$LEVEL" = "5" ]; then PSIPoints=$[ 25 ];fi
	if [ "$LEVEL" = "6" ]; then PSIPoints=$[ 35 ];fi
	if [ "$LEVEL" = "7" ]; then PSIPoints=$[ 46 ];fi
	if [ "$LEVEL" = "8" ]; then PSIPoints=$[ 58 ];fi
	if [ "$LEVEL" = "9" ]; then PSIPoints=$[ 72 ];fi
	if [ "$LEVEL" = "10" ]; then PSIPoints=$[ 88 ];fi
	if [ "$LEVEL" -ge "11" ]; then PSIPoints=$[ 106 ];fi
#POWER SLOTS (Number of unique powers per day)
	if [ "$LEVEL" = "1" ]; then PowerSlots=$[ 1 ];fi
	if [ "$LEVEL" = "2" ]; then PowerSlots=$[ 2 ];fi
	if [ "$LEVEL" = "3" ]; then PowerSlots=$[ 2 ];fi
	if [ "$LEVEL" = "4" ]; then PowerSlots=$[ 3 ];fi
	if [ "$LEVEL" = "5" ]; then PowerSlots=$[ 3 ];fi
	if [ "$LEVEL" = "6" ]; then PowerSlots=$[ 4 ];fi
	if [ "$LEVEL" = "7" ]; then PowerSlots=$[ 4 ];fi
	if [ "$LEVEL" = "8" ]; then PowerSlots=$[ 5 ];fi
	if [ "$LEVEL" = "9" ]; then PowerSlots=$[ 5 ];fi
	if [ "$LEVEL" = "10" ]; then PowerSlots=$[ 6 ];fi
	if [ "$LEVEL" -ge "11" ]; then PowerSlots=$[ 6 ];fi

#MAGE/SPECIALIST SPELL PROGRESSION
	if   [ "$CLASS" != "Bard" ] && [ "$LEVEL" = "1" ]; then spellslv=(1 - - - - - - - -);fi
	if   [ "$CLASS" != "Bard" ] && [ "$LEVEL" = "2" ]; then spellslv=(2 - - - - - - - -);fi
	if   [ "$CLASS" != "Bard" ] && [ "$LEVEL" = "3" ]; then spellslv=(2 1 - - - - - - -);fi
	if   [ "$CLASS" != "Bard" ] && [ "$LEVEL" = "4" ]; then spellslv=(3 2 - - - - - - -);fi
	if   [ "$CLASS" != "Bard" ] && [ "$LEVEL" = "5" ]; then spellslv=(4 2 1 - - - - - -);fi
	if   [ "$CLASS" != "Bard" ] && [ "$LEVEL" = "6" ]; then spellslv=(4 2 2 - - - - - -);fi
	if   [ "$CLASS" != "Bard" ] && [ "$LEVEL" = "7" ]; then spellslv=(4 3 2 1 - - - - -);fi
	if   [ "$CLASS" != "Bard" ] && [ "$LEVEL" = "8" ]; then spellslv=(4 3 3 2 - - - - -);fi
	if   [ "$CLASS" != "Bard" ] && [ "$LEVEL" = "9" ]; then spellslv=(4 3 3 2 1 - - - -);fi
	if   [ "$CLASS" != "Bard" ] && [ "$LEVEL" = "10" ]; then spellslv=(4 4 3 2 2 - - - -);fi
	if   [ "$CLASS" != "Bard" ] && [ "$LEVEL" -ge "11" ]; then spellslv=("Not Implemented");fi

#BARD SPELL PROGRESSION
	if   [ "$CLASS" = "Bard" ] && [ "$LEVEL" = "1" ]; then spellslv=(- - - - - - - - -);fi
	if   [ "$CLASS" = "Bard" ] && [ "$LEVEL" = "2" ]; then spellslv=(1 - - - - - - - -);fi
	if   [ "$CLASS" = "Bard" ] && [ "$LEVEL" = "3" ]; then spellslv=(2 - - - - - - - -);fi
	if   [ "$CLASS" = "Bard" ] && [ "$LEVEL" = "4" ]; then spellslv=(2 1 - - - - - - -);fi
	if   [ "$CLASS" = "Bard" ] && [ "$LEVEL" = "5" ]; then spellslv=(3 1 - - - - - - -);fi
	if   [ "$CLASS" = "Bard" ] && [ "$LEVEL" = "6" ]; then spellslv=(3 2 - - - - - - -);fi
	if   [ "$CLASS" = "Bard" ] && [ "$LEVEL" = "7" ]; then spellslv=(3 2 1 - - - - - -);fi
	if   [ "$CLASS" = "Bard" ] && [ "$LEVEL" = "8" ]; then spellslv=(3 3 1 - - - - - -);fi
	if   [ "$CLASS" = "Bard" ] && [ "$LEVEL" = "9" ]; then spellslv=(3 3 2 - - - - - -);fi
	if   [ "$CLASS" = "Bard" ] && [ "$LEVEL" = "10" ]; then spellslv=(3 3 2 1 - - - - -);fi
	if   [ "$CLASS" = "Bard" ] && [ "$LEVEL" -ge "11" ]; then spellslv=("Not Implemented");fi

#PRIEST SPELL PROGRESSION
	if   [ "$CLASS" = "Specialty Priest" ] && [ "$LEVEL" = "1" ]; then spellslv=(1 - - - - - - - -);fi
	if   [ "$CLASS" = "Specialty Priest" ] && [ "$LEVEL" = "2" ]; then spellslv=(2 - - - - - - - -);fi
	if   [ "$CLASS" = "Specialty Priest" ] && [ "$LEVEL" = "3" ]; then spellslv=(2 1 - - - - - - -);fi
	if   [ "$CLASS" = "Specialty Priest" ] && [ "$LEVEL" = "4" ]; then spellslv=(3 2 - - - - - - -);fi
	if   [ "$CLASS" = "Specialty Priest" ] && [ "$LEVEL" = "5" ]; then spellslv=(3 2 1 - - - - - -);fi
	if   [ "$CLASS" = "Specialty Priest" ] && [ "$LEVEL" = "6" ]; then spellslv=(3 3 2 - - - - - -);fi
	if   [ "$CLASS" = "Specialty Priest" ] && [ "$LEVEL" = "7" ]; then spellslv=(3 3 2 1 - - - - -);fi
	if   [ "$CLASS" = "Specialty Priest" ] && [ "$LEVEL" = "8" ]; then spellslv=(3 3 3 2 - - - - -);fi
	if   [ "$CLASS" = "Specialty Priest" ] && [ "$LEVEL" = "9" ]; then spellslv=(4 4 3 2 1 - - - -);fi
	if   [ "$CLASS" = "Specialty Priest" ] && [ "$LEVEL" = "10" ]; then spellslv=(4 4 3 3 2 - - - -);fi
	if   [ "$CLASS" = "Specialty Priest" ] && [ "$LEVEL" -ge "11" ]; then spellslv=("Not Implemented");fi

#DRUID SPELL PROGRESSION
	if   [ "$CLASS" = "Druid" ] && [ "$LEVEL" = "1" ]; then spellslv=(1 - - - - - - - -);fi
	if   [ "$CLASS" = "Druid" ] && [ "$LEVEL" = "2" ]; then spellslv=(2 - - - - - - - -);fi
	if   [ "$CLASS" = "Druid" ] && [ "$LEVEL" = "3" ]; then spellslv=(2 1 - - - - - - -);fi
	if   [ "$CLASS" = "Druid" ] && [ "$LEVEL" = "4" ]; then spellslv=(3 2 - - - - - - -);fi
	if   [ "$CLASS" = "Druid" ] && [ "$LEVEL" = "5" ]; then spellslv=(3 2 1 - - - - - -);fi
	if   [ "$CLASS" = "Druid" ] && [ "$LEVEL" = "6" ]; then spellslv=(3 3 2 - - - - - -);fi
	if   [ "$CLASS" = "Druid" ] && [ "$LEVEL" = "7" ]; then spellslv=(3 3 2 1 - - - - -);fi
	if   [ "$CLASS" = "Druid" ] && [ "$LEVEL" = "8" ]; then spellslv=(3 3 3 2 - - - - -);fi
	if   [ "$CLASS" = "Druid" ] && [ "$LEVEL" = "9" ]; then spellslv=(4 4 3 2 1 - - - -);fi
	if   [ "$CLASS" = "Druid" ] && [ "$LEVEL" = "10" ]; then spellslv=(4 4 3 3 2 - - - -);fi
	if   [ "$CLASS" = "Druid" ] && [ "$LEVEL" -ge "11" ]; then spellslv=("Not Implemented");fi

#MONK SPELL PROGRESSION
	if   [ "$CLASS" = "Monk" ] && [ "$LEVEL" = "1" ]; then spellslv=(- - - - - - - - -);fi
	if   [ "$CLASS" = "Monk" ] && [ "$LEVEL" = "2" ]; then spellslv=(- - - - - - - - -);fi
	if   [ "$CLASS" = "Monk" ] && [ "$LEVEL" = "3" ]; then spellslv=(- - - - - - - - -);fi
	if   [ "$CLASS" = "Monk" ] && [ "$LEVEL" = "4" ]; then spellslv=(- - - - - - - - -);fi
	if   [ "$CLASS" = "Monk" ] && [ "$LEVEL" = "5" ]; then spellslv=(1 - - - - - - - -);fi
	if   [ "$CLASS" = "Monk" ] && [ "$LEVEL" = "6" ]; then spellslv=(2 - - - - - - - -);fi
	if   [ "$CLASS" = "Monk" ] && [ "$LEVEL" = "7" ]; then spellslv=(2 1 - - - - - - -);fi
	if   [ "$CLASS" = "Monk" ] && [ "$LEVEL" = "8" ]; then spellslv=(3 2 - - - - - - -);fi
	if   [ "$CLASS" = "Monk" ] && [ "$LEVEL" = "9" ]; then spellslv=(3 2 1 - - - - - -);fi
	if   [ "$CLASS" = "Monk" ] && [ "$LEVEL" = "10" ]; then spellslv=(3 3 2 - - - - - -);fi
	if   [ "$CLASS" = "Monk" ] && [ "$LEVEL" -ge "11" ]; then spellslv=("Not Implemented");fi

#CLERIC SPELL PROGRESSION
	if   [ "$CLASS" = "Cleric" ] && [ "$LEVEL" = "1" ]; then spellslv=(1 - - - - - - - -);fi
	if   [ "$CLASS" = "Cleric" ] && [ "$LEVEL" = "2" ]; then spellslv=(2 - - - - - - - -);fi
	if   [ "$CLASS" = "Cleric" ] && [ "$LEVEL" = "3" ]; then spellslv=(2 1 - - - - - - -);fi
	if   [ "$CLASS" = "Cleric" ] && [ "$LEVEL" = "4" ]; then spellslv=(3 2 - - - - - - -);fi
	if   [ "$CLASS" = "Cleric" ] && [ "$LEVEL" = "5" ]; then spellslv=(3 2 1 - - - - - -);fi
	if   [ "$CLASS" = "Cleric" ] && [ "$LEVEL" = "6" ]; then spellslv=(3 3 2 - - - - - -);fi
	if   [ "$CLASS" = "Cleric" ] && [ "$LEVEL" = "7" ]; then spellslv=(4 3 2 - - - - - -);fi
	if   [ "$CLASS" = "Cleric" ] && [ "$LEVEL" = "8" ]; then spellslv=(5 4 3 - - - - - -);fi
	if   [ "$CLASS" = "Cleric" ] && [ "$LEVEL" = "9" ]; then spellslv=(5 4 4 - - - - - -);fi
	if   [ "$CLASS" = "Cleric" ] && [ "$LEVEL" = "10" ]; then spellslv=(6 5 4 - - - - - -);fi
	if   [ "$CLASS" = "Cleric" ] && [ "$LEVEL" -ge "11" ]; then spellslv=("Not Implemented");fi

#RANGER SPELL PROGRESSION
	if   [ "$CLASS" = "Ranger" ] && [ "$LEVEL" = "1" ]; then spellslv=(- - - - - - - - -);fi
	if   [ "$CLASS" = "Ranger" ] && [ "$LEVEL" = "2" ]; then spellslv=(- - - - - - - - -);fi
	if   [ "$CLASS" = "Ranger" ] && [ "$LEVEL" = "3" ]; then spellslv=(- - - - - - - - -);fi
	if   [ "$CLASS" = "Ranger" ] && [ "$LEVEL" = "4" ]; then spellslv=(- - - - - - - - -);fi
	if   [ "$CLASS" = "Ranger" ] && [ "$LEVEL" = "5" ]; then spellslv=(- - - - - - - - -);fi
	if   [ "$CLASS" = "Ranger" ] && [ "$LEVEL" = "6" ]; then spellslv=(- - - - - - - - -);fi
	if   [ "$CLASS" = "Ranger" ] && [ "$LEVEL" = "7" ]; then spellslv=(- - - - - - - - -);fi
	if   [ "$CLASS" = "Ranger" ] && [ "$LEVEL" = "8" ]; then spellslv=(1 - - - - - - - -);fi
	if   [ "$CLASS" = "Ranger" ] && [ "$LEVEL" = "9" ]; then spellslv=(2 - - - - - - - -);fi
	if   [ "$CLASS" = "Ranger" ] && [ "$LEVEL" = "10" ]; then spellslv=(2 - - - - - - - -);fi
	if   [ "$CLASS" = "Ranger" ] && [ "$LEVEL" -ge "11" ]; then spellslv=("Not Implemented");fi

#PALADIN SPELL PROGRESSION
	if   [ "$CLASS" = "Paladin" ] && [ "$LEVEL" = "1" ]; then spellslv=(- - - - - - - - -);fi
	if   [ "$CLASS" = "Paladin" ] && [ "$LEVEL" = "2" ]; then spellslv=(- - - - - - - - -);fi
	if   [ "$CLASS" = "Paladin" ] && [ "$LEVEL" = "3" ]; then spellslv=(- - - - - - - - -);fi
	if   [ "$CLASS" = "Paladin" ] && [ "$LEVEL" = "4" ]; then spellslv=(- - - - - - - - -);fi
	if   [ "$CLASS" = "Paladin" ] && [ "$LEVEL" = "5" ]; then spellslv=(- - - - - - - - -);fi
	if   [ "$CLASS" = "Paladin" ] && [ "$LEVEL" = "6" ]; then spellslv=(- - - - - - - - -);fi
	if   [ "$CLASS" = "Paladin" ] && [ "$LEVEL" = "7" ]; then spellslv=(- - - - - - - - -);fi
	if   [ "$CLASS" = "Paladin" ] && [ "$LEVEL" = "8" ]; then spellslv=(- - - - - - - - -);fi
	if   [ "$CLASS" = "Paladin" ] && [ "$LEVEL" = "9" ]; then spellslv=(1 - - - - - - - -);fi
	if   [ "$CLASS" = "Paladin" ] && [ "$LEVEL" = "10" ]; then spellslv=(2 - - - - - - - -);fi
	if   [ "$CLASS" = "Paladin" ] && [ "$LEVEL" -ge "11" ]; then spellslv=("Not Implemented");fi

#ABILITY SCORE PRINTOUT 
#This is the table data for all possible ability score values
#Good God... This is going to be one UGLY code block.

#======================================================================
#	This code block contains ability score values saved as strings
#	It's less spaghetti-like than the previous method and seems to
#	be a drop-in replacement.
#======================================================================


#STRthrow=13
if [ "$STRthrow" = "4" ]; then str=(-2 None 15 40 3 0%) ;fi
if [ "$STRthrow" = "5" ]; then str=(-1 None 20 55 4 0%) ;fi
if [ "$STRthrow" = "6" ]; then str=(Normal None 35 90 5 1%) ;fi
if [ "$STRthrow" = "7" ]; then str=(Normal None 40 115 6 2%) ;fi
if [ "$STRthrow" = "8" ]; then str=(Normal None 45 140 7 4%) ;fi
if [ "$STRthrow" = "9" ]; then str=(Normal None 55 170 8 7%) ;fi
if [ "$STRthrow" = "10" ]; then str=(Normal +1 70 195 9 10%) ;fi
if [ "$STRthrow" = "11" ]; then str=(+1 +1 85 220 10 13%) ;fi
if [ "$STRthrow" = "12" ]; then str=(+1 +2 110 255 11 16%) ;fi
if [ "$STRthrow" = "13" ]; then str=(+1 +3 135 280 12 20%) ;fi
if [ "$STRthrow" = "14" ]; then str=(+1 +3 135 280 12 20%) ;fi
if [ "$STRthrow" = "15" ]; then str=(+2 +3 160 305 13 25%) ;fi
if [ "$STRthrow" = "16" ]; then str=(+2 +4 185 330 14 30%) ;fi
if [ "$STRthrow" = "17" ]; then str=(+2 +5 235 380 "15(3)" 35%) ;fi
if [ "$STRthrow" = "18" ]; then str=(+3 +6 335 480 "16(6)" 40%) ;fi
if [ "$STRthrow" = "19" ]; then str=(+3 +7 485 640 "16(8)" 50%) ;fi
if [ "$STRthrow" = "20" ]; then str=(+3 +8 535 700 "17(8)" 60%) ;fi

#DEXthrow=18
if [ "$DEXthrow" = "4" ]; then dex=(-2 -2 -3) 
		let PickPockets-=8; let OpenLocks-=7; let FindRemoveTraps-=3; let MoveSilently-=8; let HideinShadows-=7; let ClimbWalls-=8;fi
if [ "$DEXthrow" = "5" ]; then dex=(-1 -1 -2) 
		let PickPockets-=7; let OpenLocks-=6; let FindRemoveTraps-=3; let MoveSilently-=7; let HideinShadows-=6; let ClimbWalls-=7;fi
if [ "$DEXthrow" = "6" ]; then dex=(0 0 -1) 
		let PickPockets-=6; let OpenLocks-=5; let FindRemoveTraps-=3; let MoveSilently-=6; let HideinShadows-=5; let ClimbWalls-=6;fi
if [ "$DEXthrow" = "7" ]; then dex=(0 0 0) 
		let PickPockets-=5; let OpenLocks-=4; let FindRemoveTraps-=2; let MoveSilently-=5; let HideinShadows-=4; let ClimbWalls-=5;fi
if [ "$DEXthrow" = "8" ]; then dex=(0 0 0) 
		let PickPockets-=4; let OpenLocks-=3; let FindRemoveTraps-=2; let MoveSilently-=5; let HideinShadows-=3; let ClimbWalls-=4;fi
if [ "$DEXthrow" = "9" ]; then dex=(0 0 0) 
		let PickPockets-=3; let OpenLocks-=2; let FindRemoveTraps-=2; let MoveSilently-=4; let HideinShadows-=2; let ClimbWalls-=3;fi
if [ "$DEXthrow" = "10" ]; then dex=(0 0 0)
		let PickPockets-=2; let OpenLocks-=1; let FindRemoveTraps-=1; let MoveSilently-=3; let HideinShadows-=1; let ClimbWalls-=2;fi
if [ "$DEXthrow" = "11" ]; then dex=(0 0 0) 
		let PickPockets-=1; let FindRemoveTraps-=1; let MoveSilently-=2; let ClimbWalls-=1;fi
if [ "$DEXthrow" = "12" ]; then dex=(0 0 0) 
		let FindRemoveTraps-=1; let MoveSilently-=1;fi
if [ "$DEXthrow" = "13" ]; then dex=(0 0 0) ;fi
if [ "$DEXthrow" = "14" ]; then dex=(0 0 0) ;fi
if [ "$DEXthrow" = "15" ]; then dex=(0 0 +1) ;fi
if [ "$DEXthrow" = "16" ]; then dex=(+1 +1 +2) 
		let OpenLocks+=1;fi
if [ "$DEXthrow" = "17" ]; then dex=(+2 +2 +3) 
		let PickPockets+=1; let OpenLocks+=2; let MoveSilently+=1; let HideinShadows+=1; let ClimbWalls+=1;fi
if [ "$DEXthrow" = "18" ]; then dex=(+2 +2 +4) 
		let PickPockets+=2; let OpenLocks+=3; let FindRemoveTraps+=1; let MoveSilently+=2; let HideinShadows+=2; let ClimbWalls+=2;fi
if [ "$DEXthrow" = "19" ]; then dex=(+3 +3 +4)  
		let PickPockets+=3; let OpenLocks+=4; let FindRemoveTraps+=2; let MoveSilently+=3; let HideinShadows+=3; let ClimbWalls+=3;fi
if [ "$DEXthrow" = "20" ]; then dex=(+3 +3 +4)  
		let PickPockets+=4; let OpenLocks+=5; let FindRemoveTraps+=3; let MoveSilently+=4; let HideinShadows+=4; let ClimbWalls+=4;fi

#CONthrow=13
if [ "$CONthrow" = "2" ]; then con=(-3 30% 35% 0 Nil) ;fi
if [ "$CONthrow" = "3" ]; then con=(-2 35% 40% 0 Nil) ;fi
if [ "$CONthrow" = "4" ]; then con=(-1 40% 45% 0 Nil) ;fi
if [ "$CONthrow" = "5" ]; then con=(-1 45% 50% 0 Nil) ;fi
if [ "$CONthrow" = "6" ]; then con=(-1 50% 55% 0 Nil) ;fi
if [ "$CONthrow" = "7" ]; then con=(0 55% 60% 0 Nil) ;fi
if [ "$CONthrow" = "8" ]; then con=(0 60% 65% 0 Nil) ;fi
if [ "$CONthrow" = "9" ]; then con=(0 65% 70% 0 Nil) ;fi
if [ "$CONthrow" = "10" ]; then con=(0 70% 75% 0 Nil) ;fi
if [ "$CONthrow" = "11" ]; then con=(0 75% 80% 0 Nil) ;fi
if [ "$CONthrow" = "12" ]; then con=(0 80% 85% 0 Nil) ;fi
if [ "$CONthrow" = "13" ]; then con=(0 85% 90% 0 Nil) ;fi
if [ "$CONthrow" = "14" ]; then con=(0 88% 92% 0 Nil) ;fi
if [ "$CONthrow" = "15" ]; then con=(+1 90% 94% 0 Nil) ;fi
if [ "$CONthrow" = "16" ]; then con=(+2 95% 96% 0 Nil) ;fi
if [ "$CONthrow" = "17" ] && [ "$ATYPE" = "Warrior" ]; then con=(+3 97% 98% 0 Nil) ;fi
if [ "$CONthrow" = "17" ] && [ "$ATYPE" != "Warrior" ]; then con=(+2 97% 98% 0 Nil) ;fi
if [ "$CONthrow" = "18" ] && [ "$ATYPE" = "Warrior" ]; then con=(+4 99% 100% 0 Nil) ;fi
if [ "$CONthrow" = "18" ] && [ "$ATYPE" != "Warrior" ]; then con=(+2 99% 100% 0 Nil) ;fi
if [ "$CONthrow" = "19" ] && [ "$ATYPE" = "Warrior" ]; then con=(+5 99% 100% +1 Nil) ;fi
if [ "$CONthrow" = "19" ] && [ "$ATYPE" != "Warrior" ]; then con=(+2 99% 100% +1 Nil) ;fi
if [ "$CONthrow" = "20" ] && [ "$ATYPE" = "Warrior" ]; then con=(+5 99% 100% +1 "1/6 Turns") ;fi
if [ "$CONthrow" = "20" ] && [ "$ATYPE" != "Warrior" ]; then con=(+2 99% 100% +1 "1/6 Turns") ;fi

#INTthrow=13
if [ "$INTthrow" = "4" ]; then int=(1 None 0 0 None) ;fi
if [ "$INTthrow" = "5" ]; then int=(1 None 0 0 None) ;fi
if [ "$INTthrow" = "6" ]; then int=(1 None 0 0 None) ;fi
if [ "$INTthrow" = "7" ]; then int=(1 None 0 0 None) ;fi
if [ "$INTthrow" = "8" ]; then int=(1 None 0 0 None) ;fi
if [ "$INTthrow" = "9" ]; then int=(2 4th 35% 6 None) ;fi
if [ "$INTthrow" = "10" ]; then int=(2 5th 40% 7 None) ;fi
if [ "$INTthrow" = "11" ]; then int=(2 5th 45% 7 None) ;fi
if [ "$INTthrow" = "12" ]; then int=(3 6th 50% 7 None) ;fi
if [ "$INTthrow" = "13" ]; then int=(3 6th 55% 9 None) ;fi
if [ "$INTthrow" = "14" ]; then int=(3 7th 60% 9 None) ;fi
if [ "$INTthrow" = "15" ]; then int=(4 7th 65% 11 None) ;fi
if [ "$INTthrow" = "16" ]; then int=(4 8th 70% 11 None) ;fi
if [ "$INTthrow" = "17" ]; then int=(5 8th 75% 14 None) ;fi
if [ "$INTthrow" = "18" ]; then int=(6 9th 85% 18 None) ;fi
if [ "$INTthrow" = "19" ]; then int=(7 9th 95% All "Level 1 Illus.") ;fi
if [ "$INTthrow" = "20" ]; then int=(8 9th 96% All "Level 2 Illus.") ;fi

#WISthrow=13
if [ "$WISthrow" = "5" ]; then wis=(-1 None 40% None) ;fi
if [ "$WISthrow" = "6" ]; then wis=(-1 None 35% None) ;fi
if [ "$WISthrow" = "7" ]; then wis=(-1 None 30% None) ;fi
if [ "$WISthrow" = "8" ]; then wis=(0 None 25% None) ;fi
if [ "$WISthrow" = "9" ]; then wis=(0 None 20% None) ;fi
if [ "$WISthrow" = "10" ]; then wis=(0 None 10% None) ;fi
if [ "$WISthrow" = "11" ]; then wis=(0 None 5% None) ;fi
if [ "$WISthrow" = "12" ]; then wis=(0 None 0% None) ;fi
if [ "$WISthrow" = "13" ]; then wis=(0 1st 0% None) ;fi
if [ "$WISthrow" = "14" ]; then wis=(0 1st 0% None) ;fi
if [ "$WISthrow" = "15" ]; then wis=(+1 2nd 0% None) ;fi
if [ "$WISthrow" = "16" ]; then wis=(+2 2nd 0% None) ;fi
if [ "$WISthrow" = "17" ]; then wis=(+3 3rd 0% None) ;fi
if [ "$WISthrow" = "18" ]; then wis=(+4 4th 0% None) ;fi
if [ "$WISthrow" = "19" ]; then wis=(+4 1st,4th 0% "Yes") ;fi
if [ "$WISthrow" = "20" ]; then wis=(+4 2nd,4th 0% "Yes") ;fi
if [ "$WISthrow" = "21" ]; then wis=(+4 3rd,5th 0% "Yes") ;fi
if [ "$WISthrow" = "22" ]; then wis=(+4 4th,5th 0% "Yes") ;fi

#CHAthrow=13
if [ "$CHAthrow" = "5" ]; then cha=(2 -4 -3) ;fi
if [ "$CHAthrow" = "6" ]; then cha=(2 -3 -2) ;fi
if [ "$CHAthrow" = "7" ]; then cha=(3 -2 -1) ;fi
if [ "$CHAthrow" = "8" ]; then cha=(3 -1 0) ;fi
if [ "$CHAthrow" = "9" ]; then cha=(4 0 0) ;fi
if [ "$CHAthrow" = "10" ]; then cha=(4 0 0) ;fi
if [ "$CHAthrow" = "11" ]; then cha=(4 0 0) ;fi
if [ "$CHAthrow" = "12" ]; then cha=(5 0 0) ;fi
if [ "$CHAthrow" = "13" ]; then cha=(5 0 +1) ;fi
if [ "$CHAthrow" = "14" ]; then cha=(6 +1 +2) ;fi
if [ "$CHAthrow" = "15" ]; then cha=(7 +3 +3) ;fi
if [ "$CHAthrow" = "16" ]; then cha=(8 +4 +5) ;fi
if [ "$CHAthrow" = "17" ]; then cha=(10 +6 +6) ;fi
if [ "$CHAthrow" = "18" ]; then cha=(15 +8 +7) ;fi
if [ "$CHAthrow" = "19" ]; then cha=(20 +10 +8) ;fi
if [ "$CHAthrow" = "20" ]; then cha=(25 +12 +9) ;fi

#EXPERIENCE POINT ARRAYS

if [ "$ATYPE" = "Rogue" ];then
ClassXP=( 0 1500 2500 5000 10000 20000 40000 70000 110000 160000 220000 440000 660000 880000 1100000 1320000 1650000 1760000 1980000 2200000);fi
if [ "$ATYPE" = "Wizard" ];then
ClassXP=(0 2500 5000 10000 20000 40000 60000 90000 135000 250000 375000 750000 1125000 1500000 1985000 2250000 2625000 3000000 3375000 3750000);fi
if [ "$CLASS" = "Fighter" ];then
ClassXP=(0 2000 4000 8000 16000 32000 64000 125000 250000 500000 750000 1000000 1250000 1500000 1750000 2000000 2250000 2500000 2750000 3000000 );fi
if [ "$CLASS" = "Ranger" ] || [ "$CLASS" = "Paladin" ];then
ClassXP=(0 2500 4500 9000 18000 36000 75000 150000 300000 600000 900000 1200000 1500000 1800000 2100000 2400000 2700000 3000000 3300000 3600000);fi
if [ "$ATYPE" = "Priest" ] && [ "$CLASS" != "Druid" ];then
ClassXP=(0 2000 4000 7500 12500 20000 35000 60000 90000 125000 200000 300000 500000 1000000 1500000 2000000 2500000 3000000 3500000 4000000);fi
if [ "$ATYPE" = "Priest" ] && [ "$CLASS" = "Druid" ] && [ "$LEVEL" -le "15" ];then
ClassXP=(0 2000 4000 7500 12500 20000 35000 60000 90000 125000 200000 300000 750000 1500000 3000000 3500000 "Something went wrong here...");fi
if [ "$ATYPE" = "Priest" ] && [ "$CLASS" = "Druid" ] && [ "$LEVEL" -ge "16" ];then
ClassXP=(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 500000 1000000 1500000 200000);fi

#This is the math for calculating experience from the arrays above.
	NEXTXP=$(( ${ClassXP[$LEVEL]}))			#XP for next level by calling array value keyed to "LEVEL" variable
	LASTXP=$(( ${ClassXP[$LEVEL -1]}))		#XP for current level
	DIFFXP=$(( $NEXTXP - $LASTXP ))			#Difference between experience from ding to ding
	let "CURRENTXP = $LASTXP + ($RANDOM % $DIFFXP)"	#Progress toward next level

if [ "$LEVEL" = "20" ]; then NEXTXP="Max Level"; fi

#==============================================================
#   Generate TAB, # of Attacks per Round, and Saving Throws   #  
#==============================================================
#TAB Generation

if [ "$ATYPE" = "Warrior" ]
	then BMAB=$(( $LEVEL + ${str[0]} -1 ))
	     BDAB=$(( $LEVEL + ${dex[1]} -1 )); fi

if [ "$ATYPE" = "Rogue" ]
	then BMAB=$(((($LEVEL +1 ) / 2) + ${str[0]} -1 ))
	     BDAB=$(((($LEVEL +1 ) / 2) + ${dex[1]} -1 )); fi

if [ "$ATYPE" = "Priest" ] 
	then BMAB=$((((($LEVEL +2 ) / 3) -1 ) * 2 + ${str[0]}))
	     BDAB=$((((($LEVEL +2 ) / 3) -1 ) * 2 + ${dex[1]})); fi

if [ "$ATYPE" = "Wizard" ]
	then BMAB=$(((($LEVEL +2 ) / 3) + ${str[0]} -1 ))
	     BDAB=$(((($LEVEL +2 ) / 3) + ${dex[1]} -1 )); fi


# Saving throws by Archetype

PPDM=0; RSW=0; PP=0; BW=0; SP=0

if [ "$ATYPE" = "Rogue" ]; then
	PPDM=$(((($LEVEL +3) / 4) + 6))
	RSW=$((((($LEVEL +3) /4) *2) + 4))
	PP=$(((($LEVEL +3) / 4) + 7))
	BW=$(((($LEVEL +3) / 4) + 3))
	SP=$((((($LEVEL +3) /4) *2) + 3));fi

if [ "$CLASS" = "Fighter" ] || [ "$CLASS" = "Ranger" ]; then
	if [ "$LEVEL" = "1" ] || [ "$LEVEL" = "2" ]; then WarRangSave=( 6 4 5 3 3 );fi
	if [ "$LEVEL" = "3" ] || [ "$LEVEL" = "4" ]; then WarRangSave=( 7 5 6 4 4 );fi
	if [ "$LEVEL" = "5" ] || [ "$LEVEL" = "6" ]; then WarRangSave=( 9 7 8 7 6 );fi
	if [ "$LEVEL" = "7" ] || [ "$LEVEL" = "8" ]; then WarRangSave=( 10 8 9 8 7 );fi
	if [ "$LEVEL" = "9" ] || [ "$LEVEL" = "10" ]; then WarRangSave=( 12 10 11 11 9 );fi
	if [ "$LEVEL" = "11" ] || [ "$LEVEL" = "12" ]; then WarRangSave=( 13 11 12 12 10 );fi
	if [ "$LEVEL" = "13" ] || [ "$LEVEL" = "14" ]; then WarRangSave=( 15 13 14 14 12 );fi
	if [ "$LEVEL" = "15" ] || [ "$LEVEL" = "16" ]; then WarRangSave=( 16 14 15 15 13 );fi
	if [ "$LEVEL" -ge "17" ]; then WarRangSave=( 17 15 16 16 14 );fi

	PPDM=$"${WarRangSave[0]}"		# This block selects saving throw values from 
	RSW=$"${WarRangSave[1]}"		# the arrays above. The rogue doesn't require
	PP=$"${WarRangSave[2]}"			# this treatment as its progression fits to a
	BW=$"${WarRangSave[3]}"			# sequence. Maybe this one does too, but I
	SP=$"${WarRangSave[4]}";fi		# can't figure it out.


if [ "$CLASS" = "Paladin" ]; then
	if [ "$LEVEL" = "1" ] || [ "$LEVEL" = "2" ]; then WarRangSave=( 8 6 7 5 5 );fi
	if [ "$LEVEL" = "3" ] || [ "$LEVEL" = "4" ]; then WarRangSave=( 9 7 8 6 6 );fi
	if [ "$LEVEL" = "5" ] || [ "$LEVEL" = "6" ]; then WarRangSave=( 11 9 10 9 8 );fi
	if [ "$LEVEL" = "7" ] || [ "$LEVEL" = "8" ]; then WarRangSave=( 12 10 11 10 9 );fi
	if [ "$LEVEL" = "9" ] || [ "$LEVEL" = "10" ]; then WarRangSave=( 14 12 13 13 11 );fi
	if [ "$LEVEL" = "11" ] || [ "$LEVEL" = "12" ]; then WarRangSave=( 15 13 14 14 12 );fi
	if [ "$LEVEL" = "13" ] || [ "$LEVEL" = "14" ]; then WarRangSave=( 17 15 16 16 14 );fi
	if [ "$LEVEL" = "15" ] || [ "$LEVEL" = "16" ]; then WarRangSave=( 17 16 17 17 15 );fi
	if [ "$LEVEL" -ge "17" ]; then WarRangSave=( 17 17 17 17 16 );fi

	PPDM=$"${WarRangSave[0]}"
	RSW=$"${WarRangSave[1]}"
	PP=$"${WarRangSave[2]}"
	BW=$"${WarRangSave[3]}"
	SP=$"${WarRangSave[4]}";fi


if [ "$ATYPE" = "Priest" ]; then
	if [ "$LEVEL" = "1" ] || [ "$LEVEL" = "2" ] || [ "$LEVEL" = "3" ]; then PriestSave=( 10 6 7 4 5 );fi
	if [ "$LEVEL" = "4" ] || [ "$LEVEL" = "5" ] || [ "$LEVEL" = "6" ]; then PriestSave=( 11 7 8 5 6 );fi
	if [ "$LEVEL" = "7" ] || [ "$LEVEL" = "8" ] || [ "$LEVEL" = "9" ]; then PriestSave=( 13 9 10 7 8 );fi
	if [ "$LEVEL" = "10" ] || [ "$LEVEL" = "11" ] || [ "$LEVEL" = "12" ]; then PriestSave=( 14 10 11 8 9 );fi
	if [ "$LEVEL" = "13" ] || [ "$LEVEL" = "14" ] || [ "$LEVEL" = "15" ]; then PriestSave=( 15 11 12 9 10 );fi
	if [ "$LEVEL" = "16" ] || [ "$LEVEL" = "17" ] || [ "$LEVEL" = "18" ]; then PriestSave=( 16 12 13 10 11 );fi
	if [ "$LEVEL" -ge "19" ]; then PriestSave=( 17 14 15 12 13 );fi

	PPDM=$"${PriestSave[0]}"
	RSW=$"${PriestSave[1]}"
	PP=$"${PriestSave[2]}"
	BW=$"${PriestSave[3]}"
	SP=$"${PriestSave[4]}";fi


if [ "$ATYPE" = "Wizard" ]; then	
	if [ "$LEVEL" -le "10" ]; then PPDM=$(((($LEVEL +4) / 5) + 5));fi
	if [ "$LEVEL" -ge "11" ]; then PPDM=$(((($LEVEL +4) / 5) + 6));fi
	RSW=$((((($LEVEL +4) /5) *2) + 7))
	PP=$((((($LEVEL +4) / 5) *2) + 5))
	BW=$((((($LEVEL +4) / 5) *2)+ 3))
	SP=$((((($LEVEL +4) /5) *2) + 6));fi


# Birthday Calculation ... because, hey, why not put it here?

	BirthdayARRAY=( "Fireseek" "Readying" "Coldeven" "Growfeast" "Planting" "Flocktime" "Wealsun" "Richfeast" "Reaping" "Goodmonth" "Harvester" "Brewfeast" "Patchwall" "Ready'reat" "Sunsebb" "Needfeast" )
		for index in `shuf --input-range=0-$(( ${#BirthdayARRAY[*]} - 1 )) | head -1`
		do    BMonth=${BirthdayARRAY[$index]};done
		let "BDate = $RANDOM % 28 + 1"
		if [ "$Month" = "Growfeast" ] || [ "$Month" = "Richfeast" ] || [ "$Month" = "Brewfeast" ] || [ "$Month" = "Needfeast" ]; then
		let "BDate = $RANDOM % 7 + 1" ;fi

# And add bonus INT slots for Relics so it shows up in the right place (HACK!) 
if [ "$RACE" = "Relic" ]; then let int[0]+=20; fi 

#=======================================================================================================================#
#=======================================================================================================================#
#					START CHARACTER SHEET PRINT-OUT							#
#=======================================================================================================================#
#=======================================================================================================================#

# PRINT CHARACTER ABLITY SCORE BLOCK
# PRINT CHARACTER ABLITY SCORE BLOCK
# PRINT CHARACTER ABLITY SCORE BLOCK	
function Character {
if [ "$RACE" = "Protean" ]; then XPBonus="0";
echo $First-$Pat $Sur	"Level" "$LEVEL""     ""$Handedness"" Handed     Experience Points: "$CURRENTXP" / "$NEXTXP; fi
if [ "$RACE" = "Elkan" ]; then 
echo $Sur $First	"Level" "$LEVEL""     ""$Handedness"" Handed     Experience Points: "$CURRENTXP" / "$NEXTXP; fi
if [ "$RACE" != "Protean" ] && [ "$RACE" != "Elkan" ]; then
echo $First $Pat $Sur	"Level" "$LEVEL""     ""$Handedness"" Handed     Experience Points: "$CURRENTXP" / "$NEXTXP; fi
#Race, Class, Level, & Sex Info
if [ "$RACE" != "Jaka" ] && [ "$RACE" != "Relic" ]; then echo "$RACE" "$SEX" "$CLASS" "$SPEC""		""Alignment:" $Ethics $Morality "	XP Bonus = $XPBonus%";fi
if [ "$RACE" = "Jaka" ] || [ "$RACE" = "Relic" ];  then	echo "$RACE" "$SEX" "$CLASS" "$SPEC""		""Alignment:" $Ethics $Morality "	XP Penalty = $XPBonus%";fi
echo
if [ "$RACE" = "Selah" ]; then
echo Length: $Feet\' $Inches\""		"Scales: $ScaleColor"	"Age: $Age"		"Underbelly: $BellyColor;fi
if [ "$RACE" != "Selah" ] && [ "$BEAST" = "Y" ] ;then
echo Height: $Feet\' $Inches\""		"Hair: $HairColor"		"Age: $Age"		"Coat: $CoatColor ;fi
if [ "$HUMANOID" = "Y" ] && [ "$SPEC" != "of Damsinorlay" ] ;then
echo Height: $Feet\' $Inches\""		"Hair: $HairColor"	"Age: $Age"""			""Skin: $SkinColor" ;fi
if [ "$HUMANOID" = "Y" ] && [ "$SPEC" = "of Damsinorlay" ] ;then
echo Height: $Feet\' $Inches\""		"Hair: $HairColor"/(Bald)""	"Age: $Age"""			""Skin: $SkinColor" ;fi

CharWeight; echo Weight: $weight"" "lbs		"Eyes:	$EyeColor"	"Maximum Age: $MaxAge"	"Religion: $Religion
echo
echo  "STR" "$STRthrow""	""Hit Adj." "${str[0]}""	""Dmg Adj" "${str[1]}""	""Max Load" "${str[2]}""	""Max Press" "${str[3]}""	""Open Doors" "${str[4]}""	""BB/LG%" "${str[5]}"
echo  "DEX" "$DEXthrow""	""Rct.Adj." "${dex[0]}""	""Hit Adj." "${dex[1]}""	""Def Adj." "${dex[2]}" 
echo  "CON" "$CONthrow""	""HP Adj." "${con[0]}""	""Sys Shok" "${con[1]}""	""Res Surv." "${con[2]}""	""Poison Save" "${con[3]}""	""Regen" "${con[4]}"
echo  "INT" "$INTthrow""	""Bonus Skills" "${int[0]}""	""Max Sp. Lv" "${int[1]}""	""Learn Spell %" "${int[2]}""	""Spells/Lv" "${int[3]}""	""Spell Immunity:" "${int[4]}"
echo  "WIS" "$WISthrow""	""Magic Def. Adj." "${wis[0]}""    ""Bonus Spells" "${wis[1]}""	""Spell Fail%" "${wis[2]}""   ""Spell Immunity:" "${wis[3]}" 
echo  "CHA" "$CHAthrow""	""Max # Henchmen" "${cha[0]}""   ""Loyalty Base" "${cha[1]}""	""Reaction Adj." "${cha[2]}"    

if [ "$COMthrow" = "4" ] || [ "$COMthrow" = "5" ] || [ "$COMthrow" = "6" ]
then echo  "COM "$COMthrow""	"	""Ugly - People are uneasy and initially seek to get away from you.";fi
if [ "$COMthrow" = "7" ] || [ "$COMthrow" = "8" ] || [ "$COMthrow" = "9" ]
then echo  "COM "$COMthrow""	"	""Homely - Initial contact is of the negative sort.";fi
if [ "$COMthrow" = "10" ] || [ "$COMthrow" = "11" ] || [ "$COMthrow" = "12" ] || [ "$COMthrow" = "13" ]
then echo  "COM "$COMthrow"  Plain - You look normal and average in every way. No effect on viewers.";fi
if [ "$COMthrow" = "14" ] || [ "$COMthrow" = "15" ] || [ "$COMthrow" = "16" ] || [ "$COMthrow" = "17" ]
then echo  "COM "$COMthrow"  Good-Looking - People take interest in you, often starting up conversation.";fi
if [ "$COMthrow" = "18" ] || [ "$COMthrow" = "19" ] || [ "$COMthrow" = "20" ] || [ "$COMthrow" = "21" ]
then echo  "COM "$COMthrow"  Causes heads to turn and hearts to race!";fi
if [ "$COMthrow" = "22" ] || [ "$COMthrow" = "23" ] || [ "$COMthrow" = "24" ] || [ "$COMthrow" = "25" ]
then echo  "COM "$COMthrow"  Stunningly beautiful. Opposite sex flocks to the character and craves their attention.";fi

echo  "PER $PERthrow" 
echo

#==========================================================#
#================ MAGIC WEAPON GENERATOR ==================#
#==========================================================#

echo "*** MELEE WEAPONS ***"
let "Number_of_Weapons = $RANDOM % 100 + 1"

if [ "$Number_of_Weapons" -ge "1" ] &&  [ "$Number_of_Weapons" -le "25" ]; then
let "Weapon_Count = $RANDOM % 1 + 1"; fi
if [ "$Number_of_Weapons" -ge "26" ] &&  [ "$Number_of_Weapons" -le "80" ]; then
let "Weapon_Count = $RANDOM % 2 + 1"; fi
if [ "$Number_of_Weapons" -ge "81" ] &&  [ "$Number_of_Weapons" -le "90" ]; then
let "Weapon_Count = $RANDOM % 3 + 1"; fi
if [ "$Number_of_Weapons" -ge "91" ] &&  [ "$Number_of_Weapons" -le "95" ]; then
let "Weapon_Count = $RANDOM % 4 + 1"; fi
if [ "$Number_of_Weapons" -ge "96" ] &&  [ "$Number_of_Weapons" -le "100" ]; then
let "Weapon_Count = $RANDOM % 5 + 1"; fi

Got_Bow=0
if [ $Weapon_Count -ge "4" ] && [ "$CLASS" = "Paladin" ]	#Limit Paladins to 4 magic weapons
	then [ "$Weapon_Count" = "4" ];fi		
if [ $Weapon_Count -ge "3" ] && [ "$CLASS" = "Cleric" ]		#Limit Clerics to 3 magic weapons
	then [ "$Weapon_Count" = "3" ];fi
until [ $Weapon_Count -le "0" ]; do

# First we define some arrays...
# ... and >>>SQUEEZE<<< THE SHIT OUT OF THEM! (They're not meant to be read, they're meant to work)

M_Warrior_Weapon_ARRAY=( "Falcata" "Kukri" "Gladius" "Short_Sword" "Broad_Sword" "Chuth'ka" "Iuak" "Longsword" "Bastard_Sword" "Greatsword" "Claymore" "Bowie_Knife" "Khopesh" "Warhammer" "Mace" "Flail" "Morning_Star" "Club" "Hatchet" "Battle-Axe" "Dwarven_Battle-Axe" "Quarterstaff" "Smallsword" "Rapier" "Cutlass" "Sabre" "Scimitar" "Katana" "Katar" "Dagger" "Ulu" "Dirk" "Dart" "Stiletto" "Bullwhip" "Meteor_Hammer" "Bola" "Boomerang" "Two-Handed_Warhammer" "Heavy_Crossbow" "Light_Crossbow" "Hand_Crossbow" "Longbow" "Composite_Longbow" "Shortbow" "Composite_Shortbow" "Javelin" )
L_Warrior_Weapon_ARRAY=( "Falcata" "Kukri" "Gladius" "Short_Sword" "Broad_Sword" "Chuth'ka" "Iuak" "Longsword" "Bastard_Sword" "Greatsword" "Claymore" "Bowie_Knife" "Khopesh" "Warhammer" "Mace" "Flail" "Morning_Star" "Club" "Hatchet" "Battle-Axe" "Dwarven_Battle-Axe" "Quarterstaff" "Smallsword" "Rapier" "Cutlass" "Sabre" "Scimitar" "Katana" "Katar" "Dagger" "Ulu" "Dirk" "Dart" "Stiletto" "Bullwhip" "Meteor_Hammer" "Bola" "Boomerang" "Two-Handed_Warhammer" "Heavy_Crossbow" "Light_Crossbow" "Pike_Maul" "Longbow" "Composite_Longbow" "Shortbow" "Composite_Shortbow" "Javelin" )
M_Wizard_Weapon_ARRAY=( "Iuak" "Bowie_Knife" "Club" "Hatchet" "Quarterstaff" "Dagger" "Ulu" "Dirk" "Dart" "Stiletto" "Bullwhip" "Boomerang" "Composite_Longbow" "Longbow" "Shortbow" "Composite_Shortbow" "Bola" "Hand_Crossbow" )
L_Wizard_Weapon_ARRAY=( "Iuak" "Bowie_Knife" "Club" "Hatchet" "Quarterstaff" "Dagger" "Ulu" "Dirk" "Dart" "Stiletto" "Bullwhip" "Boomerang" "Composite_Longbow" "Longbow" "Shortbow" "Composite_Shortbow" "Bola" )
Monk_Weapon_ARRAY=( "Bowie_Knife" "Warhammer" "Mace" "Flail" "Morning_Star" "Club" "Quarterstaff" "Katana" "Katar" "Dagger" "Ulu" "Bullwhip" "Meteor_Hammer" "Bola" "Boomerang" "Two-Handed_Warhammer" "Longbow" "Composite_Longbow" "Shortbow" "Composite_Shortbow" )
M_Rogue_Weapon_ARRAY=( "Falcata" "Kukri" "Gladius" "Short_Sword" "Iuak" "Bowie_Knife" "Khopesh" "Club" "Hatchet" "Smallsword" "Rapier" "Cutlass" "Sabre" "Scimitar" "Katar" "Dagger" "Ulu" "Dirk" "Dart" "Stiletto" "Bullwhip" "Bola" "Boomerang" "Longbow" "Composite_Longbow" "Shortbow" "Composite_Shortbow" "Light_Crossbow" "Hand_Crossbow" )
L_Rogue_Weapon_ARRAY=( "Falcata" "Kukri" "Gladius" "Short_Sword" "Iuak" "Bowie_Knife" "Khopesh" "Club" "Hatchet" "Smallsword" "Rapier" "Cutlass" "Sabre" "Scimitar" "Katar" "Dagger" "Ulu" "Dirk" "Dart" "Stiletto" "Bullwhip" "Bola" "Boomerang" "Longbow" "Composite_Longbow" "Shortbow" "Composite_Shortbow" "Light_Crossbow" )
Priest_Weapon_ARRAY=( "Warhammer" "Mace" "Flail" "Morning_Star" "Club" "Quarterstaff" "Dagger" "Ulu" "Bullwhip" "Bola" "Two-Handed_Warhammer" "Longbow" "Composite_Longbow" "Shortbow" "Composite_Shortbow" "Heavy_Crossbow" "Light_Crossbow" )

Blade_ShinyARRAY=( "Slayer" ", Scalebane" " of Quickness" " of Speed" ", Hornblade" " of Disruption" ", Sunblade" ", Flame Tongue" " of Sundering" ", Ice Fang" ", Werebane" ", Nine Lives Stealer" ", Frostbrand" ", Defender" ", Holy Avenger" " of Dancing" " of Life Stealing" " of Vampiric Regeneration" " of Wounding" " of Enervation" ", Keen" ", Defender" " of Spell Storing" ", Spelldrinker" " of Phasing" )
Mass_ShinyARRAY=( "Slayer" ", Scalebane" " of Quickness" " of Speed" " of Disruption" " of Sundering" ", Werebane" ", Nine Lives Stealer" ", Defender" ", Holy Avenger" " of Dancing" " of Life Stealing" " of Vampiric Regeneration" " of Wounding" " of Enervation" ", Keen" " of Spell Storing" ", Spelldrinker" " of Phasing" )
CBow_ShinyARRAY=( "Slayer" ", Scalebane" " of Quickness" " of Speed" " of Sundering" ", Werebane" " of Wounding" ", Spelldrinker" )
Whip_ShinyARRAY=( "Slayer" ", Scalebane" " of Quickness" " of Speed" ", Flame Tongue" ", Werebane" " of Entangling" " of Dancing" " of Life Stealing" " of Wounding" " of Enervation" )
Thrown_ShinyARRAY=( "Slayer" ", Scalebane" " of Returning" " of Quickness" " of Speed" " of Disruption" ", Flame Tongue" " of Sundering" ", Ice Fang" ", Werebane" " of Wounding" " of Enervation" " of Phasing" )
Bow_ShinyARRAY=( "Slayer" ", Scalebane" " of Quickness" " of Speed" " of Sundering" ", Werebane" " of Dancing" " of Wounding" " of Enervation" ", Spelldrinker" )
XBow_ShinyARRAY=( "Slayer" ", Scalebane" " of Quickness" " of Speed" " of Sundering" ", Werebane" " of Dancing" " of Wounding" " of Enervation" ", Spelldrinker" )
Ammo_ShinyARRAY=( "Slayer" " of Homing" ", Scalebane" " of Quickness" " of Speed" " of Disruption"" of Sundering" ", Ice Fang" ", Werebane" " of Wounding" " of Enervation" " of Spell Storing" " of Continual Light" " of Continual Darkness" " of Phasing" )
SlayerARRAY=( " of Giant Slaying" " of Mage Slaying" " of Fighter Slaying" " of Bard Slaying" " of Monk Slaying" " of Orc Slaying" " of Half-Orc Slaying" " of Goblin Slaying" " of Alvani Slaying" " of Ogre Slaying" " of Horg Slaying" " of Priest Slaying" " of Thief Slaying" " of Ranger Slaying" " of Paladin Slaying" " of Human Slaying" " of Elf Slaying" " of Dwarf Slaying" " of Kenderkin Slaying" " of Troll Slaying" " of Reptilian Slaying" " of Beastfolk Slaying" )

Arrow_ARRAY1=( "Target_Arrows" "Bodkin_Arrows" "War_Arrows" )
Arrow_ARRAY2=( "Target_Arrows" "Bodkin_Arrows" )

#################################################################
# Weapon tracking variables (to prevent taking duplicate weapon 
# skills for non-fighters)

# REWORK THIS SECTION
#  DONE	1) Define Weapon Arrays
#  DONE	2) Define Weapon Skill Tracking Variables
#	3) Select weapon skills and properly increment weapon skill variables
#	4) Read Weapon Skill Variables - if != 0, then add skill to proficiency list
#	5) Generate equipped weapons, checking against skill variables to calculate TAB
#  DONE	6) Separate out weapon materials so it can be turned on/off with a switch
#	7) "Function-ize" the generation of magic/shiny

# These are weapon skill tracking variables
Falcata=0; 	Kukri=0; 	Gladius=0; 	Short_Sword=0; 	Broad_Sword=0; 
Chuthka=0; 	Iuak=0; 	Longsword=0; 	BSword=0; 	Greatsword=0; 
Claymore=0; 	Bowie_Knife=0; 	Khopesh=0; 	Warhammer=0; 	Mace=0; 
Flail=0; 	Morning_Star=0; Club=1; 	Hatchet=0; 	BattleAxe=0; 
DBAxe=0; 	Quarterstaff=0; Smallsword=0; 	Rapier=0; 	Cutlass=0; 
Sabre=0; 	Scimitar=0; 	Katana=0; 	Katar=0; 	Dagger=0; 
Ulu=0; 		Dirk=0; 	Dart=0; 	Stiletto=0; 	Bullwhip=0; 
MHammer=0; 	Bola=0; 	Boomerang=0; 	TwoHWarH=0; 	Heavy_Xbow=0; 
Light_Xbow=0; 	Hand_Xbow=0; 	Longbow=0; 	CompLbow=0; 	Shortbow=0; 
CompSbow=0; 	Javelin=0; 	Pike_Maul=0; 	PunchW=0;

# Code to allow fighters to specialize in a given weapon
# Break Rangers and Paladins off from the rest of the archetype

if [ "$CLASS" = "Ranger" ] || [ "$CLASS" = "Paladin" ]; then 
	if [ "$SIZE" = "M" ]; then 
	for index in `shuf --input-range=0-$(( ${#M_Warrior_Weapon_ARRAY[*]} - 1 )) | head -1` 
		do    Wpn1=${M_Warrior_Weapon_ARRAY[$index]} ;done; fi
	if [ "$SIZE" = "L" ]; then		
	for index in `shuf --input-range=0-$(( ${#L_Warrior_Weapon_ARRAY[*]} - 1 )) | head -1` 
		do    Wpn1=${L_Warrior_Weapon_ARRAY[$index]} ;done; fi; fi

# Now the Fighter special case ...

# NOTE: I have no idea why this is working and not dying with some sort of error.
# 	This was a bunch of "if" statements, but once I made a case tree, I got a 
#	"color" warning about my quotes on the first "4|5|6" line. Both work, but 
#	until I know why the case tree is acting funny, I'm keeping it commented 
#	out and using the if-list instead.

if [ "$CLASS" = "Fighter" ]; then WeapSpec=(); SpentSkills=()   
	if [ "$WeaponSpecialization" = "0" ] || [ "$Wpn1" = "$SpecializedWeapon" ]; then 

	    case "$LEVEL" in 
	    1|2)			: 									      ;;
	    3) 			WeapSpec=""		   SpecNum=1; SpentSkills=1				      ;;
	    4|5|6) 		WeapSpec="_(Specialist)"   SpecNum=2; SpentSkills=2; SpecHitBonus=1; SpecDamageBonus=2;;
	    7|8|9)		WeapSpec="_(Master)"       SpecNum=3; SpentSkills=3; SpecHitBonus=3; SpecDamageBonus=3;;
	    10|11|12|13|14|15)	WeapSpec="_(High_Master)"  SpecNum=4; SpentSkills=4; SpecHitBonus=3; SpecDamageBonus=3;;
	    16)			WeapSpec="_(Grand_Master)" SpecNum=5; SpentSkills=5; SpecHitBonus=3; SpecDamageBonus=3;;
	    esac
	else
	    case "$LEVEL" in 
	    1|2)		: 										       ;;
	    3) 			WeapSpec=""		  ; SpecNum=1; SpentSkills=1;				       ;;
	    4|5|6) 		WeapSpec="_(Specialist)"  ; SpecNum=2; SpentSkills=2; SpecHitBonus=0; SpecDamageBonus=0;;
	    7|8|9)		WeapSpec="_(Master)"      ; SpecNum=3; SpentSkills=3; SpecHitBonus=0; SpecDamageBonus=0;;
	    10|11|12|13|14|15)	WeapSpec="_(High_Master)" ; SpecNum=4; SpentSkills=4; SpecHitBonus=0; SpecDamageBonus=0;;
	    16)			WeapSpec="_(Grand_Master)"; SpecNum=5; SpentSkills=5; SpecHitBonus=0; SpecDamageBonus=0;;
	    esac
	fi

#	    if [ "$LEVEL" -le "3" ]; 				then WeapSpec=""; 		 SpecNum=1; SpentSkills=1; fi
#	    if [ "$LEVEL" -ge "4" ] && [ "$LEVEL" -le "6" ]; 	then WeapSpec="_(Specialist)"; 	 SpecNum=2; SpentSkills=2; SpecHitBonus=1; SpecDamageBonus=2; fi 
#	    if [ "$LEVEL" -ge "7" ] && [ "$LEVEL" -le "9" ]; 	then WeapSpec="_(Master)"; 	 SpecNum=3; SpentSkills=3; SpecHitBonus=3; SpecDamageBonus=3; fi 
#	    if [ "$LEVEL" -ge "10" ] && [ "$LEVEL" -le "15" ]; 	then WeapSpec="_(High_Master)";  SpecNum=4; SpentSkills=4; SpecHitBonus=3; SpecDamageBonus=3; fi  
#	    if [ "$LEVEL" -ge "16" ]; 				then WeapSpec="_(Grand_Master)"; SpecNum=5; SpentSkills=5; SpecHitBonus=3; SpecDamageBonus=3; fi
#	else
#	    if [ "$LEVEL" -le "3" ]; 				then WeapSpec=""; 		 SpecNum=1; SpentSkills=1; fi
#	    if [ "$LEVEL" -ge "4" ] && [ "$LEVEL" -le "6" ]; 	then WeapSpec="_(Specialist)"; 	 SpecNum=2; SpentSkills=2; SpecHitBonus=0; SpecDamageBonus=0; fi 
#	    if [ "$LEVEL" -ge "7" ] && [ "$LEVEL" -le "9" ]; 	then WeapSpec="_(Master)"; 	 SpecNum=3; SpentSkills=3; SpecHitBonus=0; SpecDamageBonus=0; fi 
#	    if [ "$LEVEL" -ge "10" ] && [ "$LEVEL" -le "15" ]; 	then WeapSpec="_(High_Master)";  SpecNum=4; SpentSkills=4; SpecHitBonus=0; SpecDamageBonus=0; fi  
#	    if [ "$LEVEL" -ge "16" ]; 				then WeapSpec="_(Grand_Master)"; SpecNum=5; SpentSkills=5; SpecHitBonus=0; SpecDamageBonus=0; fi; fi

# Select the weapon the fighter is going to specialize in
if [ "$WeaponSpecialization" = "0" ] && [ "$SIZE" = "M" ]; then
for index in `shuf --input-range=0-$(( ${#M_Warrior_Weapon_ARRAY[*]} - 1 )) | head -1` 
	do    SpecializedWeapon=${M_Warrior_Weapon_ARRAY[$index]}; 
	SpecWeapon=("$SpecializedWeapon$WeapSpec");done; Wpn1="$SpecializedWeapon"; fi
if [ "$WeaponSpecialization" = "0" ] && [ "$SIZE" = "L" ]; then 
for index in `shuf --input-range=0-$(( ${#L_Warrior_Weapon_ARRAY[*]} - 1 )) | head -1` 
	do    SpecializedWeapon=${L_Warrior_Weapon_ARRAY[$index]};
	SpecWeapon=("$SpecializedWeapon$WeapSpec");done; Wpn1="$SpecializedWeapon"; fi

#Select the other normal weapons
if [ "$WeaponSpecialization" != "0" ] && [ "$SIZE" = "M" ]; then
for index in `shuf --input-range=0-$(( ${#M_Warrior_Weapon_ARRAY[*]} - 1 )) | head -1` 
	do    Wpn1=${M_Warrior_Weapon_ARRAY[$index]};done; fi
if [ "$WeaponSpecialization" != "0" ] && [ "$SIZE" = "L" ]; then 
for index in `shuf --input-range=0-$(( ${#L_Warrior_Weapon_ARRAY[*]} - 1 )) | head -1` 
	do    Wpn1=${L_Warrior_Weapon_ARRAY[$index]};done; fi; fi

###################################################################################################################################################################
# END WARRIOR SPECIAL CASE ########################################################################################################################################

if [ "$ATYPE" = "Wizard" ] && [ "$SIZE" = "M" ]; then 
	for index in `shuf --input-range=0-$(( ${#M_Wizard_Weapon_ARRAY[*]} - 1 )) | head -1`
		do    Wpn1=${M_Wizard_Weapon_ARRAY[$index]} ;done; fi
if [ "$ATYPE" = "Wizard" ] && [ "$SIZE" = "L" ]; then 
	for index in `shuf --input-range=0-$(( ${#L_Wizard_Weapon_ARRAY[*]} - 1 )) | head -1`
		do    Wpn1=${L_Wizard_Weapon_ARRAY[$index]} ;done; fi
if [ "$ATYPE" = "Rogue" ] && [ "$SIZE" = "M" ]; then 
	for index in `shuf --input-range=0-$(( ${#M_Rogue_Weapon_ARRAY[*]} - 1 )) | head -1`
		do    Wpn1=${M_Rogue_Weapon_ARRAY[$index]} ;done; fi
if [ "$ATYPE" = "Rogue" ] && [ "$SIZE" = "L" ]; then 
	for index in `shuf --input-range=0-$(( ${#L_Rogue_Weapon_ARRAY[*]} - 1 )) | head -1`
		do    Wpn1=${L_Rogue_Weapon_ARRAY[$index]} ;done; fi
if [ "$ATYPE" = "Priest" ]; then  # (Tables are the same for all sizes)
	for index in `shuf --input-range=0-$(( ${#Priest_Weapon_ARRAY[*]} - 1 )) | head -1`
		do    Wpn1=${Priest_Weapon_ARRAY[$index]} ;done; fi
if [ "$CLASS" = "Monk" ]; then  # (Tables are the same for all sizes)
	for index in `shuf --input-range=0-$(( ${#Monk_Weapon_ARRAY[*]} - 1 )) | head -1`
		do    Wpn1=${Monk_Weapon_ARRAY[$index]} ;done; fi

#Generate random sizes for Bolas - Here's as good a place to do it as any...
let "Bol = $RANDOM % 3 + 1";	let "LgBol = $RANDOM % 4 + 4";	let "BR = $RANDOM % 2 + 1";	let "LgBR = $RANDOM % 3 + 4"

function WeaponList {		# "Functionalizing" this block allows it to be reused to generate followers' weaponry, now nicely alphabetized!

      case "$Wpn1" in
	Bastard_Sword)		A0="0";  A1="0"; A2="0"; A3="0"; W_Att=("1d8"  "1d10" "1d12" "4d4"  "6 "  "Weight:3.5 "  "Weight:7.0 "  "Style: Slashing"    "Type: STR"  "Blade") 		;;
	Battle-Axe)		A0="0";  A1="0"; A2="0"; A3="0"; W_Att=("1d8"  "1d10" "1d8"  "1d10" "7 "  "Weight:2.0 "  "Weight:5.0 "  "Style: Slashing"    "Type: STR"  "Blade") 		;;
	Bola)			A0="0";  A1="0"; A2="0"; A3="0"; W_Att=("1d3"  "1d4"  "1d2"  "1d3"  "8 "  "Weight:$Bol".0" "  "Weight:$LgBol".0" "  "Style: Bludgeoning" "Type: DEX" "Bola") 	;;
	Boomerang)		A0="0";  A1="0"; A2="0"; A3="0"; W_Att=("1d4"  "1d6"  "1d3"  "1d4"  "6 "  "Weight:$BR".0" "  "Weight:$LgBR".0" "  "Style: Bludgeoning" "Type: DEX" "Boomerang") ;;
	Bowie_Knife)		A0="0";  A1="0"; A2="0"; A3="1"; W_Att=("1d3"  "1d6"  "1d2"  "1d4"  "2 "  "Weight:1.0 "  "Weight:2.0 "  "Style: Slashing"    "Type: STR"  "Blade") 		;;
	Broad_Sword)		A0="0";  A1="0"; A2="1"; A3="0"; W_Att=("2d4"  "2d4"  "1d6"  "1d8"  "5 "  "Weight:3.0 "  "Weight:5.0 "  "Style: Slashing"    "Type: STR"  "Blade") 		;;
	Bullwhip)		A0="0";  A1="0"; A2="0"; A3="0"; W_Att=("1d2"  "1d3"  "1"    "1d2"  "8 "  "Weight:2.0 "  "Weight:3.0 "  "Style: Slashing"    "Type: DEX"  "Whip") 		;;
	Chuth\'ka)		A0="0";  A1="0"; A2="0"; A3="0"; W_Att=("1d8"  "1d8"  "1d10" "1d10" "5 "  "Weight:3.0 "  "Weight:3.0 "  "Style: Slashing"    "Type: STR"  "Blade") 		;;
	Claymore)		A0="0";  A1="0"; A2="0"; A3="0"; W_Att=("2d4"  "1d10" "2d8"  "3d4"  "10 " "Weight:6.25 " "Weight:10.0 " "Style: Slashing"    "Type: STR"  "Blade") 		;;
	Club)			A0="0";  A1="0"; A2="0"; A3="0"; W_Att=("1d6"  "1d8"  "1d3"  "1d6"  "4 "  "Weight:2.5 "  "Weight:5.0 "  "Style: Bludgeoning" "Type: STR"  "Mass") 		;;
	Composite_Longbow)	A0="0";  A1="0"; A2="0"; A3="0"; W_Att=("---"  "---"  "---"  "---"  "7 "  "Weight:3.0 "  "Weight:6.0 "  "Style: Ranged"      "Type: STR"  "CBow") 		;;
	Composite_Shortbow)	A0="0";  A1="0"; A2="0"; A3="0"; W_Att=("---"  "---"  "---"  "---"  "6 "  "Weight:2.0 "  "Weight:4.0 "  "Style: Ranged"      "Type: STR"  "CBow") 		;;
	Cutlass)		A0="0";  A1="0"; A2="0"; A3="0"; W_Att=("1d6"  "1d8"  "1d8"  "1d10" "5 "  "Weight:2.0 "  "Weight:4.0 "  "Style: Slashing"    "Type: DEX"  "Blade") 		;;
	Dagger)			A0="0";  A1="0"; A2="0"; A3="0"; W_Att=("1d4"  "1d6"  "1d3"  "1d4"  "2 "  "Weight:1.0 "  "Weight:3.0 "  "Style: Piercing"    "Type: DEX"  "Blade") 		;;
	Dart)			A0="0";  A1="0"; A2="0"; A3="0"; W_Att=("1d3"  "1d4"  "1d2"  "1d3"  "2 "  "Weight:1.0 "  "Weight:2.0 "  "Style: Piercing"    "Type: DEX"  "Thrown") 		;;
	Dirk)			A0="0";  A1="0"; A2="0"; A3="0"; W_Att=("1d4"  "1d6"  "1d3"  "1d4"  "2 "  "Weight:1.5 "  "Weight:2.5 "  "Style: Piercing"    "Type: DEX"  "Blade") 		;;
	Dwarven_Battle-Axe)	A0="0";  A1="0"; A2="0"; A3="0"; W_Att=("1d12" "1d12" "1d8"  "1d8"  "9 "  "Weight:8.0 "  "Weight:8.0 "  "Style: Slashing"    "Type: STR"  "Blade") 		;;
	Falcata)		A0="0";  A1="0"; A2="0"; A3="0"; W_Att=("1d8"  "1d10" "1d8"  "1d10" "4 "  "Weight:2.5 "  "Weight:5.0 "  "Style: Slashing"    "Type: STR"  "Angellican") 	;;
	Flail)			A0="1";  A1="0"; A2="0"; A3="0"; W_Att=("1d6"  "1d8"  "1d4"  "1d6"  "6 "  "Weight:2.5 "  "Weight:6.0 "  "Style: Bludgeoning" "Type: STR"  "Mass") 		;;
	Gladius)		A0="0";  A1="2"; A2="0"; A3="0"; W_Att=("1d8"  "1d8"  "1d6"  "1d8"  "3 "  "Weight:2.0 "  "Weight:4.0 "  "Style: Piercing"    "Type: STR"  "Blade") 		;;
	Greatsword)		A0="0";  A1="0"; A2="0"; A3="0"; W_Att=("1d12" "2d8"  "3d6"  "4d6"  "12 " "Weight:7.0 "  "Weight:12.0 " "Style: Slashing"    "Type: STR"  "Blade") 		;;
	Hand_Crossbow)		A0="1";  A1="0"; A2="0"; A3="0"; W_Att=("1d4"  "Can\'t""1d4" "Use"  "5 "  "Weight:3.0 "  "Weight:3.0 "  "Sytle: Ranged"      "Type: DEX"  "XBow")		;;
	Hatchet)		A0="0";  A1="0"; A2="0"; A3="0"; W_Att=("1d6"  "1d8"  "1d4"  "1d6"  "3 "  "Weight:2.0 "  "Weight:4.0 "  "Style: Slashing"    "Type: STR"  "Blade") 		;;
	Heavy_Crossbow)		A0="10"; A1="12";A2="10";A3="12";W_Att=("1d8"  "1d12" "1d6"  "1d10" "10 " "Weight:14.0 " "Weight:20.0 " "Style: Ranged"      "Type: DEX"  "XBow") 		;;
	Iuak)			A0="0";  A1="0"; A2="0"; A3="0"; W_Att=("1d4"  "1d6"  "1d6"  "1d8"  "4 "  "Weight:3.0 "  "Weight:5.0 "  "Style: Slashing"    "Type: STR"  "Iuak") 		;;
	Javelin)		A0="0";  A1="0"; A2="0"; A3="0"; W_Att=("1d4"  "1d6"  "1d4"  "1d6"  "4 "  "Weight:2.0 "  "Weight:3.0 "  "Style: Piercing"    "Type: DEX"  "Thrown") 		;;
	Katana)			A0="0";  A1="0"; A2="0"; A3="0"; W_Att=("1d10" "1d12" "1d8"  "1d10" "5 "  "Weight:2.0 "  "Weight:5.0 "  "Style: Slashing"    "Type: DEX"  "Blade") 		;;
	Katar)			A0="0";  A1="0"; A2="0"; A3="0"; W_Att=("1d6"  "1d8"  "1d4"  "1d6"  "3 "  "Weight:1.5 "  "Weight:4.0 "  "Style: Piercing"    "Type: DEX"  "Blade") 		;;
	Khopesh)		A0="0";  A1="0"; A2="0"; A3="0"; W_Att=("2d4"  "2d4"  "1d6"  "1d8"  "9 "  "Weight:1.5 "  "Weight:3.0 "  "Style: Slashing"    "Type: STR"  "Blade") 		;;
	Kukri)			A0="0";  A1="0"; A2="0"; A3="0"; W_Att=("1d6"  "1d8"  "1d6"  "1d8"  "3 "  "Weight:2.0 "  "Weight:4.0 "  "Style: Slashing"    "Type: STR"  "Blade")		;;
	Light_Crossbow)		A0="6";  A1="10";A2="6"; A3="10";W_Att=("1d6"  "1d8"  "1d4"  "1d6"  "7 "  "Weight:7.0 "  "Weight:15.0 " "Style: Ranged"      "Type: DEX"  "XBow") 		;;
	Longbow)		A0="0";  A1="0"; A2="0"; A3="0"; W_Att=("---"  "---"  "---"  "---"  "8 "  "Weight:3.0 "  "Weight:6.0 "  "Style: Ranged"      "Type: DEX"  "Bow") 		;;
	Longsword)		A0="0";  A1="0"; A2="0"; A3="0"; W_Att=("1d8"  "1d10" "1d12" "1d12" "5 "  "Weight:3.5 "  "Weight:7.0 "  "Style: Slashing"    "Type: STR"  "Blade") 		;;
	Mace)			A0="1";  A1="0"; A2="0"; A3="0"; W_Att=("1d6"  "1d8"  "1d6"  "1d8"  "4 "  "Weight:3.0 "  "Weight:7.0 "  "Style: Bludgeoning" "Type: STR"  "Mass") 		;;
	Meteor_Hammer)		A0="0";  A1="0"; A2="0"; A3="0"; W_Att=("1d8"  "1d10" "1d6"  "1d8"  "5 "  "Weight:6.0 "  "Weight:12.0 " "Style: Bludgeoning" "Type: DEX"  "Mass") 		;;
	Morning_Star)		A0="1";  A1="0"; A2="0"; A3="0"; W_Att=("1d6"  "1d8"  "1d4"  "1d6"  "5 "  "Weight:3.0 "  "Weight:7.0 "  "Style: Bludgeoning" "Type: STR"  "Mass") 		;;
	Pike_Maul)		A0="0";  A1="0"; A2="0"; A3="0"; W_Att=("Can\'t""2d10""Use"  "3d8"  "15"  "Weight:25.0 " "Weight:25.0 " "Style: Bludgeoning" "Type: STR"  "Mass") 		;;
	Quarterstaff)		A0="0";  A1="0"; A2="0"; A3="0"; W_Att=("1d6"  "1d8"  "1d6"  "1d8"  "4 "  "Weight:4.0 "  "Weight:7.0 "  "Style: Bludgeoning" "Type: STR"  "Staff") 		;;
	Rapier)			A0="1";  A1="1"; A2="1"; A3="1"; W_Att=("1d6"  "1d8"  "1d8"  "1d10" "3 "  "Weight:2.0 "  "Weight:3.0 "  "Style: Piercing"    "Type: DEX"  "Blade") 		;;
	Sabre)			A0="1";  A1="1"; A2="1"; A3="1"; W_Att=("1d6"  "1d8"  "1d8"  "1d10" "4 "  "Weight:2.5 "  "Weight:5.0 "  "Style: Slashing"    "Type: DEX"  "Blade") 		;;
	Scimitar)		A0="0";  A1="0"; A2="0"; A3="0"; W_Att=("1d8"  "1d10" "1d8"  "1d10" "5 "  "Weight:2.5 "  "Weight:4.5 "  "Style: Slashing"    "Type: DEX"  "Blade") 		;;
	Shortbow)		A0="0";  A1="0"; A2="0"; A3="0"; W_Att=("---"  "---"  "---"  "---"  "7 "  "Weight:2.0 "  "Weight:4.0 "  "Style: Ranged"      "Type: DEX"  "Bow") 		;;
	Short_Sword)		A0="0";  A1="0"; A2="0"; A3="0"; W_Att=("1d6"  "1d8"  "1d8"  "1d8"  "3 "  "Weight:1.5 "  "Weight:2.5 "  "Style: Slashing"    "Type: STR"  "Blade") 		;;
	Smallsword)		A0="0";  A1="0"; A2="0"; A3="0"; W_Att=("1d8"  "1d10" "1d6"  "1d8"  "4 "  "Weight:1.5 "  "Weight:3.0 "  "Style: Slashing"    "Type: DEX"  "Blade") 		;;
	Stiletto)		A0="0";  A1="0"; A2="0"; A3="0"; W_Att=("1d3"  "1d4"  "1d2"  "1d3"  "2 "  "Weight:1.0 "  "Weight:2.0 "  "Style: Piercing"    "Type: DEX"  "Blade")		;;
	Two-Handed_Warhammer)	A0="2";  A1="2"; A2="0"; A3="0"; W_Att=("1d6"  "2d4"  "1d6"  "2d4"  "8 "  "Weight:6.0 "  "Weight:9.0 "  "Style: Bludgeoning" "Type: STR " "Mass") 		;;
	Ulu)			A0="0";  A1="0"; A2="0"; A3="0"; W_Att=("1d3"  "1d3"  "1d2"  "1d4"  "3 "  "Weight:1.0 "  "Weight:3.0 "  "Style: Slashing"    "Type: DEX"  "Blade") 		;;
	Warhammer)		A0="1";  A1="1"; A2="0"; A3="0"; W_Att=("1d4"  "1d6"  "1d4"  "1d6"  "4 "  "Weight:2.0 "  "Weight:5.0 "  "Style: Bludgeoning" "Type: STR"  "Mass") 		;;
    esac
}

#Call the WeaponList function
WeaponList

# Determine if the character has a magic weapon by level:
# IS WEAPON 1 MAGIC?
    case "$LEVEL" in 
	1)	:				;;	#Yeah, nuh.
	2)	let "Magic1 = $RANDOM % 10 + 1" ;;
	3)	let "Magic1 = $RANDOM % 8 + 1"  ;;
	4)	let "Magic1 = $RANDOM % 6 + 1"  ;;
	5)	let "Magic1 = $RANDOM % 4 + 1"  ;;
	*)	let "Magic1 = 1" 		;;	#Guaranteed, yes.
    esac

# HOW MAGIC?
Weapon_Bonus1=0
	if [ "$Magic1" = "1" ]; then

    case "$LEVEL" in 
	2)	let "Weapon_Bonus1 = 1"			;;
	3|4|5)	let "Weapon_Bonus1 = $RANDOM % 2 + 1"	;;
	6|7|8)	let "Weapon_Bonus1 = $RANDOM % 3 + 1"	;;
	*)	let "Weapon_Bonus1 = $RANDOM % 4 + 1"	;;
    esac; fi

# Determine if magic weapon has a special property or effect,
# then assign that property to the weapon.
# IS WEAPON 1 *SHINY*?
	if [ "$Magic1" = "1" ]; then let "Shiny1 = $RANDOM % 7 + 1"; 
	if [ "$Shiny1" = 1 ] && [ "${W_Att[9]}" = "Blade" ]; then for index in `shuf --input-range=0-$(( ${#Blade_ShinyARRAY[*]} - 1 )) | head -1`
		do    SHINYTYPE1=${Blade_ShinyARRAY[$index]};done; fi
	if [ "$Shiny1" = 1 ] && [ "${W_Att[9]}" = "Mass" ]; then for index in `shuf --input-range=0-$(( ${#Mass_ShinyARRAY[*]} - 1 )) | head -1`
		do    SHINYTYPE1=${Mass_ShinyARRAY[$index]};done; fi
	if [ "$Shiny1" = 1 ] && [ "${W_Att[9]}" = "CBow" ]; then for index in `shuf --input-range=0-$(( ${#CBow_ShinyARRAY[*]} - 1 )) | head -1`
		do    SHINYTYPE1=${CBow_ShinyARRAY[$index]};done; fi
	if [ "$Shiny1" = 1 ] && [ "${W_Att[9]}" = "Whip" ]; then for index in `shuf --input-range=0-$(( ${#Whip_ShinyARRAY[*]} - 1 )) | head -1`
		do    SHINYTYPE1=${Whip_ShinyARRAY[$index]};done; fi
	if [ "$Shiny1" = 1 ] && [ "${W_Att[9]}" = "Thrown" ]; then for index in `shuf --input-range=0-$(( ${#Thrown_ShinyARRAY[*]} - 1 )) | head -1`
		do    SHINYTYPE1=${Thrown_ShinyARRAY[$index]};done; fi
	if [ "$Shiny1" = 1 ] && [ "${W_Att[9]}" = "Bow" ]; then for index in `shuf --input-range=0-$(( ${#Bow_ShinyARRAY[*]} - 1 )) | head -1`
		do    SHINYTYPE1=${Bow_ShinyARRAY[$index]};done; fi
	if [ "$Shiny1" = 1 ] && [ "${W_Att[9]}" = "XBow" ]; then for index in `shuf --input-range=0-$(( ${#XBow_ShinyARRAY[*]} - 1 )) | head -1`
		do    SHINYTYPE1=${XBow_ShinyARRAY[$index]};done; fi
	if [ "$Shiny1" = 1 ] && [ "${W_Att[9]}" = "Ammo" ]; then for index in `shuf --input-range=0-$(( ${#Ammo_ShinyARRAY[*]} - 1 )) | head -1`
		do    SHINYTYPE1=${Ammo_ShinyARRAY[$index]};done; fi
	if [ "$SHINYTYPE1" = "Slayer" ]; then for index in `shuf --input-range=0-$(( ${#SlayerARRAY[*]} - 1 )) | head -1`
		do    SHINYTYPE1=${SlayerARRAY[$index]};done; fi; fi

# First Weapon Math and Adjustments - Block Works. Do Adjustments for ranged weapons here! Wheee!
# Category that gets to add STR bonuses to damage
	if [ "${W_Att[9]}" != "Bow" ] || [ "${W_Att[9]}" != "XBow" ] || [ "${W_Att[9]}" != "Whip" ]; then
	Wep1_PlusA=$(( $Weapon_Bonus1 + $A0 + ${str[1]}))
	Wep1_PlusB=$(( $Weapon_Bonus1 + $A2 + ${str[1]}))
	Wep1_PlusC=$(( $Weapon_Bonus1 + $A1 + ${str[1]}))
	Wep1_PlusD=$(( $Weapon_Bonus1 + $A3 + ${str[1]})); fi

#Category that does NOT add STR bonus to damage
	if [ "${W_Att[9]}" = "Bow" ] || [ "${W_Att[9]}" = "XBow" ] || [ "${W_Att[9]}" = "Whip" ]  ; then 
	Wep1_PlusA=$(( $Weapon_Bonus1 + $A0 ))
	Wep1_PlusB=$(( $Weapon_Bonus1 + $A2 ))
	Wep1_PlusC=$(( $Weapon_Bonus1 + $A1 ))
	Wep1_PlusD=$(( $Weapon_Bonus1 + $A3 )); fi

	if [ "$Weapon_Bonus1" = "0" ]; then PlusRank1=""; fi
	if [ "$PlusRank1" = "0" ]; then PlusRank1=""; fi
	if [ "$Weapon_Bonus1" != "0" ]; then PlusRank1="+$Weapon_Bonus1 "; fi
	if [ "$Weapon_Bonus1" = "0" ]; then Wep1_Plus="";fi
	if [ "$Wep1_PlusA" != "0" ]; then Wep1_PlusA="+$Wep1_PlusA"; fi
	if [ "$Wep1_PlusB" != "0" ]; then Wep1_PlusB="+$Wep1_PlusB"; fi
	if [ "$Wep1_PlusC" != "0" ]; then Wep1_PlusC="+$Wep1_PlusC"; fi
	if [ "$Wep1_PlusD" != "0" ]; then Wep1_PlusD="+$Wep1_PlusD"; fi
	if [ "$Wep1_PlusA" = "0" ]; then Wep1_PlusA=""; fi
	if [ "$Wep1_PlusB" = "0" ]; then Wep1_PlusB=""; fi
	if [ "$Wep1_PlusC" = "0" ]; then Wep1_PlusC=""; fi
	if [ "$Wep1_PlusD" = "0" ]; then Wep1_PlusD=""; fi

ABonus="+$Weapon_Bonus1" 		#This allows arrow damage to be calculated and formatted correctly

#Calculate Total Attack Bonus
if [ "${W_Att[8]}" = "Type: STR" ]; then TAB=$(( $BMAB + $PlusRank1 + 0 )); fi
if [ "${W_Att[8]}" = "Type: DEX" ]; then TAB=$(( $BDAB + $PlusRank1 + 0 )); fi

#Weapon Materials
W_Material=""

if [ "$Weapon_Materials" = "Y" ]; then 
if [ "${W_Att[9]}" = "Angellican" ]; then let "WMatTypeCheck = $RANDOM % 100 + 1"
	if [ "$WMatTypeCheck" -ge "1" ] && [ "$WMatTypeCheck" -le "65" ]; then W_Material="Bronze "; WMat_Mod="-1"; fi
	if [ "$WMatTypeCheck" -ge "66" ] && [ "$WMatTypeCheck" -le "90" ]; then W_Material="Iron "; WMat_Mod="0"; fi
	if [ "$WMatTypeCheck" -ge "91" ] && [ "$WMatTypeCheck" -le "94" ]; then W_Material="Copper "; WMat_Mod="-2"; fi
	if [ "$WMatTypeCheck" -ge "95" ] && [ "$WMatTypeCheck" -le "97" ]; then W_Material="Silver "; WMat_Mod="-2"; fi
	if [ "$WMatTypeCheck" -ge "97" ] && [ "$WMatTypeCheck" -le "98" ]; then W_Material="Gold "; WMat_Mod="-4";  fi
	if [ "$WMatTypeCheck" = "99" ]; then W_Material="Mithril "; WMat_Mod="+3"; fi
	if [ "$WMatTypeCheck" = "100" ]; then W_Material="Lunar "; WMat_Mod="+4"; fi; fi

if [ "${W_Att[9]}" = "Blade" ]; then let "WMatTypeCheck = $RANDOM % 100 + 1"
	if [ "$WMatTypeCheck" -ge "1" ] && [ "$WMatTypeCheck" -le "65" ]; then W_Material="Steel "; WMat_Mod="0"; fi
	if [ "$WMatTypeCheck" -ge "66" ] && [ "$WMatTypeCheck" -le "90" ]; then W_Material="Iron "; WMat_Mod="-1"; fi
	if [ "$WMatTypeCheck" -ge "91" ] && [ "$WMatTypeCheck" -le "92" ]; then W_Material="Bronze "; WMat_Mod="-2"; fi
	if [ "$WMatTypeCheck" -ge "93" ] && [ "$WMatTypeCheck" -le "94" ]; then W_Material="Copper "; WMat_Mod="-3"; fi
	if [ "$WMatTypeCheck" = "95" ]; then W_Material="Silver "; WMat_Mod="-2"; fi
	if [ "$WMatTypeCheck" = "96" ]; then W_Material="Gold "; WMat_Mod="-4";  fi
	if [ "$WMatTypeCheck" = "97" ]; then W_Material="Platinum "; WMat_Mod="-4"; fi
	if [ "$WMatTypeCheck" = "98" ]; then W_Material="Cinnibral-Inlaid "; WMat_Mod="0"; fi
	if [ "$WMatTypeCheck" = "99" ]; then W_Material="Adamantine "; WMat_Mod="+2"; fi
	if [ "$WMatTypeCheck" = "100" ]; then W_Material="Mithril "; WMat_Mod="+3"; fi; fi

if [ "${W_Att[9]}" = "Mass" ]; then let "WMatTypeCheck = $RANDOM % 100 + 1"
	if [ "$WMatTypeCheck" -ge "1" ] && [ "$WMatTypeCheck" -le "65" ]; then W_Material="Steel "; WMat_Mod="0"; fi
	if [ "$WMatTypeCheck" -ge "66" ] && [ "$WMatTypeCheck" -le "90" ]; then W_Material="Iron "; WMat_Mod="-1"; fi
	if [ "$WMatTypeCheck" -ge "91" ] && [ "$WMatTypeCheck" -le "92" ]; then W_Material="Bronze "; WMat_Mod="-2"; fi
	if [ "$WMatTypeCheck" -ge "93" ] && [ "$WMatTypeCheck" -le "94" ]; then W_Material="Copper "; WMat_Mod="-3"; fi
	if [ "$WMatTypeCheck" = "95" ]; then W_Material="Silver "; WMat_Mod="-2"; fi
	if [ "$WMatTypeCheck" = "96" ]; then W_Material="Gold "; WMat_Mod="-4";  fi
	if [ "$WMatTypeCheck" = "97" ]; then W_Material="Platinum "; WMat_Mod="-4"; fi
	if [ "$WMatTypeCheck" = "98" ]; then W_Material="Cinnibral-Inlaid "; WMat_Mod="0"; fi
	if [ "$WMatTypeCheck" = "99" ]; then W_Material="Adamantine "; WMat_Mod="+2"; fi
	if [ "$WMatTypeCheck" = "100" ]; then W_Material="Mithril "; WMat_Mod="+3"; fi; fi

if [ "${W_Att[9]}" = "Staff" ]; then let "WMatTypeCheck = $RANDOM % 100 + 1"
	if [ "$WMatTypeCheck" -ge "1" ] && [ "$WMatTypeCheck" -le "65" ]; then W_Material="Oak "; WMat_Mod="0"; fi
	if [ "$WMatTypeCheck" -ge "66" ] && [ "$WMatTypeCheck" -le "90" ]; then W_Material="Black Oak "; WMat_Mod="-1"; fi
	if [ "$WMatTypeCheck" -ge "91" ] && [ "$WMatTypeCheck" -le "92" ]; then W_Material="Yew "; WMat_Mod="-2"; fi
	if [ "$WMatTypeCheck" -ge "93" ] && [ "$WMatTypeCheck" -le "94" ]; then W_Material="Ash "; WMat_Mod="-3"; fi
	if [ "$WMatTypeCheck" = "95" ]; then W_Material="Dragon Bone "; WMat_Mod="-2"; fi
	if [ "$WMatTypeCheck" = "96" ]; then W_Material="Steel "; WMat_Mod="-4";  fi
	if [ "$WMatTypeCheck" = "97" ]; then W_Material="Iron "; WMat_Mod="-4"; fi
	if [ "$WMatTypeCheck" = "98" ]; then W_Material="Cinnibral-Inlaid "; WMat_Mod="0"; fi
	if [ "$WMatTypeCheck" = "99" ]; then W_Material="Adamantine "; WMat_Mod="+2"; fi
	if [ "$WMatTypeCheck" = "100" ]; then W_Material="Mithril "; WMat_Mod="+3"; fi; fi

if [ "${W_Att[9]}" = "Whip" ]; then let "WMatTypeCheck = $RANDOM % 100 + 1"
	if [ "$WMatTypeCheck" -ge "1" ] && [ "$WMatTypeCheck" -le "90" ]; then W_Material="Leather "; WMat_Mod="0"; fi
	if [ "$WMatTypeCheck" -ge "91" ] && [ "$WMatTypeCheck" -le "92" ]; then W_Material="Steel Cable "; WMat_Mod="+1"; fi
	if [ "$WMatTypeCheck" -ge "93" ] && [ "$WMatTypeCheck" -le "95" ]; then W_Material="Steel Chain "; WMat_Mod="+1"; fi
	if [ "$WMatTypeCheck" = "96" ]; then W_Material="Iron Chain "; WMat_Mod="+1"; fi
	if [ "$WMatTypeCheck" = "97" ]; then W_Material="Silver Chain "; WMat_Mod="+1";  fi
	if [ "$WMatTypeCheck" = "98" ]; then W_Material="Bloodwood Bark "; WMat_Mod="+1"; fi
	if [ "$WMatTypeCheck" = "99" ]; then W_Material="Troll Hide "; WMat_Mod="+2"; fi
	if [ "$WMatTypeCheck" = "100" ]; then W_Material="Dragon Hide "; WMat_Mod="+3"; fi; fi

if [ "${W_Att[9]}" = "Javelin" ]; then let "WMatTypeCheck = $RANDOM % 100 + 1"
	if [ "$WMatTypeCheck" -ge "1" ] && [ "$WMatTypeCheck" -le "65" ]; then W_Material="Steel "; WMat_Mod="0"; fi
	if [ "$WMatTypeCheck" -ge "66" ] && [ "$WMatTypeCheck" -le "90" ]; then W_Material="Iron "; WMat_Mod="-1"; fi
	if [ "$WMatTypeCheck" -ge "91" ] && [ "$WMatTypeCheck" -le "92" ]; then W_Material="Bronze "; WMat_Mod="-2"; fi
	if [ "$WMatTypeCheck" -ge "93" ] && [ "$WMatTypeCheck" -le "94" ]; then W_Material="Copper "; WMat_Mod="-3"; fi
	if [ "$WMatTypeCheck" = "95" ]; then W_Material="Silver "; WMat_Mod="-2"; fi
	if [ "$WMatTypeCheck" = "96" ]; then W_Material="Gold "; WMat_Mod="-4";  fi
	if [ "$WMatTypeCheck" = "97" ]; then W_Material="Platinum "; WMat_Mod="-4"; fi
	if [ "$WMatTypeCheck" = "98" ]; then W_Material="Cinnibral-Inlaid "; WMat_Mod="0"; fi
	if [ "$WMatTypeCheck" = "99" ]; then W_Material="Adamantine "; WMat_Mod="+2"; fi
	if [ "$WMatTypeCheck" = "100" ]; then W_Material="Mithril "; WMat_Mod="+3"; fi; fi

if [ "${W_Att[9]}" = "Bola" ]; then let "WMatTypeCheck = $RANDOM % 100 + 1"
	if [ "$WMatTypeCheck" -ge "1" ] && [ "$WMatTypeCheck" -le "65" ]; then W_Material="Steel "; WMat_Mod="0"; fi
	if [ "$WMatTypeCheck" -ge "66" ] && [ "$WMatTypeCheck" -le "90" ]; then W_Material="Iron "; WMat_Mod="-1"; fi
	if [ "$WMatTypeCheck" -ge "91" ] && [ "$WMatTypeCheck" -le "92" ]; then W_Material="Bronze "; WMat_Mod="-2"; fi
	if [ "$WMatTypeCheck" -ge "93" ] && [ "$WMatTypeCheck" -le "94" ]; then W_Material="Copper "; WMat_Mod="-3"; fi
	if [ "$WMatTypeCheck" = "95" ]; then W_Material="Granite "; WMat_Mod="-2"; fi
	if [ "$WMatTypeCheck" = "96" ]; then W_Material="Marble "; WMat_Mod="-4";  fi
	if [ "$WMatTypeCheck" = "97" ]; then W_Material="Basalt "; WMat_Mod="-4"; fi
	if [ "$WMatTypeCheck" = "98" ]; then W_Material="Cinnibral-Inlaid "; WMat_Mod="0"; fi
	if [ "$WMatTypeCheck" = "99" ]; then W_Material="Adamantine "; WMat_Mod="+2"; fi
	if [ "$WMatTypeCheck" = "100" ]; then W_Material="Dragon Bone "; WMat_Mod="+3"; fi; fi

if [ "${W_Att[9]}" = "Boomerang" ]; then let "WMatTypeCheck = $RANDOM % 100 + 1"
	if [ "$WMatTypeCheck" -ge "1" ] && [ "$WMatTypeCheck" -le "65" ]; then W_Material="Steel "; WMat_Mod="0"; fi
	if [ "$WMatTypeCheck" -ge "66" ] && [ "$WMatTypeCheck" -le "90" ]; then W_Material="Iron "; WMat_Mod="-1"; fi
	if [ "$WMatTypeCheck" -ge "91" ] && [ "$WMatTypeCheck" -le "92" ]; then W_Material="Bronze "; WMat_Mod="-2"; fi
	if [ "$WMatTypeCheck" -ge "93" ] && [ "$WMatTypeCheck" -le "94" ]; then W_Material="Copper "; WMat_Mod="-3"; fi
	if [ "$WMatTypeCheck" = "95" ]; then W_Material="Silver "; WMat_Mod="-2"; fi
	if [ "$WMatTypeCheck" = "96" ]; then W_Material="Gold "; WMat_Mod="-4";  fi
	if [ "$WMatTypeCheck" = "97" ]; then W_Material="Platinum "; WMat_Mod="-4"; fi
	if [ "$WMatTypeCheck" = "98" ]; then W_Material="Cinnibral-Inlaid "; WMat_Mod="0"; fi
	if [ "$WMatTypeCheck" = "99" ]; then W_Material="Adamantine "; WMat_Mod="+2"; fi
	if [ "$WMatTypeCheck" = "100" ]; then W_Material="Mithril "; WMat_Mod="+3"; fi; fi

if [ "${W_Att[9]}" = "Bow" ] || [ "${W_Att[9]}" = "CBow" ]; then let "WMatTypeCheck = $RANDOM % 100 + 1"
	if [ "$WMatTypeCheck" -ge "1" ] && [ "$WMatTypeCheck" -le "65" ]; then W_Material="Yew "; WMat_Mod="0"; fi
	if [ "$WMatTypeCheck" -ge "66" ] && [ "$WMatTypeCheck" -le "90" ]; then W_Material="Ash "; WMat_Mod="0"; fi
	if [ "$WMatTypeCheck" -ge "91" ] && [ "$WMatTypeCheck" -le "92" ]; then W_Material="Hickory "; WMat_Mod="0"; fi
	if [ "$WMatTypeCheck" -ge "93" ] && [ "$WMatTypeCheck" -le "94" ]; then W_Material="Bloodwood "; WMat_Mod="+1"; fi
	if [ "$WMatTypeCheck" = "95" ]; then W_Material="Iron "; WMat_Mod="0"; fi
	if [ "$WMatTypeCheck" = "96" ]; then W_Material="Steel "; WMat_Mod="0";  fi
	if [ "$WMatTypeCheck" = "97" ]; then W_Material="Bronze "; WMat_Mod="0"; fi
	if [ "$WMatTypeCheck" = "98" ]; then W_Material="Cinnibral-Inlaid "; WMat_Mod="0"; fi
	if [ "$WMatTypeCheck" = "99" ]; then W_Material="Adamantine "; WMat_Mod="+2"; fi
	if [ "$WMatTypeCheck" = "100" ]; then W_Material="Mithril "; WMat_Mod="+3"; fi; fi

if [ "${W_Att[9]}" = "Iuak" ]; then let "WMatTypeCheck = $RANDOM % 100 + 1"
	if [ "$WMatTypeCheck" -ge "1" ] && [ "$WMatTypeCheck" -le "65" ]; then W_Material="Whale Bone "; WMat_Mod="0"; fi
	if [ "$WMatTypeCheck" -ge "66" ] && [ "$WMatTypeCheck" -le "90" ]; then W_Material="Iron "; WMat_Mod="0"; fi
	if [ "$WMatTypeCheck" -ge "91" ] && [ "$WMatTypeCheck" -le "94" ]; then W_Material="Steel "; WMat_Mod="0"; fi
	if [ "$WMatTypeCheck" -ge "95" ] && [ "$WMatTypeCheck" -le "96" ]; then W_Material="Bloodwood "; WMat_Mod="+1"; fi
	if [ "$WMatTypeCheck" = "97" ] && [ "$WMatTypeCheck" -le "99" ]; then W_Material="Bronze "; WMat_Mod="0"; fi
	if [ "$WMatTypeCheck" = "100" ]; then W_Material="Cinnibral-Inlaid "; WMat_Mod="0"; fi; fi

if [ "$CLASS" = "Shaman" ]; then let "WMatTypeCheck = $RANDOM % 100 + 1"
	if [ "$WMatTypeCheck" -ge "1" ] && [ "$WMatTypeCheck" -le "65" ]; then W_Material="Oaken "; WMat_Mod="0"; fi
	if [ "$WMatTypeCheck" -ge "66" ] && [ "$WMatTypeCheck" -le "90" ]; then W_Material="Granite "; WMat_Mod="0"; fi
	if [ "$WMatTypeCheck" -ge "91" ] && [ "$WMatTypeCheck" -le "94" ]; then W_Material="Flint "; WMat_Mod="0"; fi
	if [ "$WMatTypeCheck" -ge "95" ] && [ "$WMatTypeCheck" -le "97" ]; then W_Material="Obsidian "; WMat_Mod="+1"; fi
	if [ "$WMatTypeCheck" -ge "97" ] && [ "$WMatTypeCheck" -le "98" ]; then W_Material="Whale Bone "; WMat_Mod="-4";  fi
	if [ "$WMatTypeCheck" = "99" ]; then W_Material="Dragon Bone "; WMat_Mod="-2"; fi
	if [ "$WMatTypeCheck" = "100" ]; then W_Material="Bloodwood "; WMat_Mod="+1"; fi; fi; fi

#Block of racial modifiers to hit
if [ "$RACE" = "Elf" ]; then
	if [ "$Wpn1" = "Longsword" ] || [ "$Wpn1" = "Short_Sword" ] || [ "$Wpn1" = "Longbow" ] || [ "$Wpn1" = "Shortbow" ]; then  TAB=$(( $TAB + 1 )) ;fi ;fi
if [ "$RACE" = "Minotaur" ]; then
	if [ "$Wpn1" = "Warhammer" ] || [ "$Wpn1" = "Battle-Axe" ] || [ "$Wpn1" = "Dwarven_Battle-Axe" ] || [ "$Wpn1" = "Two-Handed_Warhammer" ] || [ "$Wpn1" = "Meteor_Hammer" ] || [ "$Wpn1" = "Pike_Maul" ]; then  TAB=$(( $TAB + 1 )) ;fi ;fi
if [ "$RACE" = "Selah" ]; then
	if [ "$Wpn1" = "Longbow" ] || [ "$Wpn1" = "Composite_Longbow" ] || [ "$Wpn1" = "Shortbow" ] || [ "$Wpn1" = "Composite_Shortbow" ]; then  TAB=$(( $TAB + 1 )) ;fi ;fi

####################################################################################
# DETERMINE WEAPON SKILLS BY LEVEL #################################################
Weaponset=(); 

function WeaponTracking {
#echo "We're in WeaponTracking"
if [ "$Result" = "Falcata" ]; then Falcata=$(( $Falcata + 1 )); if [ "$Falcata" -ge "2" ]; 			then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi
if [ "$Result" = "Kukri" ]; then Kukri=$(( $Kukri + 1 )); if [ "$Kukri" -ge "2" ]; 				then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi
if [ "$Result" = "Gladius" ]; then Gladius=$(( $Gladius + 1 )); if [ "$Gladius" -ge "2" ]; 			then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi
if [ "$Result" = "Short_Sword" ]; then Short_Sword=$(( $Short_Sword + 1 )); if [ "$Short_Sword" -ge "2" ]; 	then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi
if [ "$Result" = "Broad_Sword" ]; then Broad_Sword=$(( $Broad_Sword + 1 )); if [ "$Broad_Sword" -ge "2" ]; 	then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi
if [ "$Result" = "Chuth'ka" ]; then Chuthka=$(( $Chuthka + 1 )); if [ "$Chuthka" -ge "2" ]; 			then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi
if [ "$Result" = "Iuak" ]; then Iuak=$(( $Iuak + 1 )); if [ "$Iuak" -ge "2" ]; 					then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi
if [ "$Result" = "Longsword" ]; then Longsword=$(( $Longsword + 1 )); if [ "$Longsword" -ge "2" ]; 		then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi
if [ "$Result" = "Bastard_Sword" ]; then BSword=$(( $BSword + 1 )); if [ "$BSword" -ge "2" ]; 			then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi
if [ "$Result" = "Greatsword" ]; then Greatsword=$(( $Greatsword + 1 )); if [ "$Greatsword" -ge "2" ];		then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi
if [ "$Result" = "Claymore" ]; then Claymore=$(( $Claymore + 1 )); if [ "$Claymore" -ge "2" ];			then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi
if [ "$Result" = "Bowie_Knife" ]; then Bowie_Knife=$(( $Bowie_Knife + 1 )); if [ "$Bowie_Knife" -ge "2" ]; 	then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi
if [ "$Result" = "Khopesh" ]; then Khopesh=$(( $Khopesh + 1 )); if [ "$Khopesh" -ge "2" ];			then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi
if [ "$Result" = "Warhammer" ]; then Warhammer=$(( $Warhammer + 1 )); if [ "$Warhammer" -ge "2" ]; 		then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi
if [ "$Result" = "Mace" ]; then Mace=$(( $Mace + 1 )); if [ "$Mace" -ge "2" ];					then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi
if [ "$Result" = "Flail" ]; then Flail=$(( $Flail + 1 )); if [ "$Flail" -ge "2" ];				then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi
if [ "$Result" = "Morning_Star" ]; then Morning_Star=$(( $Morning_Star + 1 )); if [ "$Morning_Star" -ge "2" ]; 	then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi
if [ "$Result" = "Club" ]; then Club=$(( $Club + 1 )); if [ "$Club" -ge "2" ];					then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi
if [ "$Result" = "Hatchet" ]; then Hatchet=$(( $Hatchet + 1 )); if [ "$Hatchet" -ge "2" ];			then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi
if [ "$Result" = "Battle-Axe" ]; then Battle_Axe=$(( $Battle_Axe + 1 )); if [ "$Battle_Axe" -ge "2" ];		then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi
if [ "$Result" = "Dwarven_Battle-Axe" ]; then DBAxe=$(( $DBAxe + 1 )); if [ "$DBAxe" -ge "2" ]; 		then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi
if [ "$Result" = "Quarterstaff" ]; then Quarterstaff=$(( $Quarterstaff + 1 )); if [ "$Quarterstaff" -ge "2" ]; 	then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi
if [ "$Result" = "Smallsword" ]; then Smallsword=$(( $Smallsword + 1 )); if [ "$Smallsword" -ge "2" ];		then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi
if [ "$Result" = "Rapier" ]; then Rapier=$(( $Rapier + 1 )); if [ "$Rapier" -ge "2" ];				then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi
if [ "$Result" = "Cutlass" ]; then Cutlass=$(( $Cutlass + 1 )); if [ "$Cutlass" -ge "2" ];			then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi
if [ "$Result" = "Sabre" ]; then Sabre=$(( $Sabre + 1 )); if [ "$Sabre" -ge "2" ];				then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi
if [ "$Result" = "Scimitar" ]; then Scimitar=$(( $Scimitar + 1 )); if [ "$Scimitar" -ge "2" ];			then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi
if [ "$Result" = "Katana" ]; then Katana=$(( $Katana + 1 )); if [ "$Katana" -ge "2" ];				then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi
if [ "$Result" = "Katar" ]; then Katar=$(( $Katar + 1 )); if [ "$Katar" -ge "2" ];				then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi
if [ "$Result" = "Dagger" ]; then Dagger=$(( $Dagger + 1 )); if [ "$Dagger" -ge "2" ];				then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi 
if [ "$Result" = "Ulu" ]; then Ulu=$(( $Ulu + 1 )); if [ "$Ulu" -ge "2" ];					then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi
if [ "$Result" = "Dirk" ]; then Dirk=$(( $Dirk + 1 )); if [ "$Dirk" -ge "2" ];					then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi 
if [ "$Result" = "Dart" ]; then Dart=$(( $Dart + 1 )); if [ "$Dart" -ge "2" ];					then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi
if [ "$Result" = "Stiletto" ]; then Stiletto=$(( $Stiletto + 1 )); if [ "$Stiletto" -ge "2" ];			then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi 
if [ "$Result" = "Bullwhip" ]; then Bullwhip=$(( $Bullwhip + 1 )); if [ "$Bullwhip" -ge "2" ];			then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi
if [ "$Result" = "Meteor_Hammer" ]; then MHammer=$(( $MHammer + 1 )); if [ "$MHammer" -ge "2" ]; 		then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi 
if [ "$Result" = "Bola" ]; then Bola=$(( $Bola + 1 )); if [ "$Bola" -ge "2" ];					then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi
if [ "$Result" = "Boomerang" ]; then Boomerang=$(( $Boomerang + 1 )); if [ "$Boomerang" -ge "2" ];		then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi
if [ "$Result" = "Two-Handed_Warhammer" ]; then TwoHWarH=$(( $TwoHWarH + 1 )); if [ "$TwoHWarH" -ge "2" ];	then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi 
if [ "$Result" = "Heavy_Crossbow" ]; then Heavy_Xbow=$(( $Heavy_Xbow + 1 )); if [ "$Heavy_Xbow" -ge "2" ];	then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi 
if [ "$Result" = "Light_Crossbow" ]; then Light_Xbow=$(( $Light_Xbow + 1 )); if [ "$Light_Xbow" -ge "2" ];	then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi 
if [ "$Result" = "Hand_Crossbow" ]; then Hand_Xbow=$(( $Hand_Xbow + 1 )); if [ "$Hand_Xbow" -ge "2" ];		then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi
if [ "$Result" = "Longbow" ]; then Longbow=$(( $Longbow + 1 )); if [ "$Longbow" -ge "2" ];			then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi
if [ "$Result" = "Composite_Longbow" ]; then CompLbow=$(( $CompLbow + 1 )); if [ "$CompLbow" -ge "2" ];		then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi
if [ "$Result" = "Shortbow" ]; then Shortbow=$(( $Shortbow + 1 )); if [ "$Shortbow" -ge "2" ];			then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi
if [ "$Result" = "Composite_Shortbow" ]; then CompSbow=$(( $CompSbow + 1 )); if [ "$CompSbow" -ge "2" ];	then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi
if [ "$Result" = "Javelin" ]; then Javelin=$(( $Javelin + 1 )); if [ "$Javelin" -ge "2" ];			then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi
if [ "$Result" = "Pike_Maul" ]; then Pike_Maul=$(( $Pike_Maul + 1 )); if [ "$Pike_Maul" -ge "2" ];		then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; fi
#if [ "$Result" = "Punching_&_Wrestling" ]; then let "PunchW"+=1; if [ "$PunchW" -ge "2" ]; 	then unset Weaponset[${#Weaponset[@]}-1]; fi; fi
} 

function TABTracking {
#echo "We're in TABTracking. TAB is "$TAB							     #----------------- This part was to get live feedback during testing -----------------#
if [ "$Wpn1" = "Falcata" ] && [ "$Falcata" = "0" ]; 			then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Falcata" ]; then echo "Falcata is "$Falcata; fi
if [ "$Wpn1" = "Kukri" ] && [ "$Kukri" = "0" ]; 			then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Kukri" ]; then echo "Kukri is "$Kukri; fi
if [ "$Wpn1" = "Gladius" ] && [ "$Gladius" = "0" ]; 			then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Gladius" ]; then echo "Gladius is "$Gladius; fi
if [ "$Wpn1" = "Short_Sword" ] && [ "$Short_Sword" = "0" ]; 		then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Short_Sword" ]; then echo "Short Sword is "$Short_Sword; fi
if [ "$Wpn1" = "Broad_Sword" ] && [ "$Broad_Sword" = "0" ]; 		then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Broad_Sword" ]; then echo "Broad Sword is "$Broad_Sword; fi
if [ "$Wpn1" = "Chuth'ka" ] && [ "$Chuthka" = "0" ]; 			then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Chuth'ka" ]; then echo "Chuth'ka is "$Chuthka; fi
if [ "$Wpn1" = "Iuak" ] && [ "$Iuak" = "0" ]; 				then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Iuak" ]; then echo "Iuak is "$Iuak; fi
if [ "$Wpn1" = "Longsword" ] && [ "$Longsword" = "0" ]; 		then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Longsword" ]; then echo "Longsword is "$Longsword; fi
if [ "$Wpn1" = "Bastard_Sword" ] && [ "$BSword" = "0" ]; 		then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Bastard_Sword" ]; then echo "Bastard Sword is "$BSword; fi
if [ "$Wpn1" = "Greatsword" ] && [ "$Greatsword" = "0" ]; 		then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Greatsword" ]; then echo "Greatsword is "$Greatsword; fi
if [ "$Wpn1" = "Claymore" ] && [ "$Claymore" = "0" ]; 			then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Claymore" ]; then echo "Claymore is "$Claymore; fi
if [ "$Wpn1" = "Bowie_Knife" ] && [ "$Bowie_Knife" = "0" ]; 		then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Bowie_Knife" ]; then echo "Bowie Knife is "$Bowie_Knife; fi
if [ "$Wpn1" = "Khopesh" ] && [ "$Khopesh" = "0" ]; 			then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Khopesh" ]; then echo "Khopesh is "$Khopesh; fi
if [ "$Wpn1" = "Warhammer" ] && [ "$Warhammer" = "0" ]; 		then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Warhammer" ]; then echo "Warhammer is "$Warhammer; fi
if [ "$Wpn1" = "Mace" ] && [ "$Mace" = "0" ]; 				then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Mace" ]; then echo "Mace is "$Mace; fi
if [ "$Wpn1" = "Flail" ] && [ "$Flail" = "0" ]; 			then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Flail" ]; then echo "Flail is "$Flail; fi
if [ "$Wpn1" = "Morning_Star" ] && [ "$Morning_Star" = "0" ]; 		then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Morning_Star" ]; then echo "Morning Star is "$Morning_Star; fi
if [ "$Wpn1" = "Club" ] && [ "$Club" = "0" ]; 				then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Club" ]; then echo "Club is "$Club; fi
if [ "$Wpn1" = "Hatchet" ] && [ "$Hatchet" = "0" ]; 			then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Hatchet" ]; then echo "Hatchet is "$Hatchet; fi
if [ "$Wpn1" = "Battle-Axe" ] && [ "$Battle_Axe" = "0" ]; 		then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Battle-Axe" ]; then echo "Battle Axe is "$Battle_Axe; fi
if [ "$Wpn1" = "Dwarven_Battle-Axe" ] && [ "$DBAxe" = "0" ]; 		then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Dwarven_Battle-Axe" ]; then echo "Dwarven Battle Axe is "$DBAxe; fi
if [ "$Wpn1" = "Quarterstaff" ] && [ "$Quarterstaff" = "0" ]; 		then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Quarterstaff" ]; then echo "Quarterstaff is "$Quarterstaff; fi
if [ "$Wpn1" = "Smallsword" ] && [ "$Smallsword" = "0" ]; 		then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Smallsword" ]; then echo "Smallsword is "$Smallsword; fi
if [ "$Wpn1" = "Rapier" ] && [ "$Rapier" = "0" ]; 			then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Rapier" ]; then echo "Rapier is "$Rapier; fi
if [ "$Wpn1" = "Cutlass" ] && [ "$Cutlass" = "0" ]; 			then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Cutlass" ]; then echo "Cutlass is "$Cutlass; fi
if [ "$Wpn1" = "Sabre" ] && [ "$Sabre" = "0" ]; 			then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Sabre" ]; then echo "Sabre is "$Sabre; fi
if [ "$Wpn1" = "Scimitar" ] && [ "$Scimitar" = "0" ]; 			then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Scimitar" ]; then echo "Scimitar is "$Scimitar; fi
if [ "$Wpn1" = "Katana" ] && [ "$Katana" = "0" ]; 			then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Katana" ]; then echo "Katana is "$Katana; fi
if [ "$Wpn1" = "Katar" ] && [ "$Katar" = "0" ]; 			then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Katar" ]; then echo "Katar is "$Katar; fi
if [ "$Wpn1" = "Dagger" ] && [ "$Dagger" = "0" ]; 			then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Dagger" ]; then echo "Dagger is "$Dagger; fi
if [ "$Wpn1" = "Ulu" ] && [ "$Ulu" = "0" ]; 				then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Ulu" ]; then echo "Ulu is "$Ulu; fi
if [ "$Wpn1" = "Dirk" ] && [ "$Dirk" = "0" ]; 				then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Dirk" ]; then echo "Dirk is "$Dirk; fi
if [ "$Wpn1" = "Dart" ] && [ "$Dart" = "0" ]; 				then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Dart" ]; then echo "Dart is "$Dart; fi
if [ "$Wpn1" = "Stiletto" ] && [ "$Stiletto" = "0" ]; 			then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Stiletto" ]; then echo "Stiletto is "$Stiletto; fi
if [ "$Wpn1" = "Bullwhip" ] && [ "$Bullwhip" = "0" ]; 			then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Bullwhip" ]; then echo "Bullwhip is "$Bullwhip; fi
if [ "$Wpn1" = "Meteor_Hammer" ] && [ "$MHammer" = "0" ]; 		then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Meteor_Hammer" ]; then echo "Meteor Hammer is "$MHammer; fi
if [ "$Wpn1" = "Bola" ] && [ "$Bola" = "0" ]; 				then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Bola" ]; then echo "Bola is "$Bola; fi
if [ "$Wpn1" = "Boomerang" ] && [ "$Boomerang" = "0" ]; 		then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Boomerang" ]; then echo "Boomerang is "$Boomerang; fi
if [ "$Wpn1" = "Two-Handed_Warhammer" ] && [ "$TwoHWarH" = "0" ]; 	then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Two-Handed_Warhammer" ]; then echo "Two Handed Warhammer is "$TwoHWarH; fi
if [ "$Wpn1" = "Heavy_Crossbow" ] && [ "$Heavy_Xbow" = "0" ]; 		then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Heavy_Crossbow" ]; then echo "Heavy Crossbow is "$Heavy_Xbow; fi
if [ "$Wpn1" = "Light_Crossbow" ] && [ "$Light_Xbow" = "0" ]; 		then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Light_Crossbow" ]; then echo "Light Crossbow is "$Light_Xbow; fi
if [ "$Wpn1" = "Hand_Crossbow" ] && [ "$Hand_Xbow" = "0" ];		then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Hand_Crossbow" ]; then echo "Hand Crossbow is "$Hand_Xbow; fi
if [ "$Wpn1" = "Longbow" ] && [ "$Longbow" = "0" ]; 			then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Longbow" ]; then echo "Longbow is "$Longbow; fi
if [ "$Wpn1" = "Composite_Longbow" ] && [ "$CompLbow" = "0" ];		then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Composite_Longbow" ]; then echo "Composite Longbow is "$CompLbow;fi
if [ "$Wpn1" = "Shortbow" ] && [ "$Shortbow" = "0" ]; 			then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Shortbow" ]; then echo "Shortbow is "$Shortbow; fi
if [ "$Wpn1" = "Composite_Shortbow" ] && [ "$CompSbow" = "0" ];		then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Composite_Shortbow" ]; then echo "Composite Shortbow is "$CompSbow; fi
if [ "$Wpn1" = "Javelin" ] && [ "$Javelin" = "0" ]; 			then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Javelin" ]; then echo "Javelin is "$Javelin; fi
if [ "$Wpn1" = "Pike_Maul" ] && [ "$Pike_Maul" = "0" ]; 		then TAB=$(( $TAB - 4 )); fi #; if [ "$Wpn1" = "Pike_Maul" ]; then echo "Pike Maul is "$Pike_Maul; fi
}

function Weaponspecialization {
    case "$SpecializedWeapon" in
	Bastard_Sword) 		 BSword=$(( $BSword + 1 ))		;;
	Battle-Axe) 		 Battle_Axe=$(( $Battle_Axe + 1 ))	;;
	Bola) 			 Bola=$(( $Bola + 1 ))			;;
	Boomerang) 		 Boomerang=$(( $Boomerang + 1 ))	;;
	Bowie_Knife) 		 Bowie_Knife=$(( $Bowie_Knife + 1 ))	;;
	Broad_Sword) 		 Broad_Sword=$(( $Broad_Sword + 1 ))	;;
	Bullwhip)		 Bullwhip=$(( $Bullwhip + 1 ))		;;
	Chuth\'ka) 		 Chuthka=$(( $Chuthka + 1 ))		;;
	Claymore)		 Claymore=$(( $Claymore + 1 ))		;;
	Club) 			 Club=$(( $Club + 1 ))			;;
	Composite_Longbow)	 CompLbow=$(( $CompLbow + 1 ))		;;
	Composite_Shortbow)	 CompSbow=$(( $CompSbow + 1 ))		;;
	Cutlass)		 Cutlass=$(( $Cutlass + 1 ))		;;
	Dagger)			 Dagger=$(( $Dagger + 1 )) 		;;
	Dart)			 Dart=$(( $Dart + 1 ))			;;
	Dirk) 			 Dirk=$(( $Dirk + 1 )) 			;;
	Dwarven_Battle-Axe) 	 DBAxe=$(( $DBAxe + 1 ))		;;
	Falcata) 		 Falcata=$(( $Falcata + 1 ))		;;
	Flail) 			 Flail=$(( $Flail + 1 ))		;;
	Gladius) 		 Gladius=$(( $Gladius + 1 ))		;;
	Greatsword) 		 Greatsword=$(( $Greatsword + 1 ))	;;
	Hand_Crossbow)		 Hand_Xbow=$(( $Hand_Xbow + 1 ))	;;
	Hatchet) 		 Hatchet=$(( $Hatchet + 1 ))		;;
	Heavy_Crossbow) 	 Heavy_Xbow=$(( $Heavy_Xbow + 1 )) 	;;
	Iuak) 			 Iuak=$(( $Iuak + 1 ))			;;
	Javelin)		 Javelin=$(( $Javelin + 1 ))		;;
	Katana) 		 Katana=$(( $Katana + 1 ))		;;
	Katar)			 Katar=$(( $Katar + 1 ))		;;
	Khopesh) 		 Khopesh=$(( $Khopesh + 1 ))		;;
	Kukri) 			 Kukri=$(( $Kukri + 1 ))		;;
	Light_Crossbow) 	 Light_Xbow=$(( $LightXbow + 1 )) 	;;
	Longbow)		 Longbow=$(( $Longbow + 1 ))		;;
	Longsword) 		 Longsword=$(( $Longsword + 1 ))	;;
	Mace)			 Mace=$(( $Mace + 1 ))			;;
	Meteor_Hammer)		 MHammer=$(( $MHammer + 1 )) 		;;
	Morning_Star) 		 Morning_Star=$(( $Morning_Star + 1 ))	;;
	Pike_Maul) 		 Pike_Maul=$(( $Pike_Maul + 1 ))	;;
	Quarterstaff) 		 Quarterstaff=$(( $Quarterstaff + 1 ))	;;
	Rapier)			 Rapier=$(( $Rapier + 1 ))		;;
	Sabre)			 Sabre=$(( $Sabre + 1 ))		;;
	Scimitar)		 Scimitar=$(( $Scimitar + 1 ))		;;
	Shortbow)		 Shortbow=$(( $Shortbow + 1 ))		;;
	Short_Sword) 		 Short_Sword=$(( $Short_Sword + 1 ))	;;
	Smallsword)		 Smallsword=$(( $Smallsword + 1 ))	;;
	Stiletto)		 Stiletto=$(( $Stiletto + 1 )) 		;;
	Two-Handed_Warhammer) 	 TwoHWarH=$(( $TwoHWarH + 1 )) 		;;
	Ulu)			 Ulu=$(( $Ulu + 1 ))			;;
	Warhammer) 		 Warhammer=$(( $Warhammer + 1 ))	;;
    esac
}
#################################################################

if [ "$CLASS" = "Fighter" ]; then Weaponset+=($SpecWeapon); fi
if [ "$SpecWeapon" != "Club" ]; then Weaponset+=("Club");fi

if [ "$ATYPE" = "Warrior" ]; then Weapon_Skills=$(((($LEVEL -1) / 3) + 4));
	Weapon_Skills=$((Weapon_Skills-SpentSkills))
	until [ "$Weapon_Skills" -le "0" ]; do 
	if [ "$SIZE" = "M" ]; then 
	for index in `shuf --input-range=0-$(( ${#M_Warrior_Weapon_ARRAY[*]} - 1 )) | head -1`
		do    Result=${M_Warrior_Weapon_ARRAY[$index]}; Weaponset+=($Result); let "Weapon_Skills-=1"; WeaponTracking;
	if [ "$Result" = "Club" ]; 	then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; done; fi
	if [ "$SIZE" = "L" ]; then 
	for index in `shuf --input-range=0-$(( ${#L_Warrior_Weapon_ARRAY[*]} - 1 )) | head -1`
		do    Result=${L_Warrior_Weapon_ARRAY[$index]}; Weaponset+=($Result); let "Weapon_Skills-=1"; WeaponTracking;
	if [ "$Result" = "Club" ]; 	then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; done; fi; done; fi

if [ "$ATYPE" = "Wizard" ]; then Weapon_Skills=$(((($LEVEL -1) / 6) + 1)); 
	until [ "$Weapon_Skills" -le "0" ]; do 
	if [ "$SIZE" = "M" ]; then 
	for index in `shuf --input-range=0-$(( ${#M_Wizard_Weapon_ARRAY[*]} - 1 )) | head -1`
		do    Result=${M_Wizard_Weapon_ARRAY[$index]}; Weaponset+=($Result); let "Weapon_Skills-=1"; WeaponTracking;
	if [ "$Result" = "Club" ]; 	then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; done; fi
	if [ "$SIZE" = "L" ]; then 
	for index in `shuf --input-range=0-$(( ${#L_Wizard_Weapon_ARRAY[*]} - 1 )) | head -1`
		do    Result=${L_Wizard_Weapon_ARRAY[$index]}; Weaponset+=($Result); let "Weapon_Skills-=1"; WeaponTracking;
	if [ "$Result" = "Club" ]; 	then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; done; fi; done; fi

if [ "$ATYPE" = "Rogue" ] ; then Weapon_Skills=$(((($LEVEL -1) / 4) + 2));
	until [ "$Weapon_Skills" -le "0" ]; do 
	if [ "$SIZE" = "M" ]; then 
	for index in `shuf --input-range=0-$(( ${#M_Rogue_Weapon_ARRAY[*]} - 1 )) | head -1`
		do    Result=${M_Rogue_Weapon_ARRAY[$index]}; Weaponset+=($Result); let "Weapon_Skills-=1"; WeaponTracking;
	if [ "$Result" = "Club" ]; 	then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; done; fi
	if [ "$SIZE" = "L" ]; then 
	for index in `shuf --input-range=0-$(( ${#L_Rogue_Weapon_ARRAY[*]} - 1 )) | head -1`
		do    Result=${L_Rogue_Weapon_ARRAY[$index]}; Weaponset+=($Result); let "Weapon_Skills-=1"; WeaponTracking;
	if [ "$Result" = "Club" ]; 	then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; done; fi; done; fi

if [ "$ATYPE" = "Priest" ] && [ "$CLASS" != "Monk" ]; then Weapon_Skills=$(((($LEVEL -1) / 4) + 2)) # (Tables are the same for all sizes)
	until [ "$Weapon_Skills" -le "0" ]; do 
	for index in `shuf --input-range=0-$(( ${#Priest_Weapon_ARRAY[*]} - 1 )) | head -1`
		do    Result=${Priest_Weapon_ARRAY[$index]}; Weaponset+=($Result); let "Weapon_Skills-=1"; WeaponTracking;
	if [ "$Result" = "Club" ]; 	then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; done; done; fi

if [ "$ATYPE" = "Priest" ] && [ "$CLASS" = "Monk" ]; then Weapon_Skills=$(((($LEVEL -1) / 4) + 2)) # (Tables are the same for all sizes)
	until [ "$Weapon_Skills" -le "0" ]; do 
	for index in `shuf --input-range=0-$(( ${#Monk_Weapon_ARRAY[*]} - 1 )) | head -1`
		do    Result=${Monk_Weapon_ARRAY[$index]}; Weaponset+=($Result); let "Weapon_Skills-=1"; WeaponTracking;
	if [ "$Result" = "Club" ]; 	then unset Weaponset[${#Weaponset[@]}-1]; let Weapon_Skills+=1; fi; done; done; fi

#################################################################################################################################################
# Define Weapon Printing Functions
###############################################################
# SPECIALIZED WEAPON FUNCTION #################################
function SpecializedWeaponMath {
Weaponspecialization						# Calls the Weaponspecialization function defined above

#Weapon Material Mod to TAB
TAB=$(( $TAB + $WMat_Mod + $SpecHitBonus ))
Wep1_PlusA=$(( $Wep1_PlusA + $WMat_Mod + $SpecDamageBonus ))
Wep1_PlusB=$(( $Wep1_PlusB + $WMat_Mod + $SpecDamageBonus ))
Wep1_PlusC=$(( $Wep1_PlusC + $WMat_Mod + $SpecDamageBonus ))
Wep1_PlusD=$(( $Wep1_PlusD + $WMat_Mod + $SpecDamageBonus ))

#Speed factor bonus
let "TABbonus = $TAB / 4"; # Subtracts 1 point from SPEED FACTOR for every 4 points of TAB
let "Wspd = ${W_Att[4]} - $TABbonus"

if [ "${W_Att[9]}" != "Bow" ] && [ "${W_Att[9]}" != "CBow" ] && [ "${W_Att[9]}" != "XBow" ]; then 
	if [ "$SIZE" = "M" ]; then echo "★$PlusRank1""$W_Material$SpecializedWeapon$SHINYTYPE1"    "  TAB $TAB "" ${W_Att[0]}"+"$Wep1_PlusA""/""${W_Att[2]}"+"$Wep1_PlusB  "Speed:"$Wspd ""${W_Att[5]} ""${W_Att[7]} ""${W_Att[8]} " | tr -s "_" " " | sed 's/+-/-/' | sed 's/+0//' | sed 's/+-/-/' | sed 's/+0//';fi
	if [ "$SIZE" = "L" ]; then echo "★$PlusRank1""$W_Material$SpecializedWeapon$SHINYTYPE1"    "  TAB $TAB "" ${W_Att[1]}"+"$Wep1_PlusC""/""${W_Att[3]}"+"$Wep1_PlusD  "Speed:"$Wspd ""${W_Att[6]} ""${W_Att[7]} ""${W_Att[8]} " | tr -s "_" " " | sed 's/+-/-/' | sed 's/+0//' | sed 's/+-/-/' | sed 's/+0//';fi;fi
	if [ "${W_Att[9]}" = "XBow" ]; then 
	if [ "$SIZE" = "M" ]; then echo "★$PlusRank1""$W_Material$SpecializedWeapon$SHINYTYPE1"    "  TAB $TAB "" ${W_Att[0]}"+"$Wep1_PlusA""/""${W_Att[2]}"+"$Wep1_PlusB  "Speed:"$Wspd ""${W_Att[5]} ""${W_Att[7]} ""${W_Att[8]} " | tr -s "_" " " | sed 's/+-/-/' | sed 's/+0//' | sed 's/+-/-/' | sed 's/+0//';fi
	if [ "$SIZE" = "L" ]; then echo "★$PlusRank1""$W_Material$SpecializedWeapon$SHINYTYPE1"    "  TAB $TAB "" ${W_Att[1]}"+"$Wep1_PlusC""/""${W_Att[3]}"+"$Wep1_PlusD  "Speed:"$Wspd ""${W_Att[6]} ""${W_Att[7]} ""${W_Att[8]} " | tr -s "_" " " | sed 's/+-/-/' | sed 's/+0//' | sed 's/+-/-/' | sed 's/+0//';fi;fi
# Do special case for 2 handed bastard sword use
	if [ "$SpecializedWeapon" = "Bastard_Sword" ] && [ "$SIZE" = "M" ]; then echo "   (Two-Handed 2d4+$Wep1_PlusA/2d8$Wep1_PlusB)"; fi
	if [ "$SpecializedWeapon" = "Bastard_Sword" ] && [ "$SIZE" = "L" ]; then echo "   (Two-Handed 1d12+$Wep1_PlusC/3d6$Wep1_PlusD)"; fi 
# Do special case for crossbow quarrels
	if [ "${W_Att[9]}" = "XBow" ]; then let "Quarrel_Count = $RANDOM % 18 + 7"; echo "	($Quarrel_Count) $SpecializedWeapon Quarrels" | tr -s "_" " " | sed 's/+-/-/' | sed 's/+0//' | sed 's/+-/-/' | sed 's/+0//'; fi 

if [ "${W_Att[9]}" = "Bow" ] || [ "${W_Att[9]}" = "CBow" ]; then 
# Determine random # of arrows the PC gets, if any
let Weapon_Count+=1 # This gives the character another chance for a melee weapon by not counting his bow against his total # of weapons
let "Arrow_Count = $RANDOM % 18 + 7"
if [ "$Got_Bow" = "0" ]; then
	#Generate the bow
	if [ "$SIZE" = "M" ]; then 
	echo "★$PlusRank1""$W_Material$SpecializedWeapon$SHINYTYPE1"  "  TAB $TAB " "${W_Att[0]}""/""${W_Att[2]} "Speed:"$Wspd ""${W_Att[5]} ""${W_Att[7]} ""${W_Att[8]} " | tr -s "_" " " | sed 's/+-/-/' | sed 's/+0//' | sed 's/+-/-/' | sed 's/+0//';fi
	if [ "$SIZE" = "L" ]; then 
	echo "★$PlusRank1""$W_Material$SpecializedWeapon$SHINYTYPE1"  "  TAB $TAB " "${W_Att[1]}""/""${W_Att[3]} "Speed:"$Wspd ""${W_Att[6]} ""${W_Att[7]} ""${W_Att[8]} " | tr -s "_" " " | sed 's/+-/-/' | sed 's/+0//' | sed 's/+-/-/' | sed 's/+0//';fi
#Generate the ammo appropriate to bow type and calculate damage bonuses
# LONGBOW AMMUNITION
	if [ "$SpecializedWeapon" = "Longbow" ]; then for index in `shuf --input-range=0-$(( ${#Arrow_ARRAY1[*]} - 1 )) | head -1`
		do    Arrow1=${Arrow_ARRAY1[$index]}; 
	if [ "$Arrow1" = "Target_Arrows" ]; then A_Att=( "1d4" "1d6"  "1d4" "1d6"  "-" "Weight:0.1/per " "Weight: 0.2/per " "Style: Piercing" "Type: Ammo" "Ammo"); fi
	if [ "$Arrow1" = "Bodkin_Arrows" ]; then A_Att=( "1d6" "1d8"  "1d6" "1d8"  "-" "Weight:0.1/per " "Weight: 0.2/per " "Style: Piercing" "Type: Ammo" "Ammo" ); fi
	if [ "$Arrow1" = "War_Arrows" ];	 then A_Att=( "1d8" "1d10" "1d8" "1d10" "-" "Weight:0.1/per " "Weight: 0.2/per " "Style: Piercing" "Type: Ammo" "Ammo" ); fi
	if [ "$SIZE" = "M" ]; then echo "	(x$Arrow_Count) ""$PlusRank2""$Arrow1 ""${A_Att[0]}$ABonus""/""${A_Att[2]}$ABonus ""${A_Att[5]} ""${A_Att[7]} ""${A_Att[8]} " | tr -s "_" " " | sed 's/+-/-/' | sed 's/+0//' | sed 's/+-/-/' | sed 's/+0//';fi
	if [ "$SIZE" = "L" ]; then echo "	(x$Arrow_Count) ""$PlusRank2""$Arrow1 ""${A_Att[1]}$ABonus""/""${A_Att[3]}$ABonus ""${A_Att[6]} ""${A_Att[7]} ""${A_Att[8]} " | tr -s "_" " " | sed 's/+-/-/' | sed 's/+0//' | sed 's/+-/-/' | sed 's/+0//';fi 
		Got_Bow=1; done; fi
# COMPOSITE LONGBOW AMMUNITION
	if [ "$SpecializedWeapon" = "Composite_Longbow" ]; then for index in `shuf --input-range=0-$(( ${#Arrow_ARRAY1[*]} - 1 )) | head -1`
		do    Arrow1=${Arrow_ARRAY1[$index]};
	if [ "$Arrow1" = "Target_Arrows" ]; then A_Att=( "1d4" "1d6"  "1d4" "1d6"  "-" "Weight:0.1/per " "Weight: 0.2/per " "Style: Piercing" "Type: Ammo" "Ammo"); fi
	if [ "$Arrow1" = "Bodkin_Arrows" ]; then A_Att=( "1d6" "1d8"  "1d6" "1d8"  "-" "Weight:0.1/per " "Weight: 0.2/per " "Style: Piercing" "Type: Ammo" "Ammo" ); fi
	if [ "$Arrow1" = "War_Arrows" ]; 	 then A_Att=( "1d8" "1d10" "1d8" "1d10" "-" "Weight:0.1/per " "Weight: 0.2/per " "Style: Piercing" "Type: Ammo" "Ammo" ); fi
	if [ "$SIZE" = "M" ]; then echo "	(x$Arrow_Count) ""$PlusRank2""$Arrow1 ""${A_Att[0]}"+"$Wep1_PlusA""/""${A_Att[2]}"+"$Wep1_PlusB ""${A_Att[5]} ""${A_Att[7]} ""${A_Att[8]} " | tr -s "_" " " | sed 's/+-/-/' | sed 's/+0//' | sed 's/+-/-/' | sed 's/+0//';fi
	if [ "$SIZE" = "L" ]; then echo "	(x$Arrow_Count) ""$PlusRank2""$Arrow1 ""${A_Att[1]}"+"$Wep1_PlusC""/""${A_Att[3]}"+"$Wep1_PlusD ""${A_Att[6]} ""${A_Att[7]} ""${A_Att[8]} " | tr -s "_" " " | sed 's/+-/-/' | sed 's/+0//' | sed 's/+-/-/' | sed 's/+0//';fi 
		Got_Bow=1; done; fi
# SHORTBOW AMMUNITION
	if [ "$SpecializedWeapon" = "Shortbow" ]; then for index in `shuf --input-range=0-$(( ${#Arrow_ARRAY2[*]} - 1 )) | head -1`
		do    Arrow1=${Arrow_ARRAY2[$index]};
	if [ "$Arrow1" = "Target_Arrows" ]; then A_Att=( "1d4" "1d6"  "1d4" "1d6"  "-" "Weight:0.1/per " "Weight: 0.2/per " "Style: Piercing" "Type: Ammo" "Ammo"); fi
	if [ "$Arrow1" = "Bodkin_Arrows" ]; then A_Att=( "1d6" "1d8"  "1d6" "1d8"  "-" "Weight:0.1/per " "Weight: 0.2/per " "Style: Piercing" "Type: Ammo" "Ammo" ); fi
	if [ "$SIZE" = "M" ]; then echo "	(x$Arrow_Count) ""$PlusRank2""$Arrow1 ""${A_Att[0]}$ABonus""/""${A_Att[2]}$ABonus ""${A_Att[5]} ""${A_Att[7]} ""${A_Att[8]} " | tr -s "_" " " | sed 's/+-/-/' | sed 's/+0//' | sed 's/+-/-/' | sed 's/+0//';fi
	if [ "$SIZE" = "L" ]; then echo "	(x$Arrow_Count) ""$PlusRank2""$Arrow1 ""${A_Att[1]}$ABonus""/""${A_Att[3]}$ABonus ""${A_Att[6]} ""${A_Att[7]} ""${A_Att[8]} " | tr -s "_" " " | sed 's/+-/-/' | sed 's/+0//' | sed 's/+-/-/' | sed 's/+0//';fi 
		Got_Bow=1; done; fi
# COMPOSITE SHORTBOW AMMUNITION
	if [ "$SpecializedWeapon" = "Composite_Shortbow" ]; then for index in `shuf --input-range=0-$(( ${#Arrow_ARRAY2[*]} - 1 )) | head -1`
		do    Arrow1=${Arrow_ARRAY2[$index]}; 
	if [ "$Arrow1" = "Target_Arrows" ]; then A_Att=( "1d4" "1d6"  "1d4" "1d6"  "-" "Weight:0.1/per " "Weight: 0.2/per " "Style: Piercing" "Type: Ammo" "Ammo"); fi
	if [ "$Arrow1" = "Bodkin_Arrows" ]; then A_Att=( "1d6" "1d8"  "1d6" "1d8"  "-" "Weight:0.1/per " "Weight: 0.2/per " "Style: Piercing" "Type: Ammo" "Ammo" ); fi
	if [ "$SIZE" = "M" ]; then echo "	(x$Arrow_Count) ""$PlusRank2""$Arrow1 ""${A_Att[0]}"+"$Wep1_PlusA""/""${A_Att[2]}"+"$Wep1_PlusB ""${A_Att[5]} ""${A_Att[7]} ""${A_Att[8]} " | tr -s "_" " " | sed 's/+-/-/' | sed 's/+0//' | sed 's/+-/-/' | sed 's/+0//';fi
	if [ "$SIZE" = "L" ]; then echo "	(x$Arrow_Count) ""$PlusRank2""$Arrow1 ""${A_Att[1]}"+"$Wep1_PlusC""/""${A_Att[3]}"+"$Wep1_PlusD ""${A_Att[6]} ""${A_Att[7]} ""${A_Att[8]} " | tr -s "_" " " | sed 's/+-/-/' | sed 's/+0//' | sed 's/+-/-/' | sed 's/+0//';fi 
		Got_Bow=1; done; fi; fi; fi
	}

###############################################################
# NORMAL WEAPON FUNCTION ######################################
function NormalWeaponMath {
Weaponspecialization						# Calls the Weaponspecialization function defined above

#echo "We're in NormalWeaponMath"
#Weapon Material Mod to TAB
TAB=$(( $TAB + $WMat_Mod ))
Wep1_PlusA=$(( $Wep1_PlusA + $WMat_Mod ))
Wep1_PlusB=$(( $Wep1_PlusB + $WMat_Mod ))
Wep1_PlusC=$(( $Wep1_PlusC + $WMat_Mod ))
Wep1_PlusD=$(( $Wep1_PlusD + $WMat_Mod ))

#TABTracking	# This checks to see if the chosen weapon is in the character's skillset. If it isn't, it imposes a -4 penalty to the TAB for that weapon.
TABTracking
#echo "Wpn1 is "$Wpn1
#echo "TAB is "$TAB

#Speed factor bonus
let "TABbonus = $TAB / 4"; # Subtracts 1 point from SPEED FACTOR for every 4 points of TAB
let "Wspd = ${W_Att[4]} - $TABbonus"

if [ "${W_Att[9]}" != "Bow" ] && [ "${W_Att[9]}" != "CBow" ] && [ "${W_Att[9]}" != "XBow" ]; then 
	if [ "$SIZE" = "M" ]; then echo "$PlusRank1""$W_Material$Wpn1$SHINYTYPE1"    "  TAB $TAB "" ${W_Att[0]}"+"$Wep1_PlusA""/""${W_Att[2]}"+"$Wep1_PlusB  "Speed:"$Wspd ""${W_Att[5]} ""${W_Att[7]} ""${W_Att[8]} " | tr -s "_" " " | sed 's/+-/-/' | sed 's/+0//' | sed 's/+-/-/' | sed 's/+0//';fi
	if [ "$SIZE" = "L" ]; then echo "$PlusRank1""$W_Material$Wpn1$SHINYTYPE1"    "  TAB $TAB "" ${W_Att[1]}"+"$Wep1_PlusC""/""${W_Att[3]}"+"$Wep1_PlusD  "Speed:"$Wspd ""${W_Att[6]} ""${W_Att[7]} ""${W_Att[8]} " | tr -s "_" " " | sed 's/+-/-/' | sed 's/+0//' | sed 's/+-/-/' | sed 's/+0//';fi;fi
	if [ "${W_Att[9]}" = "XBow" ] && [ "$SIZE" = "M" ]; then echo "$PlusRank1""$W_Material$Wpn1$SHINYTYPE1"    "  TAB $TAB "" ${W_Att[0]}"+"$Wep1_PlusA""/""${W_Att[2]}"+"$Wep1_PlusB  "Speed:"$Wspd ""${W_Att[5]} ""${W_Att[7]} ""${W_Att[8]} " | tr -s "_" " " | sed 's/+-/-/' | sed 's/+0//' | sed 's/+-/-/' | sed 's/+0//';fi
	if [ "${W_Att[9]}" = "XBow" ] && [ "$SIZE" = "L" ]; then echo "$PlusRank1""$W_Material$Wpn1$SHINYTYPE1"    "  TAB $TAB "" ${W_Att[1]}"+"$Wep1_PlusC""/""${W_Att[3]}"+"$Wep1_PlusD  "Speed:"$Wspd ""${W_Att[6]} ""${W_Att[7]} ""${W_Att[8]} " | tr -s "_" " " | sed 's/+-/-/' | sed 's/+0//' | sed 's/+-/-/' | sed 's/+0//';fi
# Do special case for 2 handed bastard sword use
	if [ "$Wpn1" = "Bastard_Sword" ] && [ "$SIZE" = "M" ]; then echo "   (Two-Handed 2d4+$Wep1_PlusA/2d8+$Wep1_PlusB)" | sed 's/+-/-/' | sed 's/+0//' | sed 's/+-/-/' | sed 's/+0//'; fi
	if [ "$Wpn1" = "Bastard_Sword" ] && [ "$SIZE" = "L" ]; then echo "   (Two-Handed 1d12+$Wep1_PlusC/3d6+$Wep1_PlusD)" | sed 's/+-/-/' | sed 's/+0//' | sed 's/+-/-/' | sed 's/+0//'; fi
# Do special case for crossbow quarrels
	if [ "${W_Att[9]}" = "XBow" ]; then let "Quarrel_Count = $RANDOM % 18 + 7"; echo "	($Quarrel_Count) $Wpn1 Quarrels" | tr -s "_" " " | sed 's/+-/-/' | sed 's/+0//' | sed 's/+-/-/' | sed 's/+0//'; fi 

if [ "${W_Att[9]}" = "Bow" ] || [ "${W_Att[9]}" = "CBow" ]; then 
# Determine random # of arrows the PC gets, if any
let Weapon_Count+=1 # This gives the character another chance for a melee weapon by not counting his bow against his total # of weapons
let "Arrow_Count = $RANDOM % 18 + 7"
if [ "$Got_Bow" = "0" ]; then

#Generate the bow
if [ "$SIZE" = "M" ]; then echo "$PlusRank1""$W_Material$Wpn1$SHINYTYPE1"  "  TAB $TAB " "${W_Att[0]}""/""${W_Att[2]} "Speed:"$Wspd ""${W_Att[5]} ""${W_Att[7]} ""${W_Att[8]} " | tr -s "_" " " | sed 's/+-/-/' | sed 's/+0//' | sed 's/+-/-/' | sed 's/+0//';fi
if [ "$SIZE" = "L" ]; then echo "$PlusRank1""$W_Material$Wpn1$SHINYTYPE1"  "  TAB $TAB " "${W_Att[1]}""/""${W_Att[3]} "Speed:"$Wspd ""${W_Att[6]} ""${W_Att[7]} ""${W_Att[8]} " | tr -s "_" " " | sed 's/+-/-/' | sed 's/+0//' | sed 's/+-/-/' | sed 's/+0//';fi
	
# LONGBOW AMMUNITION
if [ "$Wpn1" = "Longbow" ] || [ "$SpecializedWeapon" = "Longbow" ]; then for index in `shuf --input-range=0-$(( ${#Arrow_ARRAY1[*]} - 1 )) | head -1`
		do    Arrow1=${Arrow_ARRAY1[$index]}; 
#echo $Arrow1; done;
if [ "$Arrow1" = "Target_Arrows" ]; then A_Att=( "1d4" "1d6"  "1d4" "1d6"  "-" "Weight:0.1/per " "Weight: 0.2/per " "Style: Piercing" "Type: Ammo" "Ammo"); fi
if [ "$Arrow1" = "Bodkin_Arrows" ]; then A_Att=( "1d6" "1d8"  "1d6" "1d8"  "-" "Weight:0.1/per " "Weight: 0.2/per " "Style: Piercing" "Type: Ammo" "Ammo" ); fi
if [ "$Arrow1" = "War_Arrows" ];	 then A_Att=( "1d8" "1d10" "1d8" "1d10" "-" "Weight:0.1/per " "Weight: 0.2/per " "Style: Piercing" "Type: Ammo" "Ammo" ); fi
	if [ "$SIZE" = "M" ]; then echo "	(x$Arrow_Count) ""$PlusRank2""$Arrow1 ""${A_Att[0]}$ABonus""/""${A_Att[2]}$ABonus ""${A_Att[5]} ""${A_Att[7]} ""${A_Att[8]} " | tr -s "_" " " | sed 's/+-/-/' | sed 's/+0//' | sed 's/+-/-/' | sed 's/+0//';fi
	if [ "$SIZE" = "L" ]; then echo "	(x$Arrow_Count) ""$PlusRank2""$Arrow1 ""${A_Att[1]}$ABonus""/""${A_Att[3]}$ABonus ""${A_Att[6]} ""${A_Att[7]} ""${A_Att[8]} " | tr -s "_" " " | sed 's/+-/-/' | sed 's/+0//' | sed 's/+-/-/' | sed 's/+0//';fi 
		Got_Bow=1; done; fi

# COMPOSITE LONGBOW AMMUNITION
if [ "$Wpn1" = "Composite_Longbow" ] || [ "$SpecializedWeapon" = "Composite_Longbow" ]; then for index in `shuf --input-range=0-$(( ${#Arrow_ARRAY1[*]} - 1 )) | head -1`
		do    Arrow1=${Arrow_ARRAY1[$index]};
if [ "$Arrow1" = "Target_Arrows" ]; then A_Att=( "1d4" "1d6"  "1d4" "1d6"  "-" "Weight:0.1/per " "Weight: 0.2/per " "Style: Piercing" "Type: Ammo" "Ammo"); fi
if [ "$Arrow1" = "Bodkin_Arrows" ]; then A_Att=( "1d6" "1d8"  "1d6" "1d8"  "-" "Weight:0.1/per " "Weight: 0.2/per " "Style: Piercing" "Type: Ammo" "Ammo" ); fi
if [ "$Arrow1" = "War_Arrows" ]; 	 then A_Att=( "1d8" "1d10" "1d8" "1d10" "-" "Weight:0.1/per " "Weight: 0.2/per " "Style: Piercing" "Type: Ammo" "Ammo" ); fi
	if [ "$SIZE" = "M" ]; then echo "	(x$Arrow_Count) ""$PlusRank2""$Arrow1 ""${A_Att[0]}"+"$Wep1_PlusA""/""${A_Att[2]}"+"$Wep1_PlusB ""${A_Att[5]} ""${A_Att[7]} ""${A_Att[8]} " | tr -s "_" " " | sed 's/+-/-/' | sed 's/+0//' | sed 's/+-/-/' | sed 's/+0//';fi
	if [ "$SIZE" = "L" ]; then echo "	(x$Arrow_Count) ""$PlusRank2""$Arrow1 ""${A_Att[1]}"+"$Wep1_PlusC""/""${A_Att[3]}"+"$Wep1_PlusD ""${A_Att[6]} ""${A_Att[7]} ""${A_Att[8]} " | tr -s "_" " " | sed 's/+-/-/' | sed 's/+0//' | sed 's/+-/-/' | sed 's/+0//';fi 
		Got_Bow=1; done; fi

# SHORTBOW AMMUNITION
if [ "$Wpn1" = "Shortbow" ] || [ "$SpecializedWeapon" = "Shortbow" ]; then for index in `shuf --input-range=0-$(( ${#Arrow_ARRAY2[*]} - 1 )) | head -1`
		do    Arrow1=${Arrow_ARRAY2[$index]};
if [ "$Arrow1" = "Target_Arrows" ]; then A_Att=( "1d4" "1d6"  "1d4" "1d6"  "-" "Weight:0.1/per " "Weight: 0.2/per " "Style: Piercing" "Type: Ammo" "Ammo"); fi
if [ "$Arrow1" = "Bodkin_Arrows" ]; then A_Att=( "1d6" "1d8"  "1d6" "1d8"  "-" "Weight:0.1/per " "Weight: 0.2/per " "Style: Piercing" "Type: Ammo" "Ammo" ); fi
	if [ "$SIZE" = "M" ]; then echo "	(x$Arrow_Count) ""$PlusRank2""$Arrow1 ""${A_Att[0]}$ABonus""/""${A_Att[2]}$ABonus ""${A_Att[5]} ""${A_Att[7]} ""${A_Att[8]} " | tr -s "_" " " | sed 's/+-/-/' | sed 's/+0//' | sed 's/+-/-/' | sed 's/+0//';fi
	if [ "$SIZE" = "L" ]; then echo "	(x$Arrow_Count) ""$PlusRank2""$Arrow1 ""${A_Att[1]}$ABonus""/""${A_Att[3]}$ABonus ""${A_Att[6]} ""${A_Att[7]} ""${A_Att[8]} " | tr -s "_" " " | sed 's/+-/-/' | sed 's/+0//' | sed 's/+-/-/' | sed 's/+0//';fi 
		Got_Bow=1; done; fi

# COMPOSITE SHORTBOW AMMUNITION
if [ "$Wpn1" = "Composite_Shortbow" ] || [ "$SpecializedWeapon" = "Composite_Shortbow" ]; then for index in `shuf --input-range=0-$(( ${#Arrow_ARRAY2[*]} - 1 )) | head -1`
		do    Arrow1=${Arrow_ARRAY2[$index]}; 
if [ "$Arrow1" = "Target_Arrows" ]; then A_Att=( "1d4" "1d6"  "1d4" "1d6"  "-" "Weight:0.1/per " "Weight: 0.2/per " "Style: Piercing" "Type: Ammo" "Ammo"); fi
if [ "$Arrow1" = "Bodkin_Arrows" ]; then A_Att=( "1d6" "1d8"  "1d6" "1d8"  "-" "Weight:0.1/per " "Weight: 0.2/per " "Style: Piercing" "Type: Ammo" "Ammo" ); fi
	if [ "$SIZE" = "M" ]; then echo "	(x$Arrow_Count) ""$PlusRank2""$Arrow1 ""${A_Att[0]}"+"$Wep1_PlusA""/""${A_Att[2]}"+"$Wep1_PlusB ""${A_Att[5]} ""${A_Att[7]} ""${A_Att[8]} " | tr -s "_" " " | sed 's/+-/-/' | sed 's/+0//' | sed 's/+-/-/' | sed 's/+0//';fi
	if [ "$SIZE" = "L" ]; then echo "	(x$Arrow_Count) ""$PlusRank2""$Arrow1 ""${A_Att[1]}"+"$Wep1_PlusC""/""${A_Att[3]}"+"$Wep1_PlusD ""${A_Att[6]} ""${A_Att[7]} ""${A_Att[8]} " | tr -s "_" " " | sed 's/+-/-/' | sed 's/+0//' | sed 's/+-/-/' | sed 's/+0//';fi 
		Got_Bow=1; done; fi; fi; fi
	}

###############################################################
# Call Weapon Printing Functions ##############################
if [ "$CLASS" = "Fighter" ] && [ "$LEVEL" -ge "4" ]; then 
if [ "$WeaponSpecialization" = "0" ] || [ "$Wpn1" == "$SpecializedWeapon" ]; then SpecializedWeaponMath
	else NormalWeaponMath; fi; else NormalWeaponMath; fi

###############################################################
#Decrement the Weapon_Count variable, INCREMENT the WeaponSpecialization variable, and run the loop again
let Weapon_Count-=1; let WeaponSpecialization+=1; TAB=0
done

#Temporarily moved weapon loadout base str etc from here


###############################################################
# ARMOR GENERATION ############################################

# IS THE ARMOR MAGIC?
# This subroutine checks for magic armor at 5% chance per level 
# of the character ... non-cumulatively and iteratively.
Level_Check=($LEVEL - 1)
Magic_Armor_Get=0 	# Setting this to 1 will (virtually) guarantee magic armor
Magic_Shield_Get=0
Magic_Helm_Get=0
Magic_Misc_Item_Get=0
ArmorEnchantBonus=0
ShEnchBonus=0
Misc_ItemBonus=0
HelmBonus=0
RaceCut=0

until [ "$Level_Check" -le "0" ] || [ "$Magic_Armor_Get" -ge "1" ]; do let "Magic_Armor_Check = $RANDOM % 20 + 1"
if [ "$Magic_Armor_Check" = "20" ]; then let Magic_Armor_Get+=1; fi; let Level_Check-=1 ;done

# HOW MAGIC?
if [ "$Magic_Armor_Get" -ge "1" ]; then let "MagicACRoll = $RANDOM % 20 + 1"
if [ "$MagicACRoll" -ge "1" ] && [ "$MagicACRoll" -le "2" ]; then ArmorEnchantBonus=0; fi
if [ "$MagicACRoll" -ge "3" ] && [ "$MagicACRoll" -le "10" ]; then ArmorEnchantBonus=1; fi
if [ "$MagicACRoll" -ge "11" ] && [ "$MagicACRoll" -le "14" ]; then ArmorEnchantBonus=2; fi
if [ "$MagicACRoll" -ge "15" ] && [ "$MagicACRoll" -le "17" ]; then ArmorEnchantBonus=3; fi
if [ "$MagicACRoll" -ge "18" ] && [ "$MagicACRoll" -le "19" ]; then ArmorEnchantBonus=4; fi
if [ "$MagicACRoll" -ge "20" ]; then ArmorEnchantBonus=5; fi; fi

# Limit magical AC bonus by level
	if [ "$LEVEL" -lt "3" ]; then ArmorEnchantBonus=0; fi
	if [ "$LEVEL" = "3" ] || [ "$LEVEL" = "4" ]; then if [ "$ArmorEnchantBonus" -gt "1" ]; then ArmorEnchantBonus=1; fi; fi
	if [ "$LEVEL" = "5" ] || [ "$LEVEL" = "6" ]; then if [ "$ArmorEnchantBonus" -gt "2" ]; then ArmorEnchantBonus=2; fi; fi		
	if [ "$LEVEL" = "7" ] || [ "$LEVEL" = "8" ]; then if [ "$ArmorEnchantBonus" -gt "3" ]; then ArmorEnchantBonus=3; fi; fi
	if [ "$LEVEL" = "9" ] || [ "$LEVEL" = "10" ]; then if [ "$ArmorEnchantBonus" -gt "4" ]; then ArmorEnchantBonus=4; fi; fi

#ArmorEnchantBonus=5 	# This overrides the level limiting selections above

# Now check for magic shields just like the armor above
ShieldLevel_Check=($LEVEL -1)
until [ "$ShieldLevel_Check" -le "0" ] || [ "$Magic_Shield_Get" -ge "1" ]; do let "Magic_Shield_Check = $RANDOM % 20 + 1"
if [ "$Magic_Shield_Check" = "20" ]; then let Magic_Shield_Get+=1; fi; let Level_Check-=1 ;done

# HOW MAGIC?
if [ "$Magic_Shield_Get" -ge "1" ]; then let "MagicShieldRoll = $RANDOM % 20 + 1"
if [ "$MagicShieldRoll" -ge "1" ] && [ "$MagicShieldRoll" -le "2" ]; then ShEnchBonus=0; fi
if [ "$MagicShieldRoll" -ge "3" ] && [ "$MagicShieldRoll" -le "10" ]; then ShEnchBonus=1; fi
if [ "$MagicShieldRoll" -ge "11" ] && [ "$MagicShieldRoll" -le "14" ]; then ShEnchBonus=2; fi
if [ "$MagicShieldRoll" -ge "15" ] && [ "$MagicShieldRoll" -le "17" ]; then ShEnchBonus=3; fi
if [ "$MagicShieldRoll" -ge "18" ] && [ "$MagicShieldRoll" -le "19" ]; then ShEnchBonus=4; fi
if [ "$MagicShieldRoll" -ge "20" ]; then ShEnchBonus=5; fi; fi

# Limit magical Shield bonus by level
	if [ "$LEVEL" -lt "3" ]; then ShEnchBonus=0; fi
	if [ "$LEVEL" = "3" ] || [ "$LEVEL" = "4" ]; then if [ "$ShEnchBonus" -gt "1" ]; then ShEnchBonus=1; fi; fi
	if [ "$LEVEL" = "5" ] || [ "$LEVEL" = "6" ]; then if [ "$ShEnchBonus" -gt "2" ]; then ShEnchBonus=2; fi; fi		
	if [ "$LEVEL" = "7" ] || [ "$LEVEL" = "8" ]; then if [ "$ShEnchBonus" -gt "3" ]; then ShEnchBonus=3; fi; fi
	if [ "$LEVEL" = "9" ] || [ "$LEVEL" = "10" ]; then if [ "$ShEnchBonus" -gt "4" ]; then ShEnchBonus=4; fi; fi

#ShEnchBonus=5 	# This overrides the level limiting selections above

# Check for helmets & headgear. If they exist, they're enchanted and affect AC. Otherwise helms and headgear are implied
Helm_Check=($LEVEL -1)
until [ "$Helm_Check" -le "0" ] || [ "$Magic_Helm_Get" -ge "1" ]; do let "Magic_Helm_Check = $RANDOM % 20 + 1"
let Helm_Check-=1; if [ "$Magic_Helm_Check" = "20" ]; then let Magic_Helm_Get+=1; fi; done

if [ "$Magic_Helm_Get" -ge "1" ]; then let "MagicHelmRoll = $RANDOM % 20 + 1"
if [ "$MagicHelmRoll" -ge "1" ] && [ "$MagicHelmRoll" -le "2" ]; then HelmBonus=0; fi
if [ "$MagicHelmRoll" -ge "3" ] && [ "$MagicHelmRoll" -le "10" ]; then HelmBonus=1; fi
if [ "$MagicHelmRoll" -ge "11" ] && [ "$MagicHelmRoll" -le "14" ]; then HelmBonus=2; fi
if [ "$MagicHelmRoll" -ge "15" ] && [ "$MagicHelmRoll" -le "17" ]; then HelmBonus=3; fi
if [ "$MagicHelmRoll" -ge "18" ] && [ "$MagicHelmRoll" -le "19" ]; then HelmBonus=4; fi
if [ "$MagicHelmRoll" -ge "20" ]; then HelmBonus=5; fi; fi

# Limit magical helm bonus by level
	if [ "$LEVEL" -le "2" ]; then HelmBonus=0; fi
	if [ "$LEVEL" = "3" ] || [ "$LEVEL" = "4" ]; then if [ "$HelmBonus" -gt "1" ]; then let HelmBonus="1"; fi; fi
	if [ "$LEVEL" = "5" ] || [ "$LEVEL" = "6" ]; then if [ "$HelmBonus" -gt "2" ]; then let HelmBonus="2"; fi; fi		
	if [ "$LEVEL" = "7" ] || [ "$LEVEL" = "8" ]; then if [ "$HelmBonus" -gt "3" ]; then let HelmBonus="3"; fi; fi
	if [ "$LEVEL" = "9" ] || [ "$LEVEL" = "10" ]; then if [ "$HelmBonus" -gt "4" ]; then let HelmBonus="4"; fi; fi

# Check for miscellaneous magic items that affect AC. 
Misc_Item_Check=($LEVEL -1)
until [ "$Misc_Item_Check" -le "0" ] || [ "$Magic_Misc_Item_Get" -ge "1" ]; do let "Magic_Misc_Item_Check = $RANDOM % 20 + 1"
let Misc_Item_Check-=1; if [ "$Magic_Misc_Item_Check" = "20" ]; then let Magic_Misc_Item_Get+=1; fi; done

if [ "$Magic_Misc_Item_Get" -ge "1" ]; then let "MagicMisc_ItemRoll = $RANDOM % 20 + 1"
if [ "$MagicMisc_ItemRoll" -ge "1" ] && [ "$MagicMisc_ItemRoll" -le "2" ]; then Misc_ItemBonus="0"; fi
if [ "$MagicMisc_ItemRoll" -ge "3" ] && [ "$MagicMisc_ItemRoll" -le "10" ]; then Misc_ItemBonus="1"; fi
if [ "$MagicMisc_ItemRoll" -ge "11" ] && [ "$MagicMisc_ItemRoll" -le "14" ]; then Misc_ItemBonus="2"; fi
if [ "$MagicMisc_ItemRoll" -ge "15" ] && [ "$MagicMisc_ItemRoll" -le "17" ]; then Misc_ItemBonus="3"; fi
if [ "$MagicMisc_ItemRoll" -ge "18" ] && [ "$MagicMisc_ItemRoll" -le "19" ]; then Misc_ItemBonus="4"; fi
if [ "$MagicMisc_ItemRoll" -ge "20" ]; then Misc_ItemBonus=5; fi; fi

# Limit magical Misc_Item bonus by level
	if [ "$LEVEL" -lt "3" ]; then Misc_ItemBonus=0; fi
	if [ "$LEVEL" = "3" ] || [ "$LEVEL" = "4" ]; then if [ "$Misc_ItemBonus" -gt "1" ]; then Misc_ItemBonus=1; fi; fi
	if [ "$LEVEL" = "5" ] || [ "$LEVEL" = "6" ]; then if [ "$Misc_ItemBonus" -gt "2" ]; then Misc_ItemBonus=2; fi; fi		
	if [ "$LEVEL" = "7" ] || [ "$LEVEL" = "8" ]; then if [ "$Misc_ItemBonus" -gt "3" ]; then Misc_ItemBonus=3; fi; fi
	if [ "$LEVEL" = "9" ] || [ "$LEVEL" = "10" ]; then if [ "$Misc_ItemBonus" -gt "4" ]; then Misc_ItemBonus=4; fi; fi

#################################################################
# MEDIUM-SIZED ARMORS ###########################################
if [ "$ATYPE" = "Warrior" ] && [ "$CLASS" != "Paladin" ] && [ "$LEVEL" -le "5" ] && [ "$SIZE" = "M" ]
then 	ARMORS=( "Padded Armor" "Leather Armor" "Studded Leather" "Hide Armor" "Scale Mail" "Ring Mail" "Brigandine" "Chain Mail" "Elven Chain" "Coat of Plates" "Lorica" )
	SHIELDS=( "Buckler" "Small Shield" "Medium Shield" "Tower Shield" "" )
	HELMS=( "Bascinet" "Sallet" "Spangenhelm" "Great Helm" "Close Helmet" "Pig-Faced Helmet" "Chain Coif" "Galea Helmet" )
	MISC_MAG=( "Bracers of Defense" "Ring of Protection" "Amulet of Protection" "Scarab of Protection"  "Cloak of Protection" ); fi

if [ "$ATYPE" = "Warrior" ] && [ "$CLASS" != "Paladin" ] && [ "$LEVEL" -gt "5" ] && [ "$SIZE" = "M" ]
then 	ARMORS=( "Scale Mail" "Ring Mail" "Brigandine" "Chain Mail" "Elven Chain" "Coat of Plates" "Lorica" "Half-Plate" "Full Plate" )
	SHIELDS=( "Buckler" "Small Shield" "Medium Shield" "Tower Shield" "" )
	HELMS=( "Bascinet" "Sallet" "Spangenhelm" "Great Helm" "Close Helmet" "Pig-Faced Helmet" "Chain Coif" "Galea Helmet" )
	MISC_MAG=( "Bracers of Defense" "Ring of Protection" "Amulet of Protection" "Scarab of Protection" "Cloak of Protection" ); fi

if [ "$CLASS" = "Paladin" ] && [ "$LEVEL" -le "5" ] && [ "$SIZE" = "M" ]
then 	ARMORS=( "Clothing & Tabard" "Leather Armor" "Studded Leather" "Scale Mail" "Ring Mail" "Brigandine" "Chain Mail" "Elven Chain" "Coat of Plates" "Lorica" )
	SHIELDS=( "Buckler" "Small Shield" "Medium Shield" "Tower Shield" "" )
	HELMS=( "Bascinet" "Sallet" "Spangenhelm" "Great Helm" "Close Helmet" "Pig-Faced Helmet" "Chain Coif" "Galea Helmet" )
	MISC_MAG=( "Bracers of Defense" "Ring of Protection" "Amulet of Protection" "Scarab of Protection" "Cloak of Protection" ); fi

if [ "$CLASS" = "Paladin" ] && [ "$LEVEL" -gt "5" ] && [ "$SIZE" = "M" ]
then 	ARMORS=( "Scale Mail" "Ring Mail" "Brigandine" "Chain Mail" "Elven Chain" "Coat of Plates" "Lorica" "Half-Plate" "Full Plate" )
	SHIELDS=( "Buckler" "Small Shield" "Medium Shield" "Tower Shield" "" )
	HELMS=( "Bascinet" "Sallet" "Spangenhelm" "Great Helm" "Close Helmet" "Pig-Faced Helmet" "Chain Coif" "Galea Helmet" )
	MISC_MAG=( "Bracers of Defense" "Ring of Protection" "Amulet of Protection" "Scarab of Protection" "Cloak of Protection" ); fi

if [ "$CLASS" = "Cleric" ] || [ "$CLASS" = "Specialty Priest" ] && [ "$SIZE" = "M" ]
then	ARMORS=( "Padded Armor" "Leather Armor" "Studded Leather" "Hide Armor" "Scale Mail" "Ring Mail" "Brigandine" "Chain Mail" "Elven Chain" "Coat of Plates" "Lorica" "Half-Plate" "Full Plate" )
	SHIELDS=( "Buckler" "Small Shield" "Medium Shield" "Tower Shield" "" )
	HELMS=( "Bascinet" "Sallet" "Spangenhelm" "Great Helm" "Close Helmet" "Pig-Faced Helmet" "Chain Coif" "Galea Helmet" "Circlet" )
	MISC_MAG=( "Bracers of Defense" "Ring of Protection" "Amulet of Protection" "Scarab of Protection" "Cloak of Protection" ); fi

#################################################################
# LARGE-SIZED ARMORS ############################################
if [ "$ATYPE" = "Warrior" ] && [ "$CLASS" != "Paladin" ] && [ "$LEVEL" -le "5" ] && [ "$SIZE" = "L" ]
then 	ARMORS=( "Padded Armor" "Leather Armor" "Studded Leather" "Hide Armor" "Scale Mail" "Ring Mail" "Brigandine" "Chain Mail" "Coat of Plates" "Lorica" )
	SHIELDS=( "Buckler" "Small Shield" "Medium Shield" "Tower Shield" "" )
	HELMS=( "Bascinet" "Sallet" "Spangenhelm" "Great Helm" "Close Helmet" "Pig-Faced Helmet" "Chain Coif" "Galea Helmet" )
	MISC_MAG=( "Bracers of Defense" "Ring of Protection" "Amulet of Protection" "Scarab of Protection"  "Cloak of Protection" ); fi

if [ "$ATYPE" = "Warrior" ] && [ "$CLASS" != "Paladin" ] && [ "$LEVEL" -gt "5" ] && [ "$SIZE" = "L" ]
then 	ARMORS=( "Scale Mail" "Ring Mail" "Brigandine" "Chain Mail" "Coat of Plates" "Lorica" "Half-Plate" "Full Plate" )
	SHIELDS=( "Buckler" "Small Shield" "Medium Shield" "Tower Shield" "" )
	HELMS=( "Bascinet" "Sallet" "Spangenhelm" "Great Helm" "Close Helmet" "Pig-Faced Helmet" "Chain Coif" "Galea Helmet" )
	MISC_MAG=( "Bracers of Defense" "Ring of Protection" "Amulet of Protection" "Scarab of Protection" "Cloak of Protection" ); fi

if [ "$CLASS" = "Paladin" ] && [ "$LEVEL" -le "5" ] && [ "$SIZE" = "L" ]
then 	ARMORS=( "Clothing & Tabard" "Leather Armor" "Studded Leather" "Scale Mail" "Ring Mail" "Brigandine" "Chain Mail" "Coat of Plates" "Lorica" )
	SHIELDS=( "Buckler" "Small Shield" "Medium Shield" "Tower Shield" "" )
	HELMS=( "Bascinet" "Sallet" "Spangenhelm" "Great Helm" "Close Helmet" "Pig-Faced Helmet" "Chain Coif" "Galea Helmet" )
	MISC_MAG=( "Bracers of Defense" "Ring of Protection" "Amulet of Protection" "Scarab of Protection" "Cloak of Protection" ); fi

if [ "$CLASS" = "Paladin" ] && [ "$LEVEL" -gt "5" ] && [ "$SIZE" = "L" ]
then 	ARMORS=( "Scale Mail" "Ring Mail" "Brigandine" "Chain Mail" "Coat of Plates" "Lorica" "Half-Plate" "Full Plate" )
	SHIELDS=( "Buckler" "Small Shield" "Medium Shield" "Tower Shield" "" )
	HELMS=( "Bascinet" "Sallet" "Spangenhelm" "Great Helm" "Close Helmet" "Pig-Faced Helmet" "Chain Coif" "Galea Helmet" )
	MISC_MAG=( "Bracers of Defense" "Ring of Protection" "Amulet of Protection" "Scarab of Protection" "Cloak of Protection" ); fi

if [ "$CLASS" = "Cleric" ] || [ "$CLASS" = "Specialty Priest" ] && [ "$SIZE" = "L" ]
then	ARMORS=( "Padded Armor" "Leather Armor" "Studded Leather" "Hide Armor" "Scale Mail" "Ring Mail" "Brigandine" "Chain Mail" "Coat of Plates" "Lorica" "Half-Plate" "Full Plate" )
	SHIELDS=( "Buckler" "Small Shield" "Medium Shield" "Tower Shield" "" )
	HELMS=( "Bascinet" "Sallet" "Spangenhelm" "Great Helm" "Close Helmet" "Pig-Faced Helmet" "Chain Coif" "Galea Helmet" "Circlet" )
	MISC_MAG=( "Bracers of Defense" "Ring of Protection" "Amulet of Protection" "Scarab of Protection" "Cloak of Protection" ); fi

#################################################################
# CLOTHIE CLASS ARMORS ##########################################
if [ "$CLASS" = "Druid" ] && [ "$LEVEL" -le "5" ]
then	ARMORS=( "Leather Armor" "Studded Leather" "Hide Armor" "Coat of Plates" )
	SHIELDS=( "Buckler" "Small Shield" "Medium Shield" "" )
	HELMS=( "Skullcap" "Circlet" )
	MISC_MAG=( "Bracers of Defense" "Ring of Protection" "Amulet of Protection" "Scarab of Protection" "Cloak of Protection" ); fi

if [ "$CLASS" = "Druid" ] && [ "$LEVEL" -gt "5" ]
then	ARMORS=( "Hide Armor" "Coat of Plates" "Lorica" "Half-Plate" "Full Plate" )
	SHIELDS=( "Buckler" "Small Shield" "Medium Shield" "" )
	HELMS=( "Skullcap" "Circlet" )
	MISC_MAG=( "Bracers of Defense" "Ring of Protection" "Amulet of Protection" "Scarab of Protection" "Cloak of Protection" ); fi

if [ "$ATYPE" = "Wizard" ]
then	ARMORS=( "Robes" "Adventurer's Clothing" )
	SHIELDS=( "" "" )
	HELMS=( "Skullcap" "Circlet" )
	MISC_MAG=( "Bracers of Defense" "Ring of Protection" "Amulet of Protection" "Scarab of Protection" "Cloak of Protection" ); fi

if [ "$CLASS" = "Monk" ]
then	ARMORS=( "Robes" "Monk Robes" )
	SHIELDS=( "" "" )
	HELMS=( "Skullcap" "Circlet" )
	MISC_MAG=( "Bracers of Defense" "Ring of Protection" "Amulet of Protection" "Scarab of Protection" "Cloak of Protection" ); fi

if [ "$ATYPE" = "Rogue" ]
then 	ARMORS=( "Padded Armor" "Leather Armor" "Studded Leather" "Chain Mail" )
	SHIELDS=( "Buckler" "" )
	HELMS=( "Skullcap" "Circlet" "Bascinet" "Spangenhelm" "Chain Coif" )
	MISC_MAG=( "Bracers of Defense" "Ring of Protection" "Amulet of Protection" "Scarab of Protection" "Cloak of Protection" ); fi

if [ "$CLASS" = "Shaman" ]
then	ARMORS=( "Leather Armor" "Studded Leather" "Hide Armor" "Coat of Plates" )
	SHIELDS=( "Buckler" "Small Shield" "Medium Shield" "" )
	HELMS=( "Skullcap" "Circlet" )
	MISC_MAG=( "Bracers of Defense" "Ring of Protection" "Amulet of Protection" "Scarab of Protection" "Cloak of Protection" ); fi

for index in `shuf --input-range=0-$(( ${#ARMORS[*]} - 1 )) | head -1`
do    ARMORTYPE=${ARMORS[$index]};done
for index in `shuf --input-range=0-$(( ${#SHIELDS[*]} - 1 )) | head -1`
do    SHIELDTYPE=${SHIELDS[$index]};done
for index in `shuf --input-range=0-$(( ${#MISC_MAG[*]} - 1 )) | head -1`
do    MiscMag_Item=${MISC_MAG[$index]};done

#################################################################
# DECLARE BASE DURABILITY POINTS ################################
DPoints=$(( 25 * ( $ArmorEnchantBonus + 1 )))

#################################################################

if [ "$ARMORTYPE" = "Robes" ] || [ "$ARMORTYPE" = "Monk Robes" ] || [ "$ARMORTYPE" = "Clothing & Tabard" ] || [ "$ARMORTYPE" = "Adventurer's Clothing" ]
	then ArmorAC=0; 
	ArmorKind="Cloth"
	ArmorWt="5"
	LArmorWt="10"
		let PickPockets+=1
		let MoveSilently+=2
		let HideinShadows+=1
		let ClimbWalls+=2;fi
if [ "$ARMORTYPE" = "Padded Armor" ]
	then ArmorAC=1; 
	ArmorKind="Cloth"
	ArmorWt="10"
	LArmorWt="15"; fi
if [ "$ARMORTYPE" = "Leather Armor" ]
	then ArmorAC=2
	ArmorKind="Leather"
	ArmorWt="20"
	LArmorWt="30"
		let PickPockets-=2
		let OpenLocks-=1
		let MoveSilently-=1
		let HideinShadows-=1
		let Climbwalls-=2;fi
if [ "$ARMORTYPE" = "Studded Leather" ]
	then ArmorAC=3
	ArmorKind="Leather"
	ArmorWt="20"
	LArmorWt="30"
		let PickPockets-=6
		let OpenLocks-=2
		let FindRemoveTraps-=2
		let MoveSilently-=4
		let HideinShadows-=4
		let DetectNoise-=1
		let ClimbWalls-=4;fi
if [ "$ARMORTYPE" = "Hide Armor" ]
	then ArmorAC=4
	ArmorKind="Hide"
	ArmorWt="25"
	LArmorWt="35"
		let PickPockets-=12
		let OpenLocks-=10
		let FindRemoveTraps-=10
		let MoveSilently-=6
		let HideinShadows-=4
		let DetectNoise-=2
		let ClimbWalls-=12;fi
if [ "$ARMORTYPE" = "Scale Mail" ]
	then ArmorAC=4
	ArmorKind="Metal"
	ArmorWt="30"
	LArmorWt="45"
		let PickPockets-=8
		let OpenLocks-=3
		let FindRemoveTraps-=5
		let MoveSilently-=8
		let HideinShadows-=4
		let DetectNoise-=5
		let ClimbWalls-=10;fi
if [ "$ARMORTYPE" = "Ring Mail" ]
	then ArmorAC=4
	ArmorKind="Metal"
	ArmorWt="25"
	LArmorWt="35"
		let PickPockets-=12
		let OpenLocks-=10
		let FindRemoveTraps-=10
		let MoveSilently-=6
		let HideinShadows-=4
		let DetectNoise-=2
		let ClimbWalls-=12;fi
if [ "$ARMORTYPE" = "Brigandine" ]
	then ArmorAC=5
	ArmorKind="Metal"
	ArmorWt="20"
	LArmorWt="30"
		let PickPockets-=8
		let OpenLocks-=3
		let FindRemoveTraps-=3
		let MoveSilently-=8
		let HideinShadows-=6
		let DetectNoise-=4
		let ClimbWalls-=8;fi
if [ "$ARMORTYPE" = "Chain Mail" ]
	then ArmorAC=5
	ArmorKind="Metal"
	ArmorWt="25"
	LArmorWt="35"
		let PickPockets-=8
		let OpenLocks-=3
		let FindRemoveTraps-=3
		let MoveSilently-=8
		let HideinShadows-=6
		let DetectNoise-=4
		let ClimbWalls-=8;fi
if [ "$ARMORTYPE" = "Elven Chain" ]
	then ArmorAC=5
	ArmorKind="Elven"
	ArmorWt="1"
	LArmorWt="3"
		let PickPockets-=4
		let OpenLocks-=1
		let FindRemoveTraps-=1
		let MoveSilently-=2
		let HideinShadows-=2
		let DetectNoise-=1
		let ClimbWalls-=4;fi
if [ "$ARMORTYPE" = "Coat of Plates" ] 
	then ArmorAC=6
	ArmorKind="Metal"
	ArmorWt="35"
	LArmorWt="50"
		let PickPockets-=9
		let OpenLocks-=4
		let FindRemoveTraps-=4
		let MoveSilently-=10
		let HideinShadows-=8
		let DetectNoise-=5
		let ClimbWalls-=13;fi
if [ "$ARMORTYPE" = "Lorica" ]
	then ArmorAC=7
	ArmorKind="Metal"
	ArmorWt="35"
	LArmorWt="50"
		let PickPockets-=10
		let OpenLocks-=4
		let FindRemoveTraps-=4
		let MoveSilently-=12
		let HideinShadows-=10
		let DetectNoise-=6
		let ClimbWalls-=18;fi
if [ "$ARMORTYPE" = "Half-Plate" ]
	then ArmorAC=8
	ArmorKind="Metal"
	ArmorWt="45"
	LArmorWt="70"
		let PickPockets-=10
		let OpenLocks-=4
		let FindRemoveTraps-=4
		let MoveSilently-=12
		let HideinShadows-=10
		let DetectNoise-=6
		let ClimbWalls-=18;fi
if [ "$ARMORTYPE" = "Full Plate" ]
	then ArmorAC=9
	ArmorKind="Metal"
	ArmorWt="65"
	LArmorWt="90"
		let PickPockets-=10
		let OpenLocks-=4
		let FindRemoveTraps-=4
		let MoveSilently-=12
		let HideinShadows-=10
		let DetectNoise-=6
		let ClimbWalls-=18;fi

#==============================================================
# RACIAL ARMOR ADJUSTMENTS ====================================

if [ "$Racial_Armors" = "Y" ]; then
    if [ "$SIZE" = "M" ]; then Racial_Armor_Type=( "Elkan " "Dwarven-made " "Orcish-make " "Lugan " "Loxodonian " "Zan-Styled " "Highland " "" "" "" "" "" "" "" "" "" "" "" "" "" "" ) ;fi
    if [ "$SIZE" = "L" ]; then Racial_Armor_Type=( "Orcish-make " "Minotian-style " "Acandian " "Ursine " "Silith " "Highland " "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" );fi

# Select a racial armor type
	for index in `shuf --input-range=0-$(( ${#Racial_Armor_Type[*]} - 1 )) | head -1`
		do    RacialCut=${Racial_Armor_Type[$index]};done

 if [ "$CLASS" = "Shaman" ]; then RacialCut="Self-Made "; fi

 if [ "$RacialCut" = "Elkan " ]; then
	RaceCut=1
	ArmorAC=$(( $ArmorAC + 1 ))
	ArmorWt=$(( $ArmorWt / 2 )); fi

 if [ "$RacialCut" = "Dwarven-made " ]; then
	RaceCut=1
	ArmorAC=$(( $ArmorAC + 1 ))
	DPoints=$(( $DPoints * 2 )); fi
 
 if [ "$RacialCut" = "Orcish-make " ]; then
	RaceCut=-1
	ArmorAC=$(( $ArmorAC-1 ))
	DPoints=$(( $DPoints / 2 ))
	ArmorWt=$(( $ArmorWt * 2 ))
	LArmorWt=$(( 2 * $LArmorWt )); fi

 if [ "Racial_Armor_Type" = "Minotian-style " ]; then
	RaceCut=1
	ArmorAC=$(( $ArmorAC + 1 ))
	LArmorWt=$(( 2 * $LArmorWt ));fi

 if [ "Racial_Armor_Type" = "Acandian" ]; then
	RaceCut=2
	ArmorAC=$(( $ArmorAC + 2 ))
	DPoints=$(( $DPoints / 2 ))
	LArmorWt=$(( 2 * $LArmorWt ));fi;fi

###############################################################
#             SPECIAL MATERIALS SECTION FOR ARMOR             #
###############################################################
# Generate random chance of special material (1/20)
Mat_Mod=0
	let "AMatTypeCheck = $RANDOM % 100 + 1" #; fi
#AMatTypeCheck="100"
if [ "$ArmorKind" = "Metal" ] && [ "$CLASS" != "Druid" ] && [ "$RacialCut" != "Orcish-make " ]; then
	if [ "$AMatTypeCheck" -ge "1" ] && [ "$AMatTypeCheck" -le "65" ]; then A_Material=Steel; Mat_Mod="0"
	elif [ "$AMatTypeCheck" -ge "66" ] && [ "$AMatTypeCheck" -le "90" ]; then A_Material=Iron; Mat_Mod="-1"
	elif [ "$AMatTypeCheck" -ge "91" ] && [ "$AMatTypeCheck" -le "92" ]; then A_Material=Bronze; Mat_Mod="-2"
	elif [ "$AMatTypeCheck" -ge "93" ] && [ "$AMatTypeCheck" -le "94" ]; then A_Material=Copper; Mat_Mod="-3"
	elif [ "$AMatTypeCheck" = "95" ]; then A_Material=Silver; Mat_Mod="-2"
	elif [ "$AMatTypeCheck" = "96" ]; then A_Material=Gold; Mat_Mod="-4"; ArmorWt=$(( $ArmorWt * 2 )); LArmorWt=$(( $LArmorWt * 2 ))
	elif [ "$AMatTypeCheck" = "97" ]; then A_Material=Platinum; Mat_Mod="-4"; ArmorWt=$(( $ArmorWt * 2 )); LArmorWt=$(( $LArmorWt * 2 ))
	elif [ "$AMatTypeCheck" = "98" ]; then A_Material=Cinnibral; Mat_Mod="0"
	elif [ "$AMatTypeCheck" = "99" ]; then A_Material=Adamantine; Mat_Mod="+2"
	elif [ "$AMatTypeCheck" = "100" ]; then A_Material=Mithril; Mat_Mod="+3"; fi; fi

if [ "$ArmorKind" = "Metal" ] && [ "$CLASS" != "Druid" ] && [ "$RacialCut" = "Orcish-make " ]; then
	if [ "$AMatTypeCheck" -ge "1" ] && [ "$AMatTypeCheck" -le "65" ]; then A_Material=Steel; Mat_Mod="0"
	elif [ "$AMatTypeCheck" -ge "66" ] && [ "$AMatTypeCheck" -le "90" ]; then A_Material=Iron; Mat_Mod="-1"
	elif [ "$AMatTypeCheck" -ge "91" ] && [ "$AMatTypeCheck" -le "92" ]; then A_Material=Bronze; Mat_Mod="-2"
	elif [ "$AMatTypeCheck" -ge "93" ] && [ "$AMatTypeCheck" -le "100" ]; then A_Material=Copper; Mat_Mod="-3"; fi; fi

if [ "$ArmorKind" = "Metal" ] && [ "$CLASS" = "Druid" ]; then
	if [ "$AMatTypeCheck" -ge "1" ] && [ "$AMatTypeCheck" -le "65" ]; then A_Material=Oaken; Mat_Mod="-1"
	elif [ "$AMatTypeCheck" -ge "66" ] && [ "$AMatTypeCheck" -le "90" ]; then A_Material=Ironwood; Mat_Mod="+1"
	elif [ "$AMatTypeCheck" -ge "91" ] && [ "$AMatTypeCheck" -le "92" ]; then A_Material="Treant Flesh"; Mat_Mod="+2"
	elif [ "$AMatTypeCheck" -ge "93" ] && [ "$AMatTypeCheck" -le "94" ]; then A_Material="Silver Oak"; Mat_Mod="0"
	elif [ "$AMatTypeCheck" = "95" ]; then A_Material="Dragon Hide"; Mat_Mod="+3"
	elif [ "$AMatTypeCheck" = "96" ]; then A_Material="Shale"; Mat_Mod="+2";
	elif [ "$AMatTypeCheck" = "97" ]; then A_Material="Granite"; Mat_Mod="+2"
	elif [ "$AMatTypeCheck" = "98" ]; then A_Material="Chitin"; Mat_Mod="+1"
	elif [ "$AMatTypeCheck" = "99" ]; then A_Material="Enchanted Bone"; Mat_Mod="+1"
	elif [ "$AMatTypeCheck" = "100" ]; then A_Material="Bloodwood"; Mat_Mod="+2"; fi; fi

if [ "$ArmorKind" = "Metal" ] && [ "$CLASS" = "Shaman" ]; then
	if [ "$AMatTypeCheck" -ge "1" ] && [ "$AMatTypeCheck" -le "65" ]; then A_Material=Oaken; Mat_Mod="-1"
	elif [ "$AMatTypeCheck" -ge "66" ] && [ "$AMatTypeCheck" -le "90" ]; then A_Material=Ironwood; Mat_Mod="+1"
	elif [ "$AMatTypeCheck" -ge "91" ] && [ "$AMatTypeCheck" -le "92" ]; then A_Material="Treant Flesh"; Mat_Mod="+2"
	elif [ "$AMatTypeCheck" -ge "93" ] && [ "$AMatTypeCheck" -le "94" ]; then A_Material="Silver Oak"; Mat_Mod="0"
	elif [ "$AMatTypeCheck" = "95" ]; then A_Material="Dragon Hide"; Mat_Mod="+3"
	elif [ "$AMatTypeCheck" = "96" ]; then A_Material="Shale"; Mat_Mod="+2";
	elif [ "$AMatTypeCheck" = "97" ]; then A_Material="Granite"; Mat_Mod="+2"
	elif [ "$AMatTypeCheck" = "98" ]; then A_Material="Chitin"; Mat_Mod="+1"
	elif [ "$AMatTypeCheck" = "99" ]; then A_Material="Enchanted Bone"; Mat_Mod="+1"
	elif [ "$AMatTypeCheck" = "100" ]; then A_Material="Bloodwood"; Mat_Mod="+2"; fi; fi

if [ "$ArmorKind" = "Leather" ]; then
	if [ "$AMatTypeCheck" -ge "1" ] && [ "$AMatTypeCheck" -le "40" ]; then A_Material="Tanned"; Mat_Mod="0"
	elif [ "$AMatTypeCheck" -ge "41" ] && [ "$AMatTypeCheck" -le "65" ]; then A_Material="Boiled"; Mat_Mod="0"
	elif [ "$AMatTypeCheck" -ge "66" ] && [ "$AMatTypeCheck" -le "86" ]; then A_Material="Rawhide"; Mat_Mod="0"
	elif [ "$AMatTypeCheck" -ge "87" ] && [ "$AMatTypeCheck" -le "99" ]; then A_Material="Embossed"; Mat_Mod="0"
	elif [ "$AMatTypeCheck" = "100" ]; then A_Material="Dragon Skin"; Mat_Mod="+3"; fi; fi

if [ "$ArmorKind" = "Hide" ]; then
	if [ "$AMatTypeCheck" -ge "1" ] && [ "$AMatTypeCheck" -le "65" ]; then A_Material="Black Bear"; Mat_Mod="0" 
	elif [ "$AMatTypeCheck" -ge "66" ] && [ "$AMatTypeCheck" -le "90" ]; then A_Material="Brown Bear"; Mat_Mod="0" 
	elif [ "$AMatTypeCheck" -ge "91" ] && [ "$AMatTypeCheck" -le "92" ]; then A_Material="Polar Bear"; Mat_Mod="0" 
	elif [ "$AMatTypeCheck" -ge "93" ] && [ "$AMatTypeCheck" -le "95" ]; then A_Material="Ice Drake"; Mat_Mod="+2" 
	elif [ "$AMatTypeCheck" = "96" ]; then A_Material=Warg; Mat_Mod="0"
	elif [ "$AMatTypeCheck" = "97" ]; then A_Material="Alveschi Skin"; Mat_Mod="+1"
	elif [ "$AMatTypeCheck" = "98" ]; then A_Material=Rhemoraz; Mat_Mod="0"
	elif [ "$AMatTypeCheck" = "99" ]; then A_Material=Unicorn; Mat_Mod="+1"
	elif [ "$AMatTypeCheck" = "100" ]; then A_Material="Dragon Scale"; Mat_Mod="+3"; fi; fi

if [ "$ArmorKind" = "Cloth" ]; then
	if [ "$AMatTypeCheck" -ge "1" ] && [ "$AMatTypeCheck" -le "65" ]; then A_Material="Coarse Cloth"
	elif [ "$AMatTypeCheck" -ge "66" ] && [ "$AMatTypeCheck" -le "90" ]; then A_Material="Insulated"
	elif [ "$AMatTypeCheck" -ge "91" ] && [ "$AMatTypeCheck" -le "92" ]; then A_Material="Wool Cloth"
	elif [ "$AMatTypeCheck" -ge "93" ] && [ "$AMatTypeCheck" -le "95" ]; then A_Material="Hemp Cloth"
	elif [ "$AMatTypeCheck" = "96" ]; then A_Material="Crushed Velvet"
	elif [ "$AMatTypeCheck" = "97" ]; then A_Material="Fine Fur"
	elif [ "$AMatTypeCheck" = "98" ]; then A_Material="Watered Silk"
	elif [ "$AMatTypeCheck" = "99" ]; then A_Material="Silk"
	elif [ "$AMatTypeCheck" = "100" ]; then A_Material="Troll Wool"; fi; fi

if [ "$ArmorKind" = "Elven" ] && [ "$ARMORTYPE" = "Elven Chain" ]; then
	RacialCut=""
	ArmorAC=5
	ArmorWt=1
	if [ "$AMatTypeCheck" -ge "1" ] && [ "$AMatTypeCheck" -le "65" ]; then A_Material=""; Mat_Mod="0"; ArmorEnchantBonus="0"
	elif [ "$AMatTypeCheck" -ge "66" ] && [ "$AMatTypeCheck" -le "99" ]; then A_Material="Antique"; Mat_Mod="0"; ArmorEnchantBonus="0"
	elif [ "$AMatTypeCheck" -ge "100" ]; then A_Material="Magical"; Mat_Mod="0";  
		let "ArmorEnchantBonus = $RANDOM % 4 +1"; fi; fi



Cover="0%" #Initializes the string for the Cover variable

if [ "$SHIELDTYPE" = "Buckler" ]
	then let "ShieldAC = 1 + (${dex[2]}) + $ShEnchBonus";fi
if [ "$SHIELDTYPE" = "Small Shield" ]
	then let "ShieldAC = 1 + (${dex[2]}) + $ShEnchBonus";fi
if [ "$SHIELDTYPE" = "Medium Shield" ]
	then let "ShieldAC= 2 + (${dex[2]}) + $ShEnchBonus"
	     Cover="40%";fi
if [ "$SHIELDTYPE" = "Tower Shield" ]
	then let "ShieldAC = 3 + $ShEnchBonus"
	     Cover="90%";fi
if [ "$SHIELDTYPE" = "" ]
	then let "ShieldAC = 0"; ShEnchBonus=0
	     Cover="0%";fi

# Select Helmet type
	for index in `shuf --input-range=0-$(( ${#HELMS[*]} - 1 )) | head -1`
		do    MagHelmet=${HELMS[$index]};done

if [ "$CompactFormat" != "Y" ]; then
echo
echo "*** ARMOR PIECES ***"; fi

if [ "$ArmorAC" -lt "0" ]; then ArmorAC=0 ;fi
TotalArmorAC=$(( $ArmorAC + $ArmorEnchantBonus + $Mat_Mod + ${dex[2]} ))
ArmorPrefix=""
ShieldPrefix=""
HelmPrefix=""
Misc_ItemPrefix=""

if [ "$ArmorEnchantBonus" != "0" ]; then ArmorPrefix="+$ArmorEnchantBonus "; fi
if [ "$ShEnchBonus" != "0" ]; then ShieldPrefix="+$ShEnchBonus "; fi
if [ "$HelmBonus" != "0" ]; then HelmPrefix="+$HelmBonus "; fi
if [ "$Misc_ItemBonus" != "0" ]; then Misc_ItemPrefix="+$Misc_ItemBonus "; fi

BaseAC=10 
ArmorClass=$(( $BaseAC + ${dex[2]} + $HelmBonus + $Misc_ItemBonus + $Mat_Mod + $RaceCut + $ArmorEnchantBonus + $ArmorAC + $ShieldAC + $Mat_Mod ))
ShieldlessAC=$(( $BaseAC + $ArmorAC + $HelmBonus + $Misc_ItemBonus  + $Mat_Mod + ${dex[2]} + $RaceCut + $ArmorEnchantBonus))
RearAC=$(( $BaseAC + $ArmorAC + $Misc_ItemBonus  + $HelmBonus + $Mat_Mod + $RaceCut + $ArmorEnchantBonus ))
TouchAC=$(( $BaseAC + ${dex[2]}))

if [ "$RACE" = "Protean" ]; then
BaseAC=18
ArmorClass=$(( $BaseAC + $ShieldAC + $Misc_ItemBonus + ${dex[2]} ))
ShieldlessAC=$(( $BaseAC + $Misc_ItemBonus + ${dex[2]} ))
RearAC=$(( $BaseAC + $Misc_ItemBonus ))
TouchAC=$(( $BaseAC + ${dex[2]}))
HelmBonus=0; fi

if [ "$RACE" = "Relic" ]; then
BaseAC=15
if [ "$ArmorAC" -le "5" ]; then ArmorAC=1; fi
ArmorClass=$(( $BaseAC + $ArmorAC + $ShieldAC + $HelmBonus + $Misc_ItemBonus + $Mat_Mod + ${dex[2]} ))
ShieldlessAC=$(( $BaseAC + $ArmorAC + $HelmBonus + $Misc_ItemBonus  + $Mat_Mod + ${dex[2]} ))
RearAC=$(( $BaseAC + $ArmorAC + $Misc_ItemBonus  + $HelmBonus + $Mat_Mod ))
TouchAC=$(( $BaseAC + $ArmorEnchantBonus + ${dex[2]}));fi

if [ "$CLASS" = "Monk" ]
then ArmorClass=$(( $BaseAC + ${dex[2]} + $HelmBonus + $Misc_ItemBonus + $Mat_Mod + $RaceCut + $ArmorEnchantBonus + $LEVEL ));fi

if [ "$RacialCut" = "Orcish-make " ]; then TotalArmorAC=$(( $TotalArmorAC-1 )); fi

#################################################################
# PRINT ARMOR FUNCTION ##########################################

function PrintArmor {

#And now we print the armor that was generated
if [ "$RACE" != "Protean" ] && [ "$RACE" != "Relic" ] && [ "$SIZE" = "M" ] && [ "${dex[2]}" != "0" ]; then
echo $ArmorPrefix $RacialCut$A_Material $ARMORTYPE "+ Dex Bonus = AC" $TotalArmorAC " " Durability:$DPoints " " Weight:$ArmorWt;fi
if [ "$RACE" != "Protean" ] && [ "$RACE" != "Relic" ] && [ "$SIZE" = "M" ] && [ "${dex[2]}" = "0" ]; then
echo $ArmorPrefix $RacialCut$A_Material $ARMORTYPE = "AC" $TotalArmorAC " " Durability:$DPoints " " Weight:$ArmorWt ;fi

if [ "$RACE" = "Protean" ] && [ "${dex[2]}" = "0" ]; then
echo "Armored Skin" = "AC 18"; fi
if [ "$RACE" = "Protean" ] && [ "${dex[2]}" != "0" ]; then
echo "Armored Skin + Dex Bonus= AC" $TouchAC; fi

if [ "$RACE" = "Relic" ] && [ "${dex[2]}" = "0" ]; then
echo "Metal Body = AC 15"; fi
if [ "$RACE" = "Relic" ] && [ "${dex[2]}" != "0" ]; then
echo "Metal Body + Dex Bonus = AC " $TouchAC; fi

if [ "$CLASS" = "Monk" ] && [ "${dex[2]}" = "0" ]; then
echo "Monk Bare-Handed AC Bonus = "$LEVEL; fi
if [ "$CLASS" = "Monk" ] && [ "${dex[2]}" != "0" ]; then
echo "Monk Bare-Handed AC Bonus = +"$LEVEL; fi

if [ "$SIZE" = "L" ] && [ "${dex[2]}" != "0" ]; then
echo $ArmorPrefix $RacialCut$A_Material $ARMORTYPE "+ Dex Bonus = AC" $TotalArmorAC " " Durability:$DPoints " " Weight:$LArmorWt;fi
if [ "$SIZE" = "L" ] && [ "${dex[2]}" = "0" ]; then
echo $ArmorPrefix $RacialCut$A_Material $ARMORTYPE "= AC" $TotalArmorAC " " Durability:$DPoints " " Weight:$LArmorWt;fi

#---------------------------------------------------------------#
# SHIELD MATH --------------------------------------------------#

if [ "$SHIELDTYPE" = "Buckler" ] && [ "${dex[2]}" = "0" ]; then
echo $ShieldPrefix $SHIELDTYPE "= AC" $ShieldAC ""- "Cover = "$Cover; fi
if [ "$SHIELDTYPE" = "Buckler" ] && [ "${dex[2]}" != "0" ]; then
echo $ShieldPrefix $SHIELDTYPE "+ Dex Bonus = AC" $ShieldAC ""- "Cover = "$Cover; fi

if [ "$SHIELDTYPE" = "Small Shield" ] && [ "${dex[2]}" = "0" ]; then
echo $ShieldPrefix $SHIELDTYPE "= AC" $ShieldAC ""- "Cover = "$Cover; fi
if [ "$SHIELDTYPE" = "Small Shield" ] && [ "${dex[2]}" != "0" ]; then
echo $ShieldPrefix $SHIELDTYPE "+ Dex Bonus = AC" $ShieldAC ""- "Cover = "$Cover; fi

if [ "$SHIELDTYPE" = "Medium Shield" ] && [ "${dex[2]}" = "0" ]; then
echo $ShieldPrefix $SHIELDTYPE "= AC" $ShieldAC ""- "Cover = "$Cover; fi
if [ "$SHIELDTYPE" = "Medium Shield" ] && [ "${dex[2]}" != "0" ]; then
echo $ShieldPrefix $SHIELDTYPE "+ Dex Bonus = AC" $ShieldAC ""- "Cover = "$Cover; fi

if [ "$SHIELDTYPE" = "Tower Shield" ]; then
echo $ShieldPrefix $SHIELDTYPE "= AC" $ShieldAC ""- "Cover = "$Cover; fi

if [ "$HelmBonus" != "0" ]; then
echo $HelmPrefix $MagHelmet = AC" $HelmBonus "; fi
if [ "$Misc_ItemBonus" != "0" ]; then
echo $Misc_ItemPrefix $MiscMag_Item = AC" $Misc_ItemBonus "; fi 
}

#################################################################
# Calculate Hit Points here before they're needed by calling the HitPoints function
HitPoints
#################################################################

if [ "$CompactFormat" = "Y" ]; then
########################## COMPACT SYSTEM #######################
echo
echo   "********* COMBAT BONUSES ********* ********** SAVING THROWS *********** ******* ROGUE SKILLS *******"
echo   "╔════════════════════════════════╗ ╔══════════════════════════════════╗ ╔══════════════════════════╗"
printf "║ BASE STRENGTH ATTACK BONUS  `printf "%2s" "$BMAB"` "| sed 's/^\(.\{33\}\)/\1║/'; 
printf " ║ Paralysis/Poison/Death Magic  "; printf "%2s" "$PPDM" | sed 's/^\(.\{4\}\)/\1║/'; 
printf "  ║ Pick Pockets         `printf "%3s" "$PickPockets"` " | sed 's/^\(.\{1\}\)/\1║/'     | sed 's/^\(.\{30\}\)/\1║/'   	; printf '\n%s' 
echo ╚════════════════════════════════╝	""║ Rod/Staff/Wand"		   `printf "%2s" "$RSW"` " ║ Open Locks "           "`printf "%2s" "$OpenLocks"`  | sed -e 's/^\(.\{59\}\)/\1║/' -e 's/^\(.\{87\}\)/\1 ║/' 
echo ╔════════════════════════════════╗	""║ Petrification/Polymorph"       `printf "%2s" "$PP"` " "║ Find/Remove Traps     "`printf "%2s" "$FindRemoveTraps"`  | sed -e 's/^\(.\{70\}\)/\1║/' -e 's/^\(.\{98\}\)/\1 ║/'
printf "║ BASE DEXTERITY ATTACK BONUS `printf "%2s" "$BDAB"` "| sed 's/^\(.\{33\}\)/\1║/'; 
printf " ║ Breath Weapon                 "; printf "%2s" "$BW" | sed 's/^\(.\{4\}\)/\1║/'; 
printf "  ║ Move Silently        `printf "%3s" "$MoveSilently"` " | sed 's/^\(.\{1\}\)/\1║/'     | sed 's/^\(.\{30\}\)/\1║/'   	; printf '\n%s' 
echo ╚════════════════════════════════╝	""║ Spells"			   `printf "%2s" "$SP"` " "║ Hide in Shadows       "`printf "%2s" "$HideinShadows"`| sed -e 's/^\(.\{52\}\)/\1║/' -e 's/^\(.\{80\}\)/\1 ║/' 
	if [ "$ATYPE" = "Rogue" ]; then
echo 	"(Backstab Multiplier x $BackStabMult)          "╚══════════════════════════════════╝           "║ Detect Noise          "`printf "%2s" "$DetectNoise"`| sed -e 's/^\(.\{98\}\)/\1 ║/'; else
echo    "				   "╚══════════════════════════════════╝                  "║ Detect Noise          "`printf "%2s" "$DetectNoise"`| sed -e 's/^\(.\{70\}\)/\1 ║/'; fi
echo "******************** ARMOR CLASS RATINGS ***************************    ║ Climb Walls           "`printf "%2s" "$ClimbWalls"`| sed -e 's/^\(.\{98\}\)/\1 ║/' 
echo ╔═════════════╗ ╔══════════════════╗ ╔═════════════╗ ╔═════════════╗"    ║ Read Languages        "`printf "%2s" "$ReadLanguages"`| sed -e 's/^\(.\{98\}\)/\1 ║/' 
echo ║ TOTAL AC $ArmorClass ║	║ SHIELDLESS AC $ShieldlessAC ║ ║ REAR AC"  "`printf "%2s" "$RearAC"` ║ ║ TOUCH AC `printf "%2s" "$TouchAC"` ║"    ╚══════════════════════════╝"
echo ╚═════════════╝ ╚══════════════════╝ ╚═════════════╝ ╚═════════════╝ "    ******* HIT POINTS ******* "

if [ "$HP" -le "9" ]; then 
echo "                                                                              ╔═════════════╗"                             
echo "                                                                              ║ TOTAL HP " `printf "%2s" "$HP"` ""║
echo "*** ARMOR PIECES ***                                                          ╚═════════════╝"
PrintArmor; fi

if [ "$HP" -ge "10" ] && [ "$HP" -le "99" ]; then 
echo "                                                                              ╔══════════════╗"                             
echo "                                                                              ║ TOTAL HP " `printf "%2s" "$HP"` ""║
echo "*** ARMOR PIECES ***                                                          ╚══════════════╝"
PrintArmor; fi

if [ "$HP" -ge "100" ]; then 
echo "                                                                              ╔═══════════════╗"                             
echo "                                                                              ║ TOTAL HP " `printf "%2s" "$HP"`" "║
echo "*** ARMOR PIECES ***                                                          ╚═══════════════╝"
PrintArmor ; fi
echo
	else
######################### CLASSIC SYSTEM ########################
echo
echo "*** COMBAT BONUSES ***""				 ""*** SAVING THROWS ***"
echo ╔════════════════════════════════╗	"     "╔══════════════════════════════════╗
printf "║ BASE STRENGTH ATTACK BONUS  `printf "%2s" "$BMAB"`    "| sed 's/^\(.\{33\}\)/\1║/'; printf  "   ║ Paralysis/Poison/Death Magic  "; printf "%2s" "$PPDM" "   " | sed 's/^\(.\{3\}\)/\1║/';  printf '\n%s' 
echo ╚════════════════════════════════╝	"     "║ Rod/Staff/Wand       "	        `printf "%2s" "$RSW"`  " | sed 's/^\(.\{69\}\)/\1║/'
echo ╔════════════════════════════════╗	"     "║ Petrification/Polymorph  "      `printf "%2s" "$PP"`   " | sed 's/^\(.\{75\}\)/\1║/'
printf "║ BASE DEXTERITY ATTACK BONUS `printf "%2s" "$BDAB"`    "| sed 's/^\(.\{33\}\)/\1║/'; printf  "   ║ Breath Weapon                 "; printf "%2s" "$BW"   "   " | sed 's/^\(.\{3\}\)/\1║/';  printf '\n%s'
echo ╚════════════════════════════════╝	"     "║ Spells"		        `printf "%2s" "$SP"`  " | sed 's/^\(.\{61\}\)/\1║/'
	if [ "$ATYPE" = "Rogue" ]; then
echo 	"(Backstab Multiplier x $BackStabMult)""               ╚══════════════════════════════════╝"
	else
echo 	"				        "╚══════════════════════════════════╝;fi

echo "*** ARMOR PIECES ***"
PrintArmor
echo
echo "*** ARMOR CLASS RATINGS ***" "			   ""*** ROGUE SKILLS ***"
echo ╔═════════════╗	╔══════════════════╗"	        "╔══════════════════════════╗ 
echo ║ TOTAL AC $ArmorClass ║	║ SHIELDLESS AC $ShieldlessAC ║"	     	"║ Pick Pockets "        `printf "%3s" "$PickPockets"`         	"| sed 's/^\(.\{70\}\)/\1║/'
echo ╚═════════════╝	╚══════════════════╝"	     	"║ Open Locks "	       `printf "%3s" "$OpenLocks"`              "| sed 's/^\(.\{68\}\)/\1║/'
echo ╔═════════════╗	╔═════════════╗"	        	"║ Find/Remove Traps "   `printf "%3s" "$FindRemoveTraps"`  "| sed 's/^\(.\{68\}\)/\1║/'
echo ║ REAR AC"  "`printf "%2s" "$RearAC"` ║ ║ TOUCH AC `printf "%2s" "$TouchAC"` ║"                 "║ Move Silently "       `printf "%3s" "$MoveSilently"`   "| sed 's/^\(.\{75\}\)/\1║/'
echo ╚═════════════╝	╚═════════════╝"		      	"║ "Hide in Shadows""      `printf "%3s" "$HideinShadows"` "| sed 's/^\(.\{67\}\)/\1║/'
printf "                                                ║ Detect Noise         "; printf "%3s" "$DetectNoise" "       "| sed 's/^\(.\{4\}\)/\1║/'; printf '\n%s'
printf "*** HIT POINTS ***                              ║ Climb Walls          "; printf "%3s" "$ClimbWalls" "          "| sed 's/^\(.\{4\}\)/\1║/'; printf '\n%s'

if [ "$HP" -le "99" ]; then 
echo ╔═════════════╗"                                 "║ Read Languages "      `printf "%3s" "$ReadLanguages"`      "| sed 's/^\(.\{75\}\)/\1║/'
printf "║ TOTAL HP "; printf "%2s" "$HP" " "║"                                 "╚══════════════════════════╝
printf '\n%s\n' '╚═════════════╝'; fi

if [ "$HP" -ge "100" ]; then 
echo ╔══════════════╗"                                "║ Read Languages "      `printf "%3s" "$ReadLanguages"`      "| sed 's/^\(.\{75\}\)/\1║/'
printf "║ TOTAL HP "; printf "%2s" "$HP" " "║"                                "╚══════════════════════════╝
printf '\n%s\n' '╚══════════════╝'; fi; fi

#============================================================
# Generate Money in here somewhere!
#============================================================
# WORKING AS INTENDED


echo "*** MONEY AND VALUABLES ***"

let "GoldMod = $RANDOM % 50000 +35000"
let "SilverMod = $RANDOM % 30000 +15000"
let GOLD=$(( $LEVEL * $GoldMod / 314 ))
let SILVER=$(( $LEVEL * $SilverMod / 271 ))
let ABAR=$(( $LEVEL * $GoldMod / 9140 ))
let BBAR=$(( $LEVEL * $SilverMod / 4271 ))
let RPYR=$(( $LEVEL * $GoldMod / 414 ))
let BPYR=$(( $LEVEL * $SilverMod / 297 ))
let WPYR=$(( $LEVEL * $GoldMod / 996 ))
let DTB=$(( $LEVEL * $GoldMod / 81700 ))
let ZGP=$(( $LEVEL * $GoldMod / 337 ))		#Zan Gold Pentacles
let ZSP=$(( $LEVEL * $SilverMod / 189 ))	#Zan Silver Pentacles

# Options: 1) Moonguard 2) Ta'an 3) Badlands 4) Dragonreach 5) Iron Forest 6) Grand Dutchy 7) Qualashaierenenian 8) Zan 9) Lathi 10) Loxodon 11) Wastes 12) Quilatha

case "$Play_Region" in
	1)	echo $GOLD "Gold Bucks""	"$SILVER "Silver Myrs" 					;;
	2)	echo $BBAR "Bronze Trade Bars"" "$ABAR "Adamant Trade Bars"				;;
	3)	echo $GOLD "Gold Bucks"									;;
	4)	echo $RPYR "Red Pyramids""	"$BPYR "Black Pyramids""    "$WPYR "White Pyramids"	;;
	5)												;;
	6)	echo $SILVER "Silver Myrs"								;;
	7)												;;
	8)												;;
	9)												;;
	10)												;;
	11)												;;
	12)												;;
esac

echo $GOLD "Gold Bucks""	"$SILVER "Silver Myrs" 
#echo $DTB "Dwarven Trade Bars"" "$ABAR "Adamant Trade Bars"	#Polish this up some more
#echo $BBAR "Bronze Trade Bars"" "$RPYR "Red Pyramids"
#echo $BPYR "Black Pyramids" "   "$WPYR "White Pyramids"	
echo

#Calculate Gear based on level 
#============================================================

# Generate Items
# These are the "base items" from the adventurer's pack.
echo "*** MUNDANE ITEMS CARRIED ***"
echo "10' square tarp		1 Bedroll		50' Hemp rope		1/2 gallon wineskin"
echo "6 Tent stakes		2 torches		1 Flint & steel		1 Tinderbox"
echo "Backpack, small		2 Crampons		10 Pitons		1 week dry rations"
echo -n "1 Small hammer		" # This concatanates the lines below with this entry.

# This generates 12 random additional items based on character archetype

if [ "$ATYPE" = "Warrior" ]
then  	cat ./"gear/Witems.txt" | sort --random-sort |head -n 3| pr --columns 4 -aT -W95; 
	cat ./"gear/Witems.txt" | sort --random-sort |head -n 12| pr --columns 4 -aT -W95; fi
if [ "$ATYPE" = "Priest" ]
then  	cat ./"gear/Pitems.txt" | sort --random-sort |head -n 3| pr --columns 4 -aT -W95; 
	cat ./"gear/Pitems.txt" | sort --random-sort |head -n 12| pr --columns 4 -aT -W95;fi
if [ "$ATYPE" = "Rogue" ]
then  	cat ./"gear/Ritems.txt" | sort --random-sort |head -n 3| pr --columns 4 -aT -W95; 
	cat ./"gear/Ritems.txt" | sort --random-sort |head -n 12| pr --columns 4 -aT -W95;fi
if [ "$ATYPE" = "Wizard" ]
then  	cat ./"gear/Mitems.txt" | sort --random-sort |head -n 3| pr --columns 4 -aT -W95; 
	cat ./"gear/Mitems.txt" | sort --random-sort |head -n 12| pr --columns 4 -aT -W95;fi
echo

echo "*** MAGICAL ITEMS CARRIED ***"

# What follows is a 2nd Edition tit-for-tat implementation of magic item generation from the DMG
# This is NOT going to be pretty.
 
Level_Check2=$(($LEVEL - 1 * 2 ))

#Limits for Paladins & Clerics #############################################################
if [ "$CLASS" = "Paladin" ] && [ "$Level_Check2" -ge "4" ]; then Level_Check2=4;fi   #
if [ "$CLASS" = "Paladin" ] && [ "$Level_Check2" -ge "10" ]; then Level_Check2=10;fi #
############################################################################################
Magic_Item_Get=0 	# Setting this to 1 will (virtually) guarantee magic items
MagItems=()
until [ "$Level_Check2" -le "0" ]; do 
	let "Magic_Item_Check = $RANDOM % 5 + 1"
if [ "$Magic_Item_Check" = "5" ]; then let Magic_Item_Get+=1; fi
if [ "$Magic_Item_Get" -ge "1" ]; then let "MagicItemRoll = $RANDOM % 60 + 1"

if [ "$MagicItemRoll" -ge "1" ] && [ "$MagicItemRoll" -le "20" ]; 	then MICategory="PotionsOils"; fi
if [ "$MagicItemRoll" -ge "21" ] && [ "$MagicItemRoll" -le "35" ]; 	then MICategory="Scrolls"; fi
if [ "$MagicItemRoll" -ge "36" ] && [ "$MagicItemRoll" -le "40" ]; 	then MICategory="Rings"; fi
if [ "$MagicItemRoll" -ge "41" ]; 					then MICategory="Rods"; fi
if [ "$MagicItemRoll" -ge "42" ]; 					then MICategory="Staves"; fi
if [ "$MagicItemRoll" -ge "43" ] && [ "$MagicItemRoll" -le "45" ]; 	then MICategory="Wands"; fi
if [ "$MagicItemRoll" -ge "46" ]; 					then MICategory="BooksTomes"; fi
if [ "$MagicItemRoll" -ge "47" ] && [ "$MagicItemRoll" -le "48" ]; 	then MICategory="JewelsJewelry"; fi
if [ "$MagicItemRoll" -ge "49" ] && [ "$MagicItemRoll" -le "50" ]; 	then MICategory="CloaksRobes"; fi
if [ "$MagicItemRoll" -ge "51" ] && [ "$MagicItemRoll" -le "52" ]; 	then MICategory="BootsGloves"; fi
if [ "$MagicItemRoll" -ge "53" ]; 					then MICategory="GirdlesHelms"; fi
if [ "$MagicItemRoll" -ge "54" ] && [ "$MagicItemRoll" -le "55" ]; 	then MICategory="BagsBottles"; fi
if [ "$MagicItemRoll" -ge "56" ]; 					then MICategory="DustsStones"; fi
if [ "$MagicItemRoll" -ge "57" ]; 					then MICategory="HouseholdTools"; fi
if [ "$MagicItemRoll" -ge "58" ]; 					then MICategory="MusicalInstruments"; fi
if [ "$MagicItemRoll" -ge "59" ] && [ "$MagicItemRoll" -le "60" ]; 	then MICategory="TheWeirdStuff"; fi; fi

# Arrays for MICategories

PotionsOils=( "Potion_of_Animal_Control" "Potion_of_Clairaudience" "Potion_of_Clairvoyance" "Potion_of_Climbing" "Potion_of_Diminution" "Potion_of_Dragon_Control" "Elixer_of_Health" "Elixer_of_Youth" "Potion_of_ESP" "Potion_of_Fire_Breath" "Potion_of_Fire_Resistance" "Potion_of_Flying" "Potion_of_Gaseous_Form" "Potion_of_Giant_Control" "Potion_of_Giant_Strength" "Potion_of_Growth" "Potion_of_Healing" "Potion_of_Healing" "Potion_of_Extra_Healing" "Potion_of_Extra_Healing" "Potion_of_Heroism" "Potion_of_Human_Control" "Potion_of_Invisibility" "Potion_of_Invulnerability" "Potion_of_Levitation" "Potion_of_Longevity" "Oil_of_Acid_Resistance" "Oil_of_Disenchantment" "Oil_of_Elemental_Invulnerability" "Oil_of_Etherealness" "Oil_of_Fiery_Burning" "Oil_of_Impact" "Oil_of_Slipperiness" "Oil_of_Timelessness" "Philter_of_Glibness" "Philter_of_Love" "Philter_of_Persuasiveness" "Potion_of_Plant_Control" "Potion_of_Polymorph_Self" "Potion_of_Rainbow_Hues" "Potion_of_Speed" "Potion_of_Super-Heroism" "Potion_of_Sweet_Water" "Potion_of_Treasure_Finding" "Potion_of_Undead_Control" "Potion_of_Ventriloquism" "Potion_of_Vitality" "Potion_of_Water_Breathing" )

Scrolls=( "Mysterious_Map" "Scroll_-_Prot._Acid" "Scroll_-_Prot._Cold" "Scroll_-_Prot._Dragon_Breath" "Scroll_-_Prot._Electricity" "Scroll_-_Prot._Elementals" "Scroll_-_Prot._Fire" "Scroll_-_Prot._Gas" "Scroll_-_Prot._Lycanthropes" "Scroll_-_Prot._Magic" "Scroll_-_Prot._Petrification" "Scroll_-_Prot._Plants" "Scroll_-_Prot._Poison" "Scroll_-_Prot._Possession" "Scroll_-_Prot._Undead" )

Rings=( "Ring_of_Animal_Friendship" "Ring_of_Blinking" "Ring_of_Chameleon_Power" "Ring_of_Archon_Summoning" "Ring_of_Elemental_Command" "Ring_of_Feather_Falling" "Ring_of_Fire_Resistance" "Ring_of_Free_Action" "Ring_of_Human_Influence" "Ring_of_Invisibility" "Ring_of_Jumping" "Ring_of_Mammal_Control" "Ring_of_Mind_Shielding" "Ring_of_the_Ram" "Ring_of_Regeneraton" "Ring_of_Vampiric_Regeneration" "Ring_of_Shocking_Grasp" "Ring_of_Shooting_Stars" "Ring_of_Spell_Storing" "Ring_of_Spell_Turning" "Ring_of_Sustenance" "Ring_of_Swimming" "Ring_of_Telekenesis" "Ring_of_Truth" "Ring_of_Warmth" "Ring_of_Water_Walking" "Ring_of_Wishes" "Ring_of_Wizardry" "Ring_of_X-Ray_Vision" )

Rods=( "Rod_of_Absorption" "Rod_of_Absorption" "Rod_of_Alertness" "Rod_of_Alertness" "Rod_of_Beguiling" "Rod_of_Cancellation" "Rod_of_Cancellation" "Rod_of_Flailing" "Rod_of_Lordly_Might" "Rod_of_Passage" "Rod_of_Resurrection" "Rod_of_Rulership" "Rod_of_Security" "Rod_of_Security" "Rod_of_Smiting" "Rod_of_Smiting" "Rod_of_Splendor" "Rod_of_Terror" "Rod_of_Tentacles" )

Staves=( "Staff_of_Command" "Staff_of_Curing" "Staff_of_Curing" "Staff_of_the_Magi" "Staff_of_Power" "Staff_of_the_Serpent" "Staff_of_Slinging" "Staff_of_Slinging" "Staff_of_Striking" "Staff_of_Striking" "Staff_of_Swarming_Insects" "Staff_of_Thunder_&_Lightning" "Staff_of_Withering" "Staff_of_Withering" "Staff_of_the_Woodlands" )

Wands=( "Wand_of_Conjuration" "Wand_of_Earth_&_Stone" "Wand_of_Enemy_Detection" "Wand_of_Fear" "Wand_of_Fire" "Wand_of_Flame_Extinguishing" "Wand_of_Frost" "Wand_of_Illumination" "Wand_of_Illusion" "Wand_of_Lightning" "Wand_of_Magic_Detection" "Wand_of_Magic_Missiles" "Wand_of_Metal_&_Mineral_Detection" "Wand_of_Negation" "Wand_of_Paralyzation" "Wand_of_Polymorphing" "Wand_of_Secret_Door_&_Trap_Detection" "Wand_of_Size_Alteration" "Wand_of_Wonder" )

BooksTomes=( "Parador's_Blessed_Book" "Parador's_Blessed_Book" "Parador's_Blessed_Book" "Book_of_Exalted_Deeds" "Book_of_Infinite_Spells" "Book_of_Vile_Darkness" "Libram_of_Gainful_Conjuration" "Libram_of_Ineffable_Damnation" "Libram_of_Silver_Magic" "Manual_of_Bodily_Health" "Manual_of_Gainful_Exercise" "Manual_of_Golems" "Manual_of_Puissant_Skill_at_Arms" "Manual_of_Quickness_in_Action" "Manual_of_Stealthy_Pilfering" "Tome_of_Clear_Thought" "Tome_of_Leadership_and_Influence" "Tome_of_Understanding" "Vacuous_Grimoire" )

JewelsJewelry=( "Amulet_of_Life_Protection" "Amulet_of_the_Planes" "Amulet_of_Proof_Against_Detection_&_Location" "Amulet_vs._Undead" "Beads_of_Force" "Brooch_of_Shielding" "Gem_of_Brightness" "Gem_of_Insight" "Gem_of_Seeing" "Medallion_of_ESP" "Necklace_of_Adaptation" "Necklace_of_Missiles" "Necklace_of_Missiles" "Necklace_of_Prayer_Beads" "Pearl_of_Power" "Pearl_of_the_Sirines" "Pearl_of_Wisdom" "Periapt_of_Health" "Periapt_of_Proof_Against_Poison" "Periapt_of_Wound_Closure" "Phylactery_of_Faithfulness" "Phylactery_of_Long_Years" "Scarab_of_Enraging_Enemies" "Scarab_of_Insanity" "Scarab_vs._Golems" "Talisman_of_Pure_Good" "Talisman_of_the_Sphere" "Talisman_of_Ultimate_Evil" "Talisman_of_Zagy" )

CloaksRobes=( "Cloak_of_Arachnida" "Cloak_of_Displacement" "Cloak_of_Elvenkind" "Cloak_of_Elvenkind" "Nanawen's_Greencloak" "Cloak_of_the_Bat" "Cloak_of_the_Manta_Ray" "Robe_of_the_Archmagi" "Robe_of_Blending" "Robe_of_Eyes" "Robe_of_Scintillating_Colors" "Robe_of_Stars" "Robe_of_Useful_Items" "Robe_of_Useful_Items" )

BootsGloves=( "Boots_of_Elvenkind" "Boots_of_Levitation" "Boots_of_Speed" "Boots_of_Striding_&_Springing" "Boots_of_the_North" "Boots_of_Varied_Tracks" "Winged_Boots" "Bracers_of_Archery" "Bracers_of_the_Blinding_Strike" "Bracers_of_Brachiation" "Gauntlets_of_Dexterity" "Gauntlets_of_Ogre_Power" "Gauntlets_of_Swimming_&_Climbing" "Gloves_of_Missile_Snaring" "Slippers_of_Spider_Climbing" )

GirdlesHelms=( "Girdle_of_Dwarvenkind" "Girdle_of_Giant_Strength" "Girdle_of_Giant_Strength" "Girdle_of_Many_Pouches" "Hat_of_Disguise" "Helm_of_Brilliance" "Helm_of_Comp._Lang._&_Read._Magic" "Helm_of_Telepathy" "Helm_of_Underwater_Action" "Helm_of_Underwater_Action" )

BagsBottles=( "Alchemy_Jug" "Bag_of_Beans" "Bag_of_Holding" "Bag_of_Holding" "Bag_of_Holding" "Bag_of_Holding" "Bag_of_Tricks" "Beaker_of_Plentiful_Potions" "Bucknard's_Everfull_Purse" "Decanter_of_Endless_Water" "Archon_Bottle" "Eversmoking_Bottle" "Heward's_Handy_Haversack" "Iron_Flask" "Portable_Hole" "Pouch_of_Accessibility" )

DustsStones=( "Candle_of_Invocation" "Dust_of_Appearance" "Dust_of_Disappearance" "Dust_of_Dryness" "Dust_of_Illusion" "Dust_of_Tracelessness" "Dust_of_Sneezing_and_Choking" "Incense_of_Meditation" "Incense_of_Obsession" "Ioun_Stone" "Keoghtom's_Ointment" "Nolzur's_Marvelous_Pigments" "Philosopher's_Stone" "Sovereign_Glue" "Stone_of_Controlling_Earth_Elementals" "Stone_of_Good_Luck" "Stone_of_Weight" "Universal_Solvent" )

HouseholdTools=( "Brazier_of_Fire_Elemental_Command" "Brazier_of_Sleep_Smoke" "Broom_of_Flying" "Carpet_of_Flying" "Mattock_of_the_Titans" "Maul_of_the_Titans" "Mirror_of_Life_Trapping" "Mirror_of_Mental_Prowess" "Murlyund's_Spoon" "Rope_of_Climbing" "Rope_of_Climbing" "Rope_of_Entanglement" "Rug_of_Welcome" "Saw_of_Mighty_Cutting" "Spade_of_Colossal_Excavation" )

MusicalInstruments=( "Chime_of_Interruption" "Chime_of_Opening" "Chime_of_Hunger" "Drums_of_Deafening" "Drums_of_Panic" "Harp_of_Charming" "Horn_of_Blasting" "Horn_of_Bubbles" "Horn_of_Collapsing" "Horn_of_Fog" "Horn_of_Goodness" "Horn_of_Evil" "Horn_of_the_Tritons" "Horn_of_Valhalla" "Lyre_of_Building" "Pipes_of_Haunting" "Pipes_of_Pain" "Pipes_of_Sounding" "Pipes_of_the_Sewers" )

TheWeirdStuff=( "Folding_Boat" "Folding_Boat" "Bowl_of_Water_Elemental_Command" "Censer_of_Air_Elemental_Control" "Crystal_Ball" "Crystal_Ball" "Cube_of_Force" "Cube_of_Frost_Resistance" "Cube_of_Frost_Resistance" "Cubic_Gate" "Daern's_Instant_Fortress" "Deck_of_Illusions" "Deck_of_Many_Things" "Eyes_of_Charming" "Eyes_of_Minute_Seeing" "Eyes_of_Petrification" "Eyes_of_the_Eagle" "Figurine_of_Wondrous_Power" "Figurine_of_Wondrous_Power" "Horseshoes_of_the_Zephyr" "Horseshoes_of_Speed" "Horseshoes_of_Speed" "Iron_Bands_of_Bilarro" "Lens_of_Detection" "Quaal's_Feather_Token" "Quiver_of_Nanawen" "Quiver_of_Nanawen" "Sheet_of_Smallness" "Sphere_of_Annihilation" "Stone_Horse" "Well_of_Many_Worlds" "Wind_Fan" "Wings_of_Flying" )


#This grabs items from the appropriate arrays and reads them into the list of selected magic items

# QUICK HACK! Let's check for bonus healing potions...
let "Healing_Potion_Check = $RANDOM % 3 + 1"
	if [ "$Healing_Potion_Check" = "3" ] && [ "$CLASS" != "Paladin" ]; then MagItems+=("Potion_of_Healing");fi
	if [ "$Healing_Potion_Check" = "4" ] && [ "$CLASS" != "Paladin" ]; then MagItems+=("Potion_of_Healing");fi
	if [ "$Healing_Potion_Check" = "5" ] && [ "$CLASS" != "Paladin" ]; then MagItems+=("Potion_of_Extra_Healing");fi

	if [ "$MICategory" = "PotionsOils" ];then 
	for index in `shuf --input-range=0-$(( ${#PotionsOils[*]} -1 )) | head -1`
	do MagItemResult=${PotionsOils[$index]}; MagItems+=($MagItemResult); done; fi
	if [ "$MICategory" = "Scrolls" ];then 
	for index in `shuf --input-range=0-$(( ${#Scrolls[*]} -1 )) | head -1`
	do MagItemResult=${Scrolls[$index]}; MagItems+=($MagItemResult); done; fi
	if [ "$MICategory" = "Rings" ];then 
	for index in `shuf --input-range=0-$(( ${#Rings[*]} -1 )) | head -1`
	do MagItemResult=${Rings[$index]}; MagItems+=($MagItemResult); done; fi
	if [ "$MICategory" = "Rods" ];then 
	for index in `shuf --input-range=0-$(( ${#Rods[*]} -1 )) | head -1`
	do MagItemResult=${Rods[$index]}; MagItems+=($MagItemResult); done; fi
	if [ "$MICategory" = "Staves" ];then 
	for index in `shuf --input-range=0-$(( ${#Staves[*]} -1 )) | head -1`
	do MagItemResult=${Staves[$index]}; MagItems+=($MagItemResult); done; fi
	if [ "$MICategory" = "Wands" ];then 
	for index in `shuf --input-range=0-$(( ${#Wands[*]} -1 )) | head -1`
	do MagItemResult=${Wands[$index]}; MagItems+=($MagItemResult); done; fi
	if [ "$MICategory" = "BooksTomes" ];then 
	for index in `shuf --input-range=0-$(( ${#BooksTomes[*]} -1 )) | head -1`
	do MagItemResult=${BooksTomes[$index]}; MagItems+=($MagItemResult); done; fi
	if [ "$MICategory" = "JewelsJewelry" ];then 
	for index in `shuf --input-range=0-$(( ${#JewelsJewelry[*]} -1 )) | head -1`
	do MagItemResult=${JewelsJewelry[$index]}; MagItems+=($MagItemResult); done; fi
	if [ "$MICategory" = "CloaksRobes" ];then 
	for index in `shuf --input-range=0-$(( ${#CloaksRobes[*]} -1 )) | head -1`
	do MagItemResult=${CloaksRobes[$index]}; MagItems+=($MagItemResult); done; fi
	if [ "$MICategory" = "BootsGloves" ];then 
	for index in `shuf --input-range=0-$(( ${#BootsGloves[*]} -1 )) | head -1`
	do MagItemResult=${BootsGloves[$index]}; MagItems+=($MagItemResult); done; fi
	if [ "$MICategory" = "GirdlesHelms" ];then 
	for index in `shuf --input-range=0-$(( ${#GirdlesHelms[*]} -1 )) | head -1`
	do MagItemResult=${GirdlesHelms[$index]}; MagItems+=($MagItemResult); done; fi
	if [ "$MICategory" = "BagsBottles" ];then 
	for index in `shuf --input-range=0-$(( ${#BagsBottles[*]} -1 )) | head -1`
	do MagItemResult=${BagsBottles[$index]}; MagItems+=($MagItemResult); done; fi
	if [ "$MICategory" = "DustsStones" ];then 
	for index in `shuf --input-range=0-$(( ${#DustsStones[*]} -1 )) | head -1`
	do MagItemResult=${DustsStones[$index]}; MagItems+=($MagItemResult); done; fi
	if [ "$MICategory" = "HouseholdTools" ];then 
	for index in `shuf --input-range=0-$(( ${#HouseholdTools[*]} -1 )) | head -1`
	do MagItemResult=${HouseholdTools[$index]}; MagItems+=($MagItemResult); done; fi
	if [ "$MICategory" = "MusicalInstruments" ];then 
	for index in `shuf --input-range=0-$(( ${#MusicalInstruments[*]} -1 )) | head -1`
	do MagItemResult=${MusicalInstruments[$index]}; MagItems+=($MagItemResult); done; fi
	if [ "$MICategory" = "TheWeirdStuff" ];then 
	for index in `shuf --input-range=0-$(( ${#TheWeirdStuff[*]} -1 )) | head -1`
	do MagItemResult=${TheWeirdStuff[$index]}; MagItems+=($MagItemResult); done; fi

let Level_Check2-=1 ;done

# These two lines print out the generated magic items. Everything 
# else can be moved up into the main body of the program. 

for value in "${MagItems[@]}"; do printf "%-8s\n" "${value}" | tr -s "_" " "
done | pr --columns 4 -aT -W115 

echo

# Background block - WORKING AS INTENDED!
#============================================================
# Generate Background, Motivation, Traits, & Habits
echo "*** CHARACTER BACKGROUND ***"

if [ "$RACE" = "Protean" ]; then
echo "Soldier - You were a regular in the army. You know how to give and take orders and function as part of a coherent and trained group. Sometimes the individuality of your companions in a combat situation gripes you, but you do what you can to not let it get to you. You may have given up on soldiering when you got out of the army, or maybe you like to sign on to mercenary groups because it's the only life you know. Either way, you got some good training out of the deal. Skills: Soldiers gain a +1 bonus to hit, damage, and their Armor Class rating when operating in a group with other soldiers. Bonus Skills: Athletics, Military Science, Endurance, and ONE of the following:  Ambidexterity, Charioteering, Blind Fighting, or Riding-Land Based."
else cat ./traits/"Background.txt" | sort -R |head -1; fi
echo
echo "*** CHARACTER TRAITS AND HABITS ***"
cat ./traits/"GeneralTraits.txt" | sort -R |head -1 | tr -d "\n"
echo " and " | tr -d "\n"
cat ./traits/"GeneralTraits.txt" | sort -R |head -1
if [ "$SEX" = "Male" ]; then
cat ./traits/"MaleTraits2.txt" | sort -R |head -1 | sed s/NAME/"$First"/g; fi
if [ "$SEX" = "Female" ]; then
cat ./traits/"FemaleTraits2.txt" | sort -R |head -1 | sed s/NAME/"$First"/g; fi
echo $First"'s birthday is on "$BMonth $BDate


BMI_Calc

if [ "$RACE" != "Relic" ] && [ "$RACE" != "Protean" ] && [ "$RACE" != "Selah" ]; then 
echo "With a strength of $STRthrow and a BMI of $BMI, $First is $BMI_Eval."; fi
echo

# Generate Skills
echo "*************************************** RACE AND CLASS ABILITIES ***************************************"

if [ "$Albino" = "Y" ] && [ "$PROTEAN" != "Y" ]; then
echo "* $First is an albino. $He is sensitive to sun exposure and bright lights, and sunburns easily."; fi
if [ "$Melanid" = "Y" ] && [ "$BEAST" = "Y" ]; then
echo "* $First has melanism and is coal-black from head to toe. $He stands out against snow and ice like"
echo "  a sore thumb."; fi

if [ "$RACE" = "Human" ]; then 
echo "* $First gains a 10% racial experience point bonus whenever experience is earned."
elif [ "$RACE" = "Elf" ]; then 
echo "* +1 to hit with longbows, shortbows, longswords, and shortswords."
echo "* 90% resistance to sleep and charm related spells and spell-like effects."
echo "* 50% resistance to all normal, non-magical diseases. (This does not apply to curses, such as" 
echo "  Mummy Rot or Lycanthropy.)"
echo "* 60 foot Infravision"
echo "* 1 in 6 chance to passively detect concealed doors when passing within 10 feet."
echo "* 1 in 2 chance to detect concealed doors or passageways when actively searching." 
echo "* 1 in 3 chance to detect secret doors or passages when actively searching."
echo "* May use reverie instead of lapsing into sleep."
echo "* Elves are comfortable in temperaures between 32°F and 100°F wearing only a loincloth. Beyond"
echo "  these extremes, they suffer the same penalties as anyone else."

elif [ "$RACE" = "Half-Elf" ]; then 
echo "* 30% resistance to sleep and charm related spells and effects."
echo "* 30 foot Infravision."

elif [ "$RACE" = "Dwarf" ]; then 
echo "* +1 bonus against Rod/Staff/Wand saves for every 3½ points of CON score."
echo "* All magic items not specifically suited to a Dwarf's class have a 20% chance to malfunction when used."
echo "  If the item is cursed, the Dwarf realizes its cursed nature and may dispose of it."
echo "* +1 to hit orcs, half-orcs, goblins, and hobgoblins"
echo "* +4 to hit giants, giant-kin, dragons, and dragon-kin."
echo "* Giants, giant-kin, dragons, and dragon-kin suffer a -4 penalty to hit Dwarves."
echo "* 85% chance to detect a grade or slope in a passage if within 10 feet of the slope."
echo "* 20% chance to detect new tunnel/passage construction if within 10 feet of the construction."
echo "* 25% chance to detect sliding/shifting walls or rooms if within 10 feet of the device."
echo "* 50% chance to detect stonework traps, pits, and deadfalls if within 10 feet of the device."
echo "* 70% chance to detect unsafe walls, ceiling, and floors if within 10 feet or said architecture."
echo "* 50% chance to determine approximate heading and direction while underground."
echo "* 50% chance to determine his/her approximate depth below ground at any time."
echo "  [None of these detections are passive. They must be deliberate actions on the part of the Dwarf.]"
echo "* 60 foot Infravision"

elif [ "$RACE" = "Kobold" ]; then 
echo "* Bite attack: (1d4 "${str[1]}")" | sed 's/+/+ /' 
echo "* +2 to Detect Noise rolls"
echo "* Kobold senses: (Track by Scent and Blind Fighting skills for free)." 
echo "* Animal Empathy: Kobolds recieve the Animal Handling skill for free."  
echo "* 5 foot Infravision"

elif [ "$RACE" = "Kenderkin" ]; then
echo "* Immune to all manner and forms of fear."
echo "* Can taunt an opponent into a blind rage requiring a save vs. Paralysis at -4. Foes so affected"
echo "  receive a -4 to both AC and attack rolls for 1d10 rounds. During this time, the taunted creature"
echo "  will attack the $RACE wildly and exclusively. The $RACE may then taunt again."
echo "* Eagle Eye: $RACE have excellent vision and can resolve objects half again as far away as elves in"
echo "  similar circumstances."
echo "* 30' Infravision."

elif [ "$RACE" = "Jaka" ]; then 
echo "* +3 to Climb Walls, Hide in Shadows, and Move Silently rogue skills."
echo "* Jaka possess a sixth sense that warns them of danger; as a result, they are never considered surprised" 
echo "  in combat"
echo "* Unencumbered Jaka take no damage from falls of up to 30 feet. (Falling from 40 feet would be"
echo "  considered to be a 10 foot fall)."
echo "* Animal Empathy: Jaka get the Animal Handling skill for free, regardless of class."  
echo "* Natural Weaponry: Jaka may do a claw attack for 1d4 "${str[1]}")" | sed 's/+/+ /'
echo "* Track by Scent as a free skill" 
echo "* Jaka will NOT wear boots or shoes of any kind"
echo "* Due to their close-minded nature, Jaka are suspicious of magic and will actively seek to destroy"
echo "  arcane spellbooks, wands, rods, and other such devices and trappings. They are okay with divine-"
echo "  oriented and shamanistic magic."
echo "* $First recieves a 10% racial experience point penalty to all experience earned."

elif [ "$RACE" = "Minotaur" ]; then 
echo "* Can unfailingly negotiate dungeons and mazes without becoming lost or disoriented."
echo "* 85% chance to detect a grade or slope in a passage if checking for one."
echo "* 70% chance to detect unsafe walls, ceilings, and floors if checking for them."
echo "* Charge Attack: If 15 or more feet from an opponent who is size M or smaller, a minotaur may charge and"
echo "  trample for 2d6 + STR bonus once every 3 rounds. This attack foregoes any and all melee attacks the"
echo "  character has available."
echo "* Animal Empathy; Minotaurs get the Animal Handling skill for free, regardless of class."  
echo "* +1 to hit with axes, warhammers, meteor hammers, and pike mauls"
echo "* $First possesses low-light vision to a range of 5 feet."

elif [ "$RACE" = "Alvani" ]; then 
echo "* Can utilize psionic powers"
echo "* Can transmit thoughts via psychic projection to any creature within 10 yards that is capable of"
echo "  speaking a language."
echo "* Can go without drink for 3 days with no ill effects."
echo "* Can go without food for a week without discomfort."
echo "* Can gain nourishment from even rotten meat and other spoiled food."
echo "* "$First "has $PSIPoints PSP's and can manifest" "$PowerSlots" "unique powers per day"

elif [ "$RACE" = "Redblood" ]; then 
echo "* $First gains a 5% racial experience point bonus whenever experience is earned."
echo "* $First is capable of passing for Human, should $he desire to do so."

elif [ "$RACE" = "Fairborn" ]; then 
echo "* $First regenerates 1 HP per minute."
echo "* Cannot wear tattoos, and even magical tattoos are 50% likely to heal."
echo "* 60 foot low-light vision"
echo "* Track by Scent as a free skill"  
echo "* Avoids fire and acid."

elif [ "$RACE" = "Greenblood" ]; then 
echo "* $First regenerates 1 HP per minute."
echo "* Cannot wear tattoos, and even magical tattoos are 50% likely to heal."
echo "* 60 foot low-light vision"
echo "* Track by Scent as a free skill"  
let "ColBlindChk=$RANDOM%2+1"
if [ "$ColBlindChk" = "1" ]; then echo "*" $First "does not possess color vision.";fi
echo "* Avoids fire and acid."

elif [ "$RACE" = "Halfblood" ]; then 
echo "* $First regenerates 2 HP per minute."
echo "* Cannot wear tattoos, and even magical tattoos are 50% likely to heal."
echo "* 90 foot low-light vision"
echo "* 20 foot infravision"
echo "* Track by Scent as a free skill" 
echo "* Automatically stabilize when reduced to 0 HP or less (Death still occurs at -10)."
echo "* Can regrow lost limbs."
echo "* Has a neurotic fear of fire and acid."
echo "*" $First "is both nearsighted and completely colorblind."

elif [ "$RACE" = "Lugan" ]; then 
echo "* High Jump: May perform a flat-footed 1d8 + 10' vertical leap"
echo "* Bunny Kick: May forfeit all melee attacks in a round to deliver a kick for 1d6 "${str[1]}" points of"| sed 's/+/+ /'
echo "  damage. Alternatively, $First can choose to render a man-sized or smaller opponent prone with this"
echo "  attack without doing damage if they fail a DEX check at -8."
echo "* Preturnatural Dodge: May forfeit all actions in a round to focus on avoiding incoming attacks at 40%"
echo "  plus 1% per level. Area-of-Effect attacks cannot be dodged via this ability."
echo "* 30' Infravision"
echo "* Eagle Eye: Members of this race possess the ability to resolve objects at a distance only slightly"
echo "  less far than Kenderkin. This translates to 20/10 vision."
echo "* $RACE may alter their personal body temperature (for survival purposes) by as much as 15°F up or down,"
echo "  as it suits them."
echo "* Members of this race do not understand sarcasm nor hyperbole, and take everything literally."

elif [ "$RACE" = "Waterfolk" ]; then 
echo "* $RACE have a base swimming speed of 18 and a base land speed of 6."
echo "* $RACE receive the Swimming skill at no cost" 
echo "* 60' low-light vision."
echo "* Aquavision: $RACE can see underwater just as well as others see on dry land without the use of masks"
echo "  or goggles - unfortunately, this renders their surface vision blurry, resulting in all Waterfolk being"
echo "  slightly nearsighted."
echo "* Dense coat prevents hypothermia in all but the most prolonged conditions (> 10°F), and provides"
echo "  limited protection against certain magical cold attacks, receiving 1 less point of damage per die."

elif [ "$RACE" = "Ursa" ]; then 
echo "* May strike bare-handed for 2d6 "${str[1]}" points of damage at the cost of drawing an attack of"| sed 's/+/+ /'
echo "  opportunity from all adjacent opponents."
echo "* Bear Hug: When landing two consecutive unarmed strikes, $First may choose to crush $his opponent"
echo "  in a bear hug for 1d8 "${str[1]}" points of damage. This may be maintained from round to round."| sed 's/+/+ /'
echo "* Bite Attack: $First may choose to bite $his opponents for 1d6 "${str[1]}" points of damage in melee"| sed 's/+/+ /'
echo "  combat in addition to any other attacks $he receives."  
echo "* Uncontrolled Rage; When suffering damage in combat, $First flies into a murderous rage until a"
echo "  successful save vs. Paralysis is made. Raging grants a temporary +1 to STR and an unshakable morale."
echo "  $First becomes impervious to pain for the duration of the rage, and the DM keeps track of $his hit"
echo "  points. If $his HP falls to -20 during the rage or if it should be at less than -10 when the rage" 
echo "  ends, the character dies."
echo "* Cold Resistance: Due to $his shaggy coat, $First takes 1 less point of damage per die when subjected"
echo "  to cold-based attacks."
echo "* Poor vision: $First suffers from mild nearsightedness and cannot clearly resolve objects at distances"
echo "  of greater than 60 feet. Of course, to $him this is completely normal."
echo "* Low-light vision - 60' range."

elif [ "$RACE" = "Selah" ]; then 
echo "* When coiled into a low profile, $First is almost impossible to render prone. $He is considered to be"
echo "  set to receive a charge, and gains a +2 to hit charging opponents while negating their +4 charging"
echo "  bonus."
echo "* $RACE cannot jump. But they can increase their effective height to 80% of their total length to reach"
echo "  higher objects and areas. Doing so exposes their soft underbellies to attacks, which are made at +2" 
echo "  to hit."
echo "* Can constrict opponents of size L or smaller for 1d4 + 6 damage each round unless an opposed STR check"
echo "  is made. 3 consecutive failures indicates that the victim has lost consciousness."
echo "* +1 to hit with regular and composite longbows and shortbows."
echo "* Venomous bite: $First can employ a paralytic bite against foes with an onset time of 2d12 rounds."
echo "* Prey detection: $First can taste the presence of prey in the air if within 60'"
echo "* Cold Blooded: $RACE suffer a +4 to all initiative rolls, reaction checks, and DEX-based abilities"
echo "  when temperatures fall below freezing."
echo "* $First receives a +6 bonus to all climbing checks when negotiating non-planar surfaces such as trees"
echo "  and rocks. Conversely, $he suffers a -6 penalty when attempting to climb walls."
echo "* if given time to acclimate to $his environment, $First is invisible to infravision."

elif [ "$RACE" = "Half-Orc" ]; then 
echo "* Blood Rage: $First can choose to enter a rage which confers an additional $PHP \"phantom\" hit points"
echo "  and renders $him impervious to pain for the duration of the rage. While raging, $First may continue"
echo "  fighting to -10 HP, whereupon $he falls over dead. The rage grants an extra attack per round, and all"
echo "  attacks are made at +2 to hit. Bonus HP are lost when the rage ends. If this loss brings $First's HP"
echo "  total to -10 or below, $he is considered to have died from $his wounds."
echo "* May exit rage with a successful Wisdom check."
echo "* 60' Infravision"

elif [ "$RACE" = "Protean" ]; then 
echo "* $First's metallic composition grants a base AC of 18."
echo "* Aboitic: $First-$Pat $Sur is immune to the effects of lightning bolt, burning hands, heat metal, chill"
echo "  metal, chain lightning, abi-dalzim's horrid wilting, stinking cloud, sleep, and cloudkill spells."
echo "* Only the hottest fire spells (i.e. those with an initial maximum exposure of 24 points or more),"
echo "  can hope to damage $First-$Pat $Sur."
echo "* $First-$Pat $Sur is susceptible to hail storm and wall of ice spells just like any biological creature."
echo "* $First-$Pat $Sur has no need of air or nourishment of any kind, and can function equally well"
echo "  underwater or in the black, airless reaches of space as well as $he can on land."
echo "* Proteans are immune to poison, including poison gas breath weapons. They are incapable of sleep."
echo "* Healing magic is ineffective on Proteans. Damage must be physically repaired with tradiitonal"
echo "  blacksmith tools, or ameliorated via mending and repair object spells."
echo "  $First-$Pat $Sur is capable of conducting self-repair at the rate of 1d6 points of damage per hour."
echo "* $First-$Pat $Sur can be repaired for almost any amount of damage, provided $his Core is intact. Should"
echo "  the Core ever become damaged, $First-$Pat $Sur is forevermore dead."
echo "* Members of this race cannot physically drink potions, but they may utilize various rubbed oils."

elif [ "$RACE" = "Rotan" ]; then 
echo "* Resistant to poison: $First automatically makes $his save vs. all weaker injected and contact poisons."
echo "  Only ingested poisons affect members of this race normally."
echo "* Should a contact or injected poison be of the 'save or die' variety, $First is merely rendered"
echo "  unconscious for a number of minutes equal to the damage for a successful save (no damage is actually" 
echo "  inflicted)."
echo "* Damage Reduction: All members of this race possess a hide which is remarkably resistant to being cut"
echo "  or pierced. It is equal to 5 points of damage plus 1 point per level of experience. Weapons of at"
echo "  least +1 enchantment bypass this reduction, and deal damage normally."
echo "* $First is impervious to fear of all kinds - the brain circuitry responsible simply does not exist."
echo "* Members of this race possess a hydrophobic coat so thick and oily that water pours off it. $First" 
echo "  gains a +1 to $his saving throws vs. all cold-based attacks, and a 10°F increase in personal body"
echo "  temperature."
echo "* Since $his coat is so water-repellent, sweat does not wick away from the skin as it would in members"
echo "  of other races. $First is twice as likely to have $his sweat freeze to $his skin, inviting hypothermia"
echo "  unless special precautions are taken to prevent this."; fi

if [ "$RACE" = "Gnooshe" ]; then 
echo "* $First receives the track by scent skill at no cost." #; Skillset+=("Track_by_Scent")
echo "* $First may choose to rage during combat once per day per level of experience. When doing so, $he gains"
echo "  a +1 bonus to TAB for every 4 levels of experience, an immunity to all mind-affecting spells such as" 
echo "  sleep, charm, and ESP, and 10 phantom hit points which disappear at the end of the rage." 
echo "* The blood-rage cannot be ended voluntarily, and must run its course once begun. It only fades once all"
echo "  opponents have been slain or $First has been rendered unconscious or killed."
echo "* $First receives a +1 to-hit bonus when attacking with any type of axe."; fi

if [ "$RACE" = "Elkan" ]; then 
echo "* Gains a +1 to hit with scimitars, longbows and short bows"
echo "* Closed-minded: $First suffers a 10% racial penalty to all experience earned."
echo "* $First possesses low-light vision to a range of 30 feet."
echo "* Easily startled: Any time $First is in a passive mood (read: not in combat), and experiences a sudden "
echo "  change in the environment such as a bright flash, a loud noise, or any unexpected event, $he must "
echo "  make a saving throw vs. paralysis. Failure indicates $he was caught flat-footed for three seconds." 
echo "  In such a case, $First gains no Dexterity bonus to AC, cannot cast spells, activate magic items, or "
echo "  launch any attacks until this time has elapsed. "
echo "* Affinity for Nature: If given an hour to study the local environment, $First can glean a single fact "
echo "  about the nearby region - up to a mile distant - as per the 5th level divine spell Commune With "
echo "  Nature."
echo "* Natural Weaponry: $First can employ $his powerful legs to kick for 1d4+3 damage against a foe if "
echo "  wearing metal shoes (and 1d2+3 if unshod), without drawing an attack of opportunity."; fi

if [ "$RACE" = "Relic" ]; then 
echo "* $First is asexual, and does not prefer a gender."
echo "* $First's metallic composition grants a base AC of 15."
echo "* Ancient: Due to $First's advanced age, $First begins play with 20 bonus skill points."
echo "* Slow Learner: $First's nature as a prototype synthetic organism means that all experience is earned"
echo "  at a 50% penalty."
echo "* Aboitic: $First-$Pat $Sur is immune to the effects of abi-dalzim's horrid wilting, stinking cloud, and "
echo "  cloudkill spells, and is not bothered by their effects."
echo "* Relics are immune to poison, including poison gas breath weapons."
echo "* Like biological organisms, $First requires sleep, and can even have dreams."
echo "  Additionally, lightning bolt, burning hands, heat metal, chill metal, and chain lightning spells do"
echo "  not cause lasting damage to a member of this race. However, $First-$Pat $Sur still finds them to be"
echo "  incredibly painful, and seeks to avoid exposure to them."
echo "* Very large and hot fires (those with an initial maximum exposure of 24 points of damage), affect"
echo "  Relics normally."
echo "* $First-$Pat $Sur is susceptible to hail storm and wall of ice spells just like any biological creature."
echo "* $First-$Pat $Sur has no need of air or nourishment of any kind, and can function equally well on dry"
echo "  land, underwater, or in the black, airless reaches of space."
echo "* Healing magic is ineffective on Relics. Damage must be physically repaired with tradiitonal blacksmith"
echo "  tools, or ameliorated via mending and repair object spells."
echo "* $First-$Pat $Sur can be repaired for almost any amount of damage, provided the Core remains intact."
echo "  Should the Core ever become damaged, $First-$Pat $Sur is forevermore dead."
echo "* Members of this race take half damage from slashing and piercing attacks."
echo "* Members of this race cannot physically drink potions, but they may utilize various rubbed oils."; fi

if [ "$RACE" = "Nibbin" ]; then
echo "* $First has exceptional night vision, being able to see as well in near total darkness as well as other"
echo "  races do in broad daylight."
echo "* Preturnatural Reflexes: $First is very difficult to surprise, being caught flat-footed only on a roll"
echo "  of a 1 on a 1d20.";fi

if [ "$RACE" = "Skall" ]; then
echo "Stuff goes here. STUB!"; fi

if [ "$RACE" = "Qhava" ]; then
echo "Stuff goes here. STUB!"; fi

if [ "$RACE" = "Koza" ]; then
echo "Stuff goes here. STUB!"; fi

if [ "$RACE" = "Vu" ]; then
echo "Stuff goes here. STUB!"; fi

if [ "$BonusXP" = "Y" ]; then
echo "* $First gains an additional 10% experience whenever experience is earned due to high ability scores."; fi 

if [ "$CLASS" = "Sorcerer" ];then
echo "* $First has $SpellPoints spell points"
echo "* $First can empower a spell to do maximum damage, achieve maximum range, or last for maximum duration"
echo "  by paying triple its casting cost."; fi

if [ "$CLASS" = "Ranger" ];then
echo "* "$First"'s Favored Enemies are "$SpEnemy
echo "* "$First"'s Primary Terrain is "$PrTerrain;fi

if [ "$CLASS" = "Fighter" ] && [ "$SpecNum" = "2" ];then
echo "* "$First" is a specialist in the use of the $SpecializedWeapon. $He makes all attacks with these weapons at +1" | tr -s "_" " "
echo "  to hit and inflicts 2 extra points of damage per attack." ; fi

if [ "$CLASS" = "Fighter" ] && [ "$SpecNum" = "3" ];then
echo "* "$First" is a Master of the $SpecializedWeapon. $He makes all attacks with these weapons at +3" | tr -s "_" " "
echo "  to hit and inflicts 3 extra points of damage per attack. Critical hit range is improved by 2."; fi

if [ "$CLASS" = "Fighter" ] && [ "$SpecNum" = "4" ];then
echo "* "$First" is a High Master of the $SpecializedWeapon. $He makes all attacks with these weapons at +3" | tr -s "_" " "
echo "  to hit and inflicts 3 extra points of damage per attack. Critical hit range is improved by 3."; fi

if [ "$CLASS" = "Fighter" ] && [ "$SpecNum" = "5" ];then
echo "* "$First" is a Grand Master of the $SpecializedWeapon. $He makes all attacks with these weapons at +3" | tr -s "_" " "
echo "  to hit and inflicts 3 extra points of damage per attack. Critical hit range is improved by 4,"
echo "  and all damage is rolled on the next highest size die."; fi

if [ "$CLASS" = "Shaman" ];then
echo "* "$First" may not turn undead, nor does $he have any special power over them."
echo "* Shamans may not use any modern weaponry or armor - only those items $he has crafted "$him"self from"
echo "  natural materials such as wood, vine, leather, sinew, and stone." 
echo "* May detect the presence of Order or Chaos by spending six seconds in meditation."
echo "* A shaman gains spells through $his alliances in the Spirit World. Each sphere the shaman may access"
echo "  requires a separate spirit ally to facilitate the connection. Should the spirit ally die or should"
echo "  the alliance be broken, (or should the spirit ally's confidence in the Shaman be shaken), $First loses"
echo "  access to the sphere that spirit ally represented until a new alliance is formed to replace it, or"
echo "  amends are made to restore the spirit's faith in the Shaman."
echo "* $First must build and maintain totems to access $his spirit allies (one per spirit), as well as a"
echo "  smaller, portable heart totem, which $he must carry on $his person at all times. Should this heart"
echo "  totem be destroyed, $First loses access to ALL $his spirit allies until it is replaced."
echo "* $First gains new spirit allies by spirit walking."
echo "* Should $First break a promise, act recklessly, or display particularly poor judgment, there is a"
echo "  cumulative 5% chance that one of $his spirit allies (randomly chosen), may abandon $him."
echo "* $First can enchant $his own magical weapons and armor, as well as make magical charms for others"; fi
if [ "$CLASS" = "Shaman" ]; then
	if [ "$LEVEL" -ge "3" ] && [ "$LEVEL" -le "4" ]; then
echo "* $First has a +2 to $his saving throw against poison, and automatically takes half damage from its"
echo "  effects."
echo "  A successful saving throw reduces poison damage and duration to 25%."; fi
if [ "$LEVEL" -ge "5" ] && [ "$LEVEL" -le "6" ]; then
echo "* $First has a +2 to $his saving throw against both poison and ice attacks, and automatically takes half"
echo "  damage from their effects. A successful saving throw reduces damage and duration to 25%."; fi
if [ "$LEVEL" -ge "7" ] && [ "$LEVEL" -le "8" ]; then
echo "* $First has a +2 to $his saving throw against poison, ice, and electrical attacks, and automatically takes"
echo "  half damage from their effects. A successful saving throw reduces damage and duration to 25%."; fi
if [ "$LEVEL" -ge "9" ] && [ "$LEVEL" -le "10" ]; then
echo "* $First has a +2 to $his saving throw against poison, ice, electrical, and fire attacks, and automatically"
echo "  takes half damage from their effects. A successful saving throw reduces damage and duration to 25%."; fi
if [ "$LEVEL" -ge "11" ] && [ "$LEVEL" -le "13" ]; then
echo "* Poisons no longer have any effect upon $First. However, $he retains the ability to note their presence"
echo "  when consumed."
echo "* $First has a +2 to $his saving throw against ice, electrical, and fire attacks, and automatically takes"
echo "  half damage from their effects. A successful saving throw reduces damage and duration to 25%."; fi
if [ "$LEVEL" -ge "14" ] && [ "$LEVEL" -le "16" ]; then
echo "* Poisons no longer have any effect upon $First. However, $he retains the ability to note their presence"
echo "  when consumed."
echo "* $First is now totally immune to the effects of ice and ice-based attacks with a maximum initial exposure"
echo "  of 24 points of damage or less. For attacks more virulent than this, the shaman automatically takes half-"
echo "  damage, with a successful saving throw (at a bonus of +4), reducing damage to 25%."
echo "* $First has a +2 to $his saving throw against electrical, and fire attacks, and automatically takes half"
echo "  damage from their effects. A successful saving throw reduces damage and duration to 25%."; fi
if [ "$LEVEL" -ge "17" ] && [ "$LEVEL" -le "19" ]; then
echo "* Poisons no longer have any effect upon $First. However, $he retains the ability to note their presence"
echo "  when consumed."
echo "* $First is totally immune to the effects of ice, ice-based, and minor electrical attacks (those with a "
echo "  maximum initial exposure of 24 points of damage or less). For the most extreme sources of ice or electrical"
echo "  damage, $First automatically takes half-damage, with a successful saving throw (at a bonus of +4),"
echo "  reducing damage to 25%. "; fi
if [ "$CLASS" = "Shaman" ] && [ "$LEVEL" -ge "20" ]; then
echo "* Poisons no longer have any effect upon $First. However, $he retains the ability to note their presence"
echo "  when consumed."
echo "* $First is totally immune to the effects of all but the most severe ice, electrical, and fire-based attacks"
echo "  (those with a maximum initial exposure of 24 points of damage or less). For attacks of this severity," 
echo "  $First automatically takes half-damage, with a successful saving throw (at a bonus of +4), reducing damage"
echo "  to 25%."; fi; fi

if [ "$CLASS" = "Arcanist" ]; then 
	let "NODE = $RANDOM % 18 + 1"
	if [ "$NODE" = "1" ]; then
echo "* "$First"'s Elemental node is Earth. $He takes a -2 penalty when casting spells from Ice, Vacuum, Lightning"
echo "  and Smoke. $He cannot cast any spells from the node of Air."; fi
	if [ "$NODE" = "2" ]; then
echo "* "$First"'s Elemental node is Fire. $He takes a -2 penalty when casting spells from Steam, Salt, Ice, and"
echo "  Ooze. $He cannot cast any spells from the node of Water."; fi
	if [ "$NODE" = "3" ]; then
echo "* "$First"'s Elemental node is Water. $He takes a -2 penalty when casting spells from Radiance, Ash, Smoke,"
echo "  and Magma. $He cannot cast any spells from the node of Fire."; fi
	if [ "$NODE" = "4" ]; then
echo "* "$First"'s Elemental node is Air. $He takes a -2 penalty when casting spells from Mineral, Dust, Magma,"
echo "  and Ooze. $He cannot cast any spells from the node of Earth."; fi
	if [ "$NODE" = "5" ]; then
echo "* "$First"'s Elemental node is Positive Material. $He takes a -2 penalty when casting spells from Vacuum,"
echo "  Salt, Dust, and Ash. $He cannot cast any spells from the node of Negative Material."; fi
	if [ "$NODE" = "6" ]; then
echo "* "$First"'s Elemental node is Negative Material. $He takes a -2 penalty when casting spells from Mineral,"
echo "  Steam, Lightning, and Radiance. $He cannot cast any spells from the node of Positive Material."; fi
	if [ "$NODE" = "7" ]; then
echo "* "$First"'s Elemental node is Ice. $He takes a -2 penalty when casting spells from Earth, Mineral, Radiance,"
echo "  Fire, Ash, and Dust. $He cannot cast any spells from the node of Magma."; fi
	if [ "$NODE" = "8" ]; then
echo "* "$First"'s Elemental node is Smoke. $He takes a -2 penalty when casting spells from Mineral, Steam, Earth,"
echo "  Water, Dust, and Salt. $He cannot cast any spells from the node of Ooze."; fi
	if [ "$NODE" = "9" ]; then
echo "* "$First"'s Elemental node is Magma. $He takes a -2 penalty when casting spells from Air, Water, Vacuum,"
echo "  Salt, Lightning, and Steam. $He cannot cast any spells from the node of Ice."; fi
	if [ "$NODE" = "10" ]; then
echo "* "$First"'s Elemental node is Ooze. $He takes a -2 penalty when casting spells from Air, Fire, Ash, Vacuum,"
echo "  Lightning, and Radiance. $He cannot cast any spells from the node of Smoke."; fi
	if [ "$NODE" = "11" ]; then
echo "* "$First"'s Elemental node is Radiance. $He takes a -2 penalty when casting spells from Negative Material,"
echo "  Water, Dust, Vacuum, Ice, and Ooze. $He cannot cast any spells from the node of Salt."; fi
	if [ "$NODE" = "12" ]; then
echo "* "$First"'s Elemental node is Lightning. $He takes a -2 penalty when casting spells from Air," 
echo "  Negative Material, Salt, Ash, Smoke, and Ice. $He cannot cast any spells from the node of Vacuum."; fi
	if [ "$NODE" = "13" ]; then
echo "* "$First"'s Elemental node is Steam. $He takes a -2 penalty when casting spells from Fire, Negative Material," 
echo "  Dust, Magma, Smoke, and Vacuum. $He cannot cast any spells from the node of Ash."; fi
	if [ "$NODE" = "14" ]; then
echo "* "$First"'s Elemental node is Mineral. $He takes a -2 penalty when casting spells from Earth," 
echo "  Negative Material, Ash, Salt, Ooze, and Magma. $He cannot cast any spells from the node of Dust."; fi
	if [ "$NODE" = "15" ]; then
echo "* "$First"'s Elemental node is Vacuum. $He takes a -2 penalty when casting spells from Air, Positive Material," 
echo "  Radiance, Steam, Smoke, and Ice. $He cannot cast any spells from the node of Lightning."; fi
	if [ "$NODE" = "16" ]; then
echo "* "$First"'s Elemental node is Ash. $He takes a -2 penalty when casting spells from Water, Positive Materal," 
echo "  Mineral, Lightning, Ice, and Ooze. $He cannot cast any spells from the node of Steam."; fi
	if [ "$NODE" = "17" ]; then
echo "* "$First"'s Elemental node is Dust. $He takes a -2 penalty when casting spells from Earth, Positive Materal," 
echo "  Radiance, Steam, Magma, and Ooze. $He cannot cast any spells from the node of Mineral."; fi
	if [ "$NODE" = "18" ]; then
echo "* "$First"'s Elemental node is Salt. $He takes a -2 penalty when casting spells from Fire, Lightning, Smoke," 
echo "  Positive Material, Mineral, and Magma. $He cannot cast any spells from the node of Radiance."; fi; fi

if [ "$CLASS" = "Specialty Priest" ]; then
    case "$SPEC" in 
      of\ Dawn)	
	if [ "$LEVEL" -ge "1" ] && [ "$LEVEL" -le "7" ]; then	
	echo "* Improved Turning Ability: $First may turn undead and summoned creatures from the lower planes as"
	echo "  if $he were one experience level higher."; fi
	if [ "$LEVEL" -ge "8" ] && [ "$LEVEL" -le "15" ]; then	
	echo "* Improved Turning Ability: $First may turn undead and summoned creatures from the lower planes as"
	echo "  if $he were two experience levels higher."; fi
	if [ "$LEVEL" -ge "16" ]; then	
	echo "* Improved Turning Ability: $First may turn undead and summoned creatures from the lower planes as"
	echo "  if $he were three experience levels higher."; fi
	if [ "$LEVEL" -ge "2" ]; then
	echo "* Dawn's Blessing: $First may Lay On Hands once per day, restoring $LEVEL hit points. They may"
	echo "  target themselves or someone else as they see fit."; fi
	if [ "$LEVEL" -ge "4" ] && [ "$LEVEL" -le "7" ]; then
	echo "* Remove Disease: Once per week, $First may cure a person suffering from a natural disease by merely"
	echo "  touching them."; fi
	if [ "$LEVEL" -ge "8" ] && [ "$LEVEL" -le "11" ]; then
	echo "* Remove Disease: Twice per week, $First may cure a person suffering from a natural disease by merely"
	echo "  touching them."; fi
	if [ "$LEVEL" -ge "12" ] && [ "$LEVEL" -le "15" ]; then
	echo "* Remove Disease: Thrice per week, $First may cure a person suffering from a natural disease by merely"
	echo "  touching them."; fi
	if [ "$LEVEL" -ge "16" ] && [ "$LEVEL" -le "19" ]; then
	echo "* Remove Disease: Four times per week, $First may cure a person suffering from a natural disease by"
	echo "  merely touching them."; fi
 	if [ "$LEVEL" -ge "4" ]; then
	echo "* Dawn's Touch: All healing spells cast by $First do a minimum of median damage per die (i.e. for a Cure"
	echo "  Light Wounds spell which heals 1d8 points of damage, all rolls of 1, 2, and 3 are treated as 4's). All"
	echo "  cure spells used to deal damage to undead creatures are treated normally."; fi
	if [ "$LEVEL" -ge "5" ] && [ "$LEVEL" -ge "9" ]; then
	echo "* Greater Turning Ability: In addition to the Improved Turning Ability listed above, $First gains a"
	echo "  bonus of +1 to his die roll when attempting to turn undead creatures."; fi
	if [ "$LEVEL" -ge "10" ] && [ "$LEVEL" -ge "14" ]; then
	echo "* Greater Turning Ability: In addition to the Improved Turning Ability listed above, $First gains a"
	echo "  bonus of +2 to his die roll when attempting to turn undead creatures."; fi
	if [ "$LEVEL" -ge "15" ] && [ "$LEVEL" -ge "20" ]; then
	echo "* Greater Turning Ability: In addition to the Improved Turning Ability listed above, $First gains a"
	echo "  bonus of +3 to his die roll when attempting to turn undead creatures."; fi
	if [ "$LEVEL" -ge "8" ]; then
	echo "* Draw Poison: $First may neutralize poison as per the priest spell of the same name once per week."; fi
	if [ "$LEVEL" -ge "12" ]; then
	echo "* Dawn's Greater Blessing: $First gains a +4 on all saving throws vs. disease."; fi
	if [ "$LEVEL" -ge "15" ]; then
	echo "* Hand of Dawn: $First automatically heals for the maximum possible damage anytime a healing spell is"
	echo "  used. Healing spells employed for the purpose of damaging undead have maximum effect."; fi
    ;;


      of\ Amar)			:	;;


      of\ Nanawen)
	if [ "$LEVEL" -le "7" ]; then
	echo "* Warden's Voice: $First may turn animals and natural creatures in the same manner that other priests"
	echo "  turn the undead. If a turning result indicates an animal is enthralled, it remains so for a number"
	echo "  of minutes equal to $First's level ($LEVEL). Only non-magical creatures with semi to low intelligence"
	echo "  may be turned or commanded in this way. (See "The Leaves of Nanawen" for more details.)"; fi
	if [ "$LEVEL" -ge "8" ] && [ "$LEVEL" -le "15" ]; then
	echo "* Warden's Voice: $First may turn animals and natural creatures in the same manner that other priests"
	echo "  turn the undead, but with a +1 bonus to $his roll. If a turning result indicates an animal is enthralled,"
	echo "  it remains so for a number of minutes equal to $First's level ($LEVEL). Only non-magical creatures with"
	echo "  semi to low intelligence may be turned or commanded in this way. (See "The Leaves of Nanawen" for more"
	echo "  details.)"; fi
	if [ "$LEVEL" -ge "16" ]; then
	echo "* Warden's Voice: $First may turn animals and natural creatures in the same manner that other priests"
	echo "  turn the undead, but with a +2 bonus to $his roll. If a turning result indicates an animal is enthralled,"
	echo "  it remains so for a number of minutes equal to $First's level ($LEVEL). Only non-magical creatures with"
	echo "  semi to low intelligence may be turned or commanded in this way. (See "The Leaves of Nanawen" for more"
	echo "  details.)"; fi
	if [ "$LEVEL" -le "4" ]; then
	echo "* Might of Seasons I: Once per fortnight, $First may perform a ritual which increases $his effective "
	echo "  level by 1 for a 24-hour period (sunrise to sunrise). This ritual grants bonus hit points, improved"
	echo "  saving throw values (when appropriate), and all aspects of combat as if the character actually"
	echo "  possessed the bonus level. The augmentation takes effect on the sunrise immediately following the "
	echo "  ritual. (See "The Leaves of Nanawen" for more details.)"; fi
	if [ "$LEVEL" -ge "5" ] && [ "$LEVEL" -le "9" ]; then
	echo "* Might of Seasons II: Once per fortnight, $First may perform a ritual which increases $his effective "
	echo "  level by 2 for a 24-hour period (sunrise to sunrise). This ritual grants bonus hit points, improved"
	echo "  saving throw values (when appropriate), and all aspects of combat as if the character actually"
	echo "  possessed the bonus level. The augmentation takes effect on the sunrise immediately following the "
	echo "  ritual. (See "The Leaves of Nanawen" for more details.)"; fi
	if [ "$LEVEL" -ge "10" ] && [ "$LEVEL" -le "14" ]; then
	echo "* Might of Seasons III: Once per fortnight, $First may perform a ritual which increases $his effective "
	echo "  level by 3 for a 24-hour period (sunrise to sunrise). This ritual grants bonus hit points, improved"
	echo "  saving throw values (when appropriate), and all aspects of combat as if the character actually"
	echo "  possessed the bonus level. The augmentation takes effect on the sunrise immediately following the "
	echo "  ritual. (See "The Leaves of Nanawen" for more details.)"; fi
	if [ "$LEVEL" -ge "15" ]; then
	echo "* Might of Seasons IV: Once per fortnight, $First may perform a ritual which increases $his effective "
	echo "  level by 4 for a 24-hour period (sunrise to sunrise). This ritual grants bonus hit points, improved"
	echo "  saving throw values (when appropriate), and all aspects of combat as if the character actually"
	echo "  possessed the bonus level. The augmentation takes effect on the sunrise immediately following the "
	echo "  ritual. (See "The Leaves of Nanawen" for more details.)"; fi
	if [ "$LEVEL" -ge "4" ]; then
	echo "* Arbyrian Tongue: $First has the ability to speak with animals as per the 2nd level priest spell."; fi
	if [ "$LEVEL" -ge "7" ]; then
	echo "* Greenchatter: $First may speak with plants as per the 5th level priest spell of the same name."; fi
	if [ "$LEVEL" -ge "8" ]; then
	echo "* Reverie of the Hunt: $First may divine the thoughts, images, and mental impressions from any natural"
	echo "  animal which $he can physically touch. $He experiences the animal's memories as if they were happening"
	echo "  to $him. Unwilling creatures are allowed a saving throw vs. paralysis to resist the intrusion."; fi
	if [ "$LEVEL" -ge "2" ]; then
	echo "* Nature's Emmisary: $First has the ability to heal any beastfolk characters more than once per day."
	echo "  Additionally, the animal healing spells will now function on beastfolk."; fi
	if [ "$LEVEL" -ge "10" ]; then
	echo "* Natural Dominion: Once per hour, $First may command any single natural animal to perform any given task"
	echo "  or to behave in whatever manner $he desires. The task of command must be something that the animal is"
	echo "  otherwise capable of doing. Commanding a horse to fly, for example, would automatically fail. Provided"
	echo "  the command is not destructive to the animal, no saving throw is allowed. Unwise or potentially harmful"
	echo "  commands grant the animal a save vs. paralysis to resist."; fi
      ;;


	of\ Vellis)		:	;;
	of\ Larian)		:	;;
	of\ Fifred)		:	;;


      of\ Damsinorlay)	
	echo "* Clarity of Mind: $First receives a +2 to all mind affecting spells, allowing $him to act without undue"
	echo "  magical influence that would cloud $his thinking."
	if [ "$LEVEL" -le "3" ]; then
	echo "* Ear for Truth: $First may detect lies once per day. This is not a passive ability - $he must actively"
	echo "  concentrate for it to work."; fi
	if [ "$LEVEL" -ge "4" ]; then
	echo "* Ear for Truth: $First may detect lies" $((LEVEL / 2))" times per day. This is not a passive ability - $he must actively"
	echo "  concentrate for it to work."; fi
	if [ "$LEVEL" -ge "3" ] && [ "$LEVEL" -le "14" ]; then
	echo "* Damsinorlay's Insight: Such is $First's devotion to gaining deeper understanding that $his Wisdom score"
	echo "  has been permanently increased by 1."; fi # This is accounted for in The Pile section above
	if [ "$LEVEL" -ge "5" ]; then
	echo "* Lesser Tongues: $First has a $(((((LEVEL - 5)/3)*5)+25))% chance to understand any one passage of a language"
	echo "  $he does not know, be it written word or spoken."; fi
	if [ "$LEVEL" -ge "7" ]; then
	echo "* Calming Word: Once per day $First may issue a calming word that quells all hostility within a 30' radius."
	echo "  Treat those affected by this ability as indifferent on the reaction table. Those affected may of course"
	echo "  become hostile again should the situation that brought on said hostility in the first place persist."; fi
	if [ "$LEVEL" -ge "12" ]; then
	echo "* Detect Lie: $First may unerringly detect any and all lies told to $him by any creature of equal or lesser"
	echo "  hit dice or level. Those of greater hit dice have a chance equal to 10% per level to successfully tell an"
	echo "  undetected lie. Thus, a 14 hit die creature attempting to lie to a 12th level priest has a 20% chance of "
	echo "  successfully doing so."; fi
	if [ "$LEVEL" -ge "15" ]; then
	echo "* Iron Will: Such is $First's devotion to gaining deeper understanding that $his Wisdom score has been"
	echo "  permanently increased by 2."; fi # This is accounted for in The Pile section above ... goddammit! spaghetti! SPAGHETTI EVERYWHERE!!!
    ;;


	of\ Patrakius)		:	;;
	of\ Isone)		:	;;
	of\ Gerna)		:	;;
	of\ Tyche)		:	;;
	of\ Parador)		:	;;



	of\ Mordain)		:	;; # This is the last deity I've got stuff for ... I think. Maybe Larian has some sketchy info? It's been a while so I don't remember.



	of\ Oleander)		:	;;
	of\ Llyr)		:	;;
# Evil gods' powers aren't done, but here are placeholder entries
	of\ Null\ the\ Reaver)	:	;;
	of\ Duruk)		:	;;
	of\ Khargoth)		:	;;
	of\ The\ Nameless)	:	;;
	of\ Cron)		:	;;
	of\ Askala)		:	;;
	of\ Imbindar)		:	;;
	of\ Vanda)		:	;;
    esac
fi
	
if [ "$WISthrow" = "19" ]; then
echo "* "$First"'s high Wisdom score renders $him immune to Cause Fear, Charm Person, Command, Friends, and"
echo "  Hypnotism spells."; fi

if [ "$WISthrow" = "20" ]; then
echo "* "$First"'s high Wisdom score renders $him immune to Cause Fear, Charm Person, Command, Friends," 
echo "  Hypnotism, Forget, Hold Person, Ray of Enfeeblement, and Scare spells."; fi

if [ "$WISthrow" = "21" ]; then
echo "* "$First"'s high Wisdom score renders $him immune to Cause Fear, Charm Person, Command, Friends,"
echo "  Hypnotism, Forget, Hold Person, Ray of Enfeeblement, Scare, and Fear spells."; fi

if [ "$WISthrow" = "22" ]; then
echo "* "$First"'s high Wisdom score renders $him immune to Cause Fear, Charm Person, Command, Friends,"
echo "  Hypnotism, Forget, Hold Person, Ray of Enfeeblement, Scare, Fear, Charm Monster, Confusion,"
echo "  Emotion, Fumble, and Suggestion spells."; fi

echo
echo "*** SKILLS & LANGUAGES ***"
#################################################################
# EACH SKILL AS ITS OWN VARIABLE ################################
# This is compressed like this to keep things (to my mind) tidy.
# I like short, sweet blocks of code, and this isn't really anything
# that can go wonky as I'm just defining variables and setting them
# to zero. They'll be incremented and read later.
Acting=0; Administration=0; Agriculture=0; Alchemy=0; Alertness=0; Alms=0; Ambidexterity=0; Anatomy=0; Ancient_Geography=0; Ancient_History=0; Animal_Handling=0; Animal_Lore=0; Animal_Noise=0; Animal_Rending=0; Animal_Training=0; Appraising=0; Arcanology=0; Archon_Lore=0; Armorer=0; Armorer_Crude=0; Artistic_Ability=0; Artist_Playwright=0; Assimilation=0; Astrology=0; Athletics=0; Begging=0; Blacksmithing=0; Blind_Fighting=0; Boating=0; Boatwright=0; Bookbinding=0; BowyerFletcher=0; BowyerFletcher_Crude=0; Brewing=0; Buffoonery=0; Bureaucracy=0; Butchering=0; Calligraphy=0; Camouflage=0; Carpentry=0; Cartography=0; Caving=0; Ceremony=0; Chanting=0; Charioteering=0; Cheesemaking=0; Chicanery=0; City_Familiarity=0; Clockwork_Creation=0; Close_Quarters_Fighting=0; Clothesmaking_Crude=0; Cobbling=0; Comedy=0; Concentration=0; Concocting=0; Cooking=0; Craft_Instrument=0; Crowd_Working=0; Cryptography=0; Dancing=0; Danger_Sense=0; Debate=0; Deep_Diving=0; Detect_Signing=0; Diagnostics=0; Direction_Sense=0; Dirty_Fighting=0; Disguise=0; Display_Weapon_Prowess=0; Distance_Sense=0; Dowsing=0; Dream_Interpretation=0; Drinking=0; Eating=0; Enamor=0; Enamor=0; Endurance=0; Engineering=0; Escape=0; Etiquette=0; Falconry=0; Fast_Talking=0; FeignDetect_Sleep=0; Fire_Building=0; Fishing=0; Flower_Arranging=0; Foraging=0; Forgery=0; Fortune_Telling=0; Gaming=0; Gem_Cutting=0; Glassblowing=0; Grooming=0; Haggling=0; Haggling=0; Hard_Running=0; Harness_Subconscious=0; Healing=0; Heraldry=0; Herbalism=0; Herbalism=0; Hiding=0; Hold_Breath=0; Horde_Summoning=0; Hunting=0; Hypnotism=0; Information_Gathering=0; Intimidation=0; Intimidation=0; Jousting=0; Juggling=0; Jumping=0; Landscape_Gardening=0; Languages_Ancient=0; Languages_Modern=0; Law=0; Leatherworking=0; Light_Sleeping=0; Lip_Reading=0; Local_History=0; Locksmithing=0; Looting=0; Masseur=0; Meditative_Focus=0; Medium=0; Mental_Resistance=0; Military_Science=0; Mining=0; Mountaineering=0; Mountaineering=0; Musical_Instrument=0; Mycology=0; Natural_Fighting=0; Navigation=0; Necrology=0; Netherworld_Knowledge=0; Numeracy=0; Numerology=0; Observation=0; Omen_Interpretation=0; Omen_Reading=0; Oratory=0; Orienteering=0; Origami=0; Papermaking=0; Persuasion=0; Pest_Control=0; Philosophy=0; Prophecy=0; Planology=0; Poetry=0; Pottery=0; Prestidigitation=0; Quick_Study=0; Reading_Lips=0; ReadingWriting=0; Recover_Scent=0; Religion=0; Research=0; Rhetoric=0; Riding_Airborne=0; Riding_Land_Based=0; Riding_Sea_Based=0; Rope_Use=0; Rowing=0; Running=0; Sage_Knowledge=0; Scribe=0; Sculpting=0; Seamanship=0; SeamstressTailor=0; Set_Snares=0; Shamanistic_Ritual=0; Shipwright=0; Signaling=0; Sign_Language=0; Silk_Making=0; Singing=0; Skinning=0; Slow_Respiration=0; Slow_Respiration=0; Smelting=0; Soothsaying=0; Sound_Analysis=0; Sound_Imitation=0; Spellcraft=0; Spell_Recovery=0; Spell_Specialization=0; Spelunking=0; Spirit_Lore=0; Stonemasonry=0; Style_Analysis=0; Survival=0; Swimming=0; Tactics_of_Magic=0; Tattooing=0; Thaumaturgy=0; Tightrope_Walking=0; Time_Sense=0; Toxicology=0; Track_by_Scent=0; Tracking=0; Trailing=0; Trail_Marking=0; Trail_Signs=0; Trance=0; Tumbling=0; Undead_Knowledge=0; Undead_Lore=0; Underclass=0; Venom_Handling=0; Ventriloquism=0; Veterinary_Healing=0; Voice_Mimicry=0; Weapon_Improvisation=0; Weaponsmithing=0; Weaponsmithing_Crude=0; Weather_Sense=0; Weaving=0; WhistlingHumming=0; Whitesmithing=0; Wild_Fighting=0; Winemaking=0; Woodcutting=0; Woodworking=0

#################################################################
# Set Racial Free Skills ########################################
if [ "$RACE" = "Relic" ]; then Sage_Knowledge=2; fi 
if [ "$RACE" = "Kobold" ]; then Track_by_Scent=2; Blind_Fighting=2 Animal_Handling=1; fi
if [ "$RACE" = "Jaka" ]; then Track_by_Scent=2; Animal_Handling+=1; fi
if [ "$RACE" = "Minotaur" ]; then Animal_Handling=1; fi
if [[ "$RACE" = "Fairborn" || "$RACE" = "Greenblood" || "$RACE" = "Halfblood" ]]; then Track_by_Scent=2; Animal_Handling=1; fi
if [ "$RACE" = "Waterfolk" ]; then Swimming=1; fi
if [ "$RACE" = "Gnooshe" ]; then Track_by_Scent=2; fi

#################################################################
# DEFINE SKILL ARRAY ############################################
SKILLARRAY=( "Blacksmithing" "Carpentry" "Intimidation" "Jumping" "Rowing" "Stonemasonry" "Swimming" "Woodcutting" "Ambidexterity" "Animal_Rending" "Athletics" "Bowyer/Fletcher" "Bowyer/Fletcher,_Crude" "Butchering" "Calligraphy" "Charioteering" "Chicanery" "Cobbling" "Dancing" "Display_Weapon_Prowess" "Forgery" "Glassblowing" "Jousting" "Juggling" "Locksmithing" "Looting" "Masseur"  "Musical_Instrument" "Origami" "Pottery" "Prestidigitation" "Rope_Use" "Scribe" "Seamanship" "Seamstress/Tailor" "Silk_Making" "Tattooing" "Tightrope_Walking" "Trailing" "Tumbling" "Whistling/Humming" "Woodworking" "Drinking" "Eating" "Hold_Breath" "Light_Sleeping" "Running" "Slow_Respiration" "Administration" "Agriculture" "Ancient_History" "Animal_Lore" "Appraising" "Arcanology" "Archon_Lore" "Armorer,_Crude" "Artist_/_Playwright" "Assimilation" "Boatwright" "Bookbinding" "Brewing" "Cartography" "Cheesemaking" "City_Familiarity" "Clothesmaking,_Crude" "Concocting" "Cooking" "Debate" "Feign/Detect_Sleep" "Foraging" "Heraldry" "Herbalism" "Languages,_Ancient" "Languages,_Modern" "Leatherworking" "Lip_Reading" "Local_History" "Military_Science" "Mountaineering" "Mycology" "Navigation" "Numeracy" "Omen_Interpretation" "Papermaking" "Planology" "Poetry" "Reading/Writing" "Research" "Set_Snares" "Sign_Language" "Signaling" "Smelting" "Spellcraft" "Spell_Specialization" "Spelunking" "Style_Analysis" "Tactics_of_Magic" "Thaumaturgy" "Trail_Signs" "Undead_Knowledge" "Ventriloquism" "Weaving" "Winemaking" "Animal_Handling" "Animal_Noise" "Animal_Training" "Artistic_Ability" "Boating" "Camouflage" "Diagnostics" "Direction_Sense" "Dowsing" "Falconry" "Fire-Building" "Fishing" "Flower_Arranging" "Hunting" "Landscape_Gardening" "Law" "Meditative_Focus" "Mental_Resistance" "Necrology" "Netherworld_Knowledge" "Omen_Reading" "Pest_Control" "Ancient_Geography" "Philosophy" "Prophecy" "Recover_Scent" "Religion" "Riding,_Land-based" "Shamanistic_Ritual" "Slow_Respiration" "Sound_Analysis" "Time_Sense" "Trail_Marking" "Undead_Lore" "Underclass" "Venom_Handling" "Veterinary_Healing" "Weapon_Improvisation" "Weaponsmithing,_Crude" "Weather_Sense" "Acting" "Alms" "Begging" "Buffoonery" "Ceremony" "Chanting" "Comedy" "Crowd_Working" "Dirty_Fighting" "Disguise" "Etiquette" "Fast_Talking" "Gaming" "Hypnotism" "Information_Gathering" "Intimidation" "Oratory" "Persuasion" "Rhetoric" "Singing" "Enamor" "Alertness" "Detect_Signing" "Observation" "Natural_Fighting" "Wild_Fighting" "Clockwork_Creation" "Close_Quarters_Fighting" "Craft_Instrument" "Deep_Diving" "Escape" "Gem_Cutting" "Grooming" "Riding,_Sea-based" "Sculpting" "Whitesmithing" "Endurance" "Hard_Running" "Alchemy" "Anatomy" "Ancient_Geography" "Armorer" "Astrology" "Bureaucracy" "Engineering" "Herbalism" "Hiding" "Numerology" "Reading_Lips" "Sage_Knowledge" "Shipwright" "Soothsaying" "Spell_Recovery" "Spirit_Lore" "Survival" "Toxicology" "Caving" "Concentration" "Danger_Sense" "Distance_Sense" "Dream_Interpretation" "Harness_Subconscious" "Healing" "Medium" "Mining" "Religion" "Riding,_Airborne" "Tracking" "Track_by_Scent" "Fortune_Telling" "Haggling" "Horde_Summoning" "Sound_Imitation" "Voice_Mimicry" "Haggling" "Blind_Fighting" "Cryptography" "Orienteering" "Weaponsmithing" "Quick_Study" )

#****************************************************************
# Originally there was a smaller, more compact, and less accurate
# skill selection algorithm which didn't do proper tracking of 
# skills as they were taken. It was coupled to an error checking
# function which was (hilariously), bugged itself.
#****************************************************************
#################################################################
function SkillTracking {  		#Pull the "Skill_Error_Check" function into this block and deprecate the "Skill_Error_Check" function
#					 If I'm right, this should be able to reproduce the functionality of SEC in a more elegant manner, as 
#					 well as track skill selections - a better solution all around!
#					 The "then let" column of variables is altered from the "Result" column to comply with BASH variable 
#					 name syntax rules. Otherwise there is an "unrecognized command" error.
if [ "$SkillsperLevel" -ge "1" ]; then
 if [ "$Result" = "Blacksmithing" ]; 		then let "Blacksmithing+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Carpentry" ]; 		then let "Carpentry+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Intimidation" ]; 		then let "Intimidation+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Jumping" ]; 			then let "Jumping+=1"; 			let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Rowing" ]; 			then let "Rowing+=1"; 			let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Stonemasonry" ]; 		then let "Stonemasonry+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Swimming" ] && [ "$RACE" != "Waterfolk" ]; then let "Swimming+=1"; 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Woodcutting" ]; 		then let "Woodcutting+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Ambidexterity" ]; 		then let "Ambidexterity+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Animal_Rending" ]; 		then let "Animal_Rending+=1";		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Athletics" ]; 		then let "Athletics+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Bowyer/Fletcher" ]; 		then let "BowyerFletcher+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Bowyer/Fletcher,_Crude" ]; 	then let "BowyerFletcher_Crude+=1"; 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Butchering" ]; 		then let "Butchering+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Calligraphy" ]; 		then let "Calligraphy+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Charioteering" ]; 		then let "Charioteering+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Chicanery" ]; 		then let "Chicanery+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Cobbling" ]; 		then let "Cobbling+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Dancing" ]; 			then let "Dancing+=1"; 			let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Display_Weapon_Prowess" ];	then let "Display_Weapon_Prowess+=1";	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Forgery" ]; 			then let "Forgery+=1"; 			let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Glassblowing" ]; 		then let "Glassblowing+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Juggling" ]; 		then let "Juggling+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Locksmithing" ]; 		then let "Locksmithing+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Looting" ]; 			then let "Looting+=1"; 			let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Masseur" ]; 			then let "Masseur+=1"; 			let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Mountaineering" ]; 		then let "Mountaineering+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Musical_Instrument" ]; 	then let "Musical_Instrument+=1"; 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Origami" ]; 			then let "Origami+=1";	 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Pottery" ]; 			then let "Pottery+=1"; 			let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Prestidigitation" ]; 	then let "Prestidigitation+=1"; 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Rope_Use" ]; 		then let "Rope_Use+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Scribe" ];	 		then let "Scribe+=1"; 			let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Seamanship" ];		then let "Seamanship+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Seamstress/Tailor" ];	then let "SeamstressTailor+=1";		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Silk_Making" ];	 	then let "Silk_Making+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Tattooing" ];	 	then let "Tattooing+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Tightrope_Walking" ];	then let "Tightrope_Walking+=1"; 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Trailing" ];	 		then let "Trailing+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Tumbling" ];	 		then let "Tumbling+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Whistling/Humming" ];	then let "WhistlingHumming+=1"; 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Woodworking" ];	 	then let "Woodworking+=1";		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Drinking" ] && [ "$PROTEAN" != "Y" ]; then let "Drinking+=1"; 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Eating" ] && [ "$PROTEAN" != "Y" ];	then let "Eating+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Hold_Breath" ] && [ "$PROTEAN" != "Y" ]; then let "Hold_Breath+=1";	let "SkillsperLevel-=1"; fi	
 if [ "$Result" = "Light_Sleeping" ] && [ "$PROTEAN" != "Y" ]; then let "Light_Sleeping+=1";	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Running" ];	 		then let "Running+=1"; 			let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Slow_Respiration" ] && [ "$PROTEAN" != "Y" ]; then let "Slow_Respiration+=1"; let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Administration" ];	 	then let "Administration+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Agriculture" ];	 	then let "Agriculture+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Ancient_History" ];	 	then let "Ancient_History+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Animal_Lore" ];	 	then let "Animal_Lore"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Appraising" ];		then let "Appraising+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Arcanology" ];	 	then let "Arcanology+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Archon_Lore" ];	 	then let "Archon_Lore+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Armorer,_Crude" ];		then let "Armorer_Crude+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Artist_/_Playwright" ];	then let "Artist_Playwright+=1"; 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Assimilation" ];	 	then let "Assimilation+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Boatwright" ];	 	then let "Boatwright+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Bookbinding" ];	 	then let "Bookbinding+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Brewing" ];	 		then let "Brewing+=1"; 			let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Cartography" ];	 	then let "Cartography+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Cheesemaking" ];	 	then let "Cheesemaking+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "City_Familiarity" ];	 	then let "City_Familiarity+=1"; 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Clothesmaking,_Crude" ];	then let "Clothesmaking_Crude+=1"; 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Concocting" ]; 		then let "Concocting+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Cooking" ];	 		then let "Cooking+=1"; 			let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Debate" ];	 		then let "Debate+=1"; 			let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Feign/Detect_Sleep" ];	then let "FeignDetect_Sleep+=1"; 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Foraging" ];	 		then let "Foraging+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Heraldry" ];	 		then let "Heraldry+=1";			let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Herbalism" ];	 	then let "Herbalism+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Languages,_Ancient" ];	then let "Languages_Ancient+=1"; 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Languages,_Modern" ];	then let "Languages_Modern+=1"; 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Leatherworking" ];		then let "Leatherworking+=1";		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Lip_Reading" ];	 	then let "Lip_Reading+=1";		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Local_History" ];	 	then let "Local_History+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Military_Science" ];	 	then let "Military_Science+=1"; 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Mycology" ];	 		then let "Mycology+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Navigation" ]; 		then let "Navigation+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Numeracy" ];	 		then let "Numeracy+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Omen_Interpretation" ];	then let "Omen_Interpretation+=1";	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Papermaking" ]; 		then let "Papermaking+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Planology" ];	 	then let "Planology+=1";		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Poetry" ];	 		then let "Poetry+=1"; 			let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Reading/Writing" ];		then let "ReadingWriting+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Research" ];	 		then let "Research+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Set_Snares" ];	 	then let "Set_Snares+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Sign_Language" ];	 	then let "Sign_Language+=1";		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Signaling" ];	 	then let "Signaling+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Smelting" ];	 		then let "Smelting+=1";			let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Spellcraft" ];	 	then let "Spellcraft+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Spell_Specialization" ];	then let "Spell_Specialization+=1";	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Spelunking" ];	 	then let "Spelunking+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Style_Analysis" ];	 	then let "Style_Analysis+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Tactics_of_Magic" ];		then let "Tactics_of_Magic+=1"; 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Thaumaturgy" ];		then let "Thaumaturgy+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Trail_Signs" ];	 	then let "Trail_Signs+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Undead_Knowledge" ];		then let "Undead_Knowledge+=1";		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Ventriloquism" ];	 	then let "Ventriloquism+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Weaving" ];	 		then let "Weaving+=1"; 			let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Winemaking" ];	 	then let "Winemaking+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Animal_Handling" ];	 	then let "Animal_Handling+=1";		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Animal_Noise" ];	 	then let "Animal_Noise+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Animal_Training" ];		then let "Animal_Training+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Artistic_Ability" ];		then let "Artistic_Ability+=1"; 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Boating" ];	 		then let "Boating+=1"; 			let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Camouflage" ]; 		then let "Camouflage+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Diagnostics" ]; 		then let "Diagnostics+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Direction_Sense" ];		then let "Direction_Sense+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Dowsing" ];	 		then let "Dowsing+=1"; 			let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Falconry" ];	 		then let "Falconry+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Fire-Building" ]; 		then let "Fire_Building+=1";		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Fishing" ];	 		then let "Fishing+=1"; 			let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Flower_Arranging" ];		then let "Flower_Arranging+=1"; 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Hunting" ];	 		then let "Hunting+=1"; 			let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Landscape_Gardening" ];	then let "Landscape_Gardening+=1"; 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Law" ];	 		then let "Law+=1"; 			let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Meditative_Focus" ] && [ "$RACE" = "Alvani" ]; then let "Meditative_Focus+=1"; let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Mental_Resistance" ];	then let "Mental_Resistance+=1"; 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Necrology" ];		then let "Necrology+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Netherworld_Knowledge" ];	then let "Netherworld_Knowledge+=1"; 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Omen_Reading" ];		then let "Omen_Reading+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Pest_Control" ];		then let "Pest_Control+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Ancient_Geography" ];	then let "Ancient_Geography+=1"; 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Philosophy" ];		then let "Philosophy+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Prophecy" ];			then let "Prophecy+=1";		 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Recover_Scent" ];		then let "Recover_Scent+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Religion" ];			then let "Religion+=1";	 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Riding,_Land-Based" ];	then let "Riding_Land_Based+=1"; 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Shamanistic_Ritual" ];	then let "Shamanistic_Ritual+=1"; 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Slow_Respiration" ];		then let "Slow_Respiration+=1"; 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Sound_Analysis" ];		then let "Sound_Analysis+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Time_Sense" ];		then let "Time_Sense+=1";	 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Trail_Marking" ];		then let "Trail_Marking+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Undead_Lore" ];		then let "Undead_Lore+=1";	 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Underclass" ];		then let "Underclass+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Venom_Handling" ];		then let "Venom_Handling+=1";	 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Veterinary_Healing" ];	then let "Veterinary_Healing+=1"; 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Weapon_Improvisation" ];	then let "Weapon_Improvisation+=1"; 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Weaponsmithing,_Crude" ];	then let "Weaponsmithing_Crude+=1"; 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Weather_Sense" ];		then let "Weather_Sense+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Acting" ];			then let "Acting+=1"; 			let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Alms" ];			then let "Alms+=1"; 			let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Begging" ];			then let "Begging+=1";		 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Buffoonery" ];		then let "Buffoonery+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Ceremony" ];			then let "Ceremony+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Chanting" ];			then let "Chanting+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Comedy" ];			then let "Comedy+=1";		 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Crowd_Working" ];		then let "Crowd_Working=1";	 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Dirty_Fighting" ];		then let "Dirty_Fighting+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Disguise" ];			then let "Disguise+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Enamor" ];			then let "Enamor+=1";	 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Etiquette" ];		then let "Etiquette+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Fast_Talking" ];		then let "Fast_Talking+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Gaming" ];			then let "Gaming+=1";	 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Hypnotism" ];		then let "Hypnotism+=1";	 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Information_Gathering" ];	then let "Information_Gathering+=1";	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Intimidation" ];		then let "Intimidation+=1";	 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Oratory" ];			then let "Oratory+=1";	 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Persuasion" ];		then let "Persuasion+=1";		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Rhetoric" ];			then let "Rhetoric+=1";	 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Singing" ];			then let "Singing+=1";	 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Alertness" ];		then let "Alertness+=1";	 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Detect_Signing" ];		then let "Detect_Signing+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Observation" ];		then let "Observation+=1";	 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Natural_Fighting" ] && [ "$Natural_Fighting" -ge 2 ] && [ "$BEAST" = "Y" ]; 	then let "Natural_Fighting+=1"; let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Wild_Fighting" ] && [ "$Wild_Fighting" -ge 2 ]; 		then let "Wild_Fighting+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Clockwork_Creation" ] && [ "$Clockwork_Creation" -ge 2 ]; 	then let "Clockwork_Creation+=1"; 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Craft_Instrument" ] && [ "$Craft_Instrument" -ge 2 ]; 	then let "Craft_Instrument+=1"; 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Deep_Diving" ] && [ "$Deep_Diving" -ge 2 ]; 			then let "Deep_Diving+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Escape" ] && [ "$Escape" -ge 2 ]; 				then let "Escape+=1"; 			let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Gem_Cutting" ] && [ "$Gem_Cutting" -ge 2 ]; 			then let "Gem_Cutting+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Grooming" ] && [ "$Grooming" -ge 2 ]; 			then let "Grooming+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Riding,_Sea-based" ] && [ "$Riding_Sea_Based" -ge 2 ]; 	then let "Riding_Sea_Based+=1"; 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Sculpting" ] && [ "$Sculpting" -ge 2 ]; 			then let "Sculpting+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Whitesmithing" ] && [ "$Whitesmithing" -ge 2 ]; 		then let "Whitesmithing+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Endurance" ] && [ "$Endurance" -ge 2 ]; 			then let "Endurance+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Hard_Running" ] && [ "$Hard_Running" -ge 2 ]; 		then let "Hard_Running+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Alchemy" ] && [ "$Alchemy" -ge 2 ]; 				then let "Alchemy+=1"; 			let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Anatomy" ] && [ "$Anatomy" -ge 2 ]; 				then let "Anatomy+=1"; 			let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Ancient_Geography" ] && [ "$Ancient_Geography" -ge 2 ];	then let "Ancient_Geography+=1"; 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Armorer" ] && [ "$Armorer" -ge 2 ]; 				then let "Armorer+=1"; 			let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Astrology" ] && [ "$Astrology" -ge 2 ]; 			then let "Astrology+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Bureaucracy" ] && [ "$Bureaucracy" -ge 2 ]; 			then let "Bureaucracy+=1";		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Engineering" ] && [ "$Engineering" -ge 2 ]; 			then let "Engineering+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Herbalism" ] && [ "$Herbalism" -ge 2 ]; 			then let "Herbalism+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Hiding" ] && [ "$Hiding" -ge 2 ]; 				then let "Hiding+=1"; 			let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Numerology" ] && [ "$Numerology" -ge 2 ]; 			then let "Numerology+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Reading_Lips" ] && [ "$Reading_Lips" -ge 2 ]; 		then let "Reading_Lips+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Shipwright" ] && [ "$Shipwright" -ge 2 ]; 			then let "Shipwright+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Soothsaying" ] && [ "$Soothsaying" -ge 2 ]; 			then let "Soothsaying+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Spell_Recovery" ] && [ "$Spell_Recovery" -ge 2 ] && [ "$ATYPE" = "Wizard" ]; then let "Spell_Recovery+=1"; let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Cryptography" ] && [ "$Cryptography" -ge 3 ]; 		then let "Cryptography+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Orienteering" ] && [ "$Orienteering" -ge 3 ]; 		then let "Orienteering+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Weaponsmithing" ] && [ "$Weaponsmithing" != "0" ]; 		then let "Weaponsmithing+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Spirit_Lore" ] && [ "$Spirit_Lore" -ge 2 ]; 			then let "Spirit_Lore+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Survival" ] && [ "$Survival" -ge 2 ]; 			then let "Survival+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Toxicology" ] && [ "$Toxicology" -ge 2 ]; 			then let "Toxicology+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Caving" ] && [ "$Caving" -ge 2 ]; 				then let "Caving+=1"; 			let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Concentration" ] && [ "$Concentration" -ge 2 ]; 		then let "Concentration+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Danger_Sense" ] && [ "$Danger_Sense" -ge 2 ]; 		then let "Danger_Sense+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Distance_Sense" ] && [ "$Distance_Sense" -ge 2 ]; 		then let "Distance_Sense+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Dream_Interpretation" ] && [ "$Dream_Interpretation" -ge 2 ]; then let "Dream_Interpretation+=1"; 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Harness_Subconscious" ] && [ "$Harness_Subconscious" -ge 2 ] && [ "$RACE" = "Alvani" ]; then let "Harness_Subconscious+=1"; 	let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Healing" ] && [ "$Healing" -ge 2 ]; 				then let "Healing+=1"; 			let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Medium" ] && [ "$Medium" -ge 2 ]; 				then let "SMedium+=1"; 			let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Mining" ] && [ "$Mining" -ge 2 ]; 				then let "Mining+=1"; 			let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Religion" ] && [ "$Religion" -ge 2 ]; 			then let "Religion+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Riding,_Airborne" ] && [ "$Riding_Airborne" -ge 2 ]; 	then let "Riding_Airborne+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Tracking" ] && [ "$Tracking" -ge 2 ]; 			then let "Tracking+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Track_by_Scent" ] && [ "$Track_by_Scent" -ge 2 ] && [ "$BEAST" = "Y" ]; then let "Track_by_Scent+=1"; let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Trance" ] && [ "$Trance" -ge 2 ];				then let "Trance+=1"; 			let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Fortune_Telling" ] && [ "$Fortune_Telling" -ge 2 ]; 		then let "Fortune_Telling+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Haggling" ] && [ "$Haggling" -ge 2 ]; 			then let "Haggling+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Horde_Summoning" ] && [ "$Horde_Summoning" -ge 2 ] && [ "$PROTEAN" != "Y" ]; then let "Horde_Summoning+=1"; let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Sound_Imitation" ] && [ "$Sound_Imitation" -ge 2 ]; 		then let "Sound_Imitation+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Voice_Mimicry" ] && [ "$Voice_Mimicry" -ge 2 ]; 		then let "Voice_Mimicry+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Haggling" ] && [ "$Haggling" -ge 2 ]; 			then let "Haggling+=1"; 		let "SkillsperLevel-=1"; fi
 if [ "$Result" = "Blind_Fighting" ] && [ "$Blind_Fighting" -ge 2 ]; 		then let "Blind_Fighting+=1"; 		let "SkillsperLevel-=1"; fi; fi
if [ "$SkillsperLevel" -ge "2" ]; then 
 if [ "$Result" = "Natural_Fighting" ] && [ "$Natural_Fighting" = "0" ] && [ "$BEAST" = "Y" ]; then let "Natural_Fighting+=2"; let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Wild_Fighting" ] && [ "$Wild_Fighting" = "0" ]; 		then let "Wild_Fighting+=2"; 		let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Clockwork_Creation" ] && [ "$Clockwork_Creation" = "0" ]; 	then let "Clockwork_Creation+=2"; 	let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Craft_Instrument" ] && [ "$Craft_Instrument" = "0" ]; 	then let "Craft_Instrument+=2"; 	let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Deep_Diving" ] && [ "$Deep_Diving" = "0" ]; 			then let "Deep_Diving+=2"; 		let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Escape" ] && [ "$Escape" = "0" ];			 	then let "Escape+=2"; 			let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Gem_Cutting" ] && [ "$Gem_Cutting" = "0" ]; 			then let "Gem_Cutting+=2"; 		let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Grooming" ] && [ "$Grooming" = "0" ]; 			then let "Grooming+=2"; 		let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Riding,_Sea-based" ] && [ "$Riding_Sea_Based" = "0" ]; 	then let "Riding_Sea_Based+=2"; 	let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Sculpting" ] && [ "$Sculpting" = "0" ]; 			then let "Sculpting+=2"; 		let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Whitesmithing" ] && [ "$Whitesmithing" = "0" ]; 		then let "Whitesmithing+=2"; 		let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Endurance" ] && [ "$Endurance" = "0" ]; 			then let "Endurance+=2"; 		let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Hard_Running" ] && [ "$Hard_Running" = "0" ]; 		then let "Hard_Running+=2"; 		let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Alchemy" ] && [ "$Alchemy" = "0" ]; 				then let "Alchemy+=2"; 			let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Anatomy" ] && [ "$Anatomy" = "0" ]; 				then let "Anatomy+=2"; 			let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Ancient_Geography" ] && [ "$Ancient_Geography" = "0" ]; 	then let "Ancient_Geography+=2"; 	let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Armorer" ] && [ "$Armorer" = "0" ]; 				then let "Armorer+=2"; 			let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Astrology" ] && [ "$Astrology" = "0" ]; 			then let "Astrology+=2"; 		let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Bureaucracy" ] && [ "$Bureaucracy" = "0" ]; 			then let "Bureaucracy+=2";		let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Engineering" ] && [ "$Engineering" = "0" ]; 			then let "Engineering+=2"; 		let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Herbalism" ] && [ "$Herbalism" = "0" ]; 			then let "Herbalism+=2"; 		let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Hiding" ] && [ "$Hiding" = "0" ]; 				then let "Hiding+=2"; 			let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Numerology" ] && [ "$Numerology" = "0" ]; 			then let "Numerology+=2"; 		let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Reading_Lips" ] && [ "$Reading_Lips" = "0" ]; 		then let "Reading_Lips+=2"; 		let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Trance" ] && [ "$Trance" = "0" ];				then let "Trance+=2"; 			let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Sage_Knowledge" ] && [ "$Sage_Knowledge" = "0" ]; 		then let "Sage_Knowledge+=2"; 		let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Shipwright" ] && [ "$Shipwright" = "0" ]; 			then let "Shipwright+=2"; 		let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Soothsaying" ] && [ "$Soothsaying" = "0" ]; 			then let "Soothsaying+=2"; 		let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Spell_Recovery" ] && [ "$Spell_Recovery" = "0" ] && [ "$ATYPE" = "Wizard" ]; then let "Spell_Recovery+=2"; let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Spirit_Lore" ] && [ "$Spirit_Lore" = "0" ]; 			then let "Spirit_Lore+=2"; 		let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Survival" ] && [ "$Survival" = "0" ]; 			then let "Survival+=2"; 		let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Toxicology" ] && [ "$Toxicology" = "0" ]; 			then let "Toxicology+=2"; 		let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Caving" ] && [ "$Caving" = "0" ]; 				then let "Caving+=2"; 			let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Concentration" ] && [ "$Concentration" = "0" ]; 		then let "Concentration+=2"; 		let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Danger_Sense" ] && [ "$Danger_Sense" = "0" ]; 		then let "Danger_Sense+=2"; 		let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Distance_Sense" ] && [ "$Distance_Sense" = "0" ]; 		then let "Distance_Sense+=2"; 		let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Dream_Interpretation" ] && [ "$Dream_Interpretation" = "0" ]; then let "Dream_Interpretation+=2"; 	let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Harness_Subconscious" ] && [ "$Harness_Subconscious" = "0" ] && [ "$RACE" = "Alvani" ]; then let "Harness_Subconscious+=2"; 	let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Healing" ] && [ "$Healing" = "0" ]; 				then let "Healing+=2"; 			let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Medium" ] && [ "$Medium" = "0" ]; 				then let "SMedium+=2"; 			let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Mining" ] && [ "$Mining" = "0" ]; 				then let "Mining+=2"; 			let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Religion" ] && [ "$Religion" = "0" ]; 			then let "Religion+=2"; 		let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Riding,_Airborne" ] && [ "$Riding_Airborne" = "0" ]; 	then let "Riding_Airborne+=2"; 		let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Tracking" ] && [ "$Tracking" = "0" ]; 			then let "Tracking+=2"; 		let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Track_by_Scent" ] && [ "$Track_by_Scent" = "0" ] && [ "$BEAST" = "Y" ]; then let "Track_by_Scent+=2"; let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Fortune_Telling" ] && [ "$Fortune_Telling" = "0" ]; 		then let "Fortune_Telling+=2"; 		let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Haggling" ] && [ "$Haggling" = "0" ]; 			then let "Haggling+=2"; 		let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Horde_Summoning" ] && [ "$Horde_Summoning" = "0" ] && [ "$PROTEAN" != "Y" ]; then let "Horde_Summoning+=2"; let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Sound_Imitation" ] && [ "$Sound_Imitation" = "0" ]; 		then let "Sound_Imitation+=2"; 		let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Voice_Mimicry" ] && [ "$Voice_Mimicry" = "0" ]; 		then let "Voice_Mimicry+=2"; 		let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Haggling" ] && [ "$Haggling" = "0" ]; 			then let "Haggling+=2"; 		let "SkillsperLevel-=2"; fi
 if [ "$Result" = "Blind_Fighting" ] && [ "$Blind_Fighting" = "0" ]; 		then let "Blind_Fighting+=2"; 		let "SkillsperLevel-=2"; fi; fi
if [ "$SkillsperLevel" -ge "3" ]; then 
 if [ "$Result" = "Cryptography" ] && [ "$Cryptography" = "0" ]; 		then let "Cryptography+=3"; 		let "SkillsperLevel-=3"; fi
 if [ "$Result" = "Orienteering" ] && [ "$Orienteering" = "0" ]; 		then let "Orienteering+=3"; 		let "SkillsperLevel-=3"; fi
 if [ "$Result" = "Weaponsmithing" ] && [ "$Weaponsmithing" = "0" ]; 		then let "Weaponsmithing+=3"; 		let "SkillsperLevel-=3"; fi; fi
if [ "$SkillsperLevel" -ge "8" ] && [ "$INTthrow" -ge "18" ] && [ "$Result" = "Quick_Study" ] && [ "$Quick_Study" = "0" ]; then let "Quick_Study=+8"; let "SkillsperLevel-=8"; fi; }

#################################################################
# SKILL SELECT LOOP #############################################
# This was over two hundred lines. Now it's awesome!
 if [ "$RACE" = "Relic" ]; then let SkillsperLevel+=20; fi 
 while [ "$SkillsperLevel" -ge "1" ];do 	
	for index in `shuf --input-range=0-$(( ${#SKILLARRAY[*]} -1 )) | head -1`
		do Result=${SKILLARRAY[$index]}; SkillTracking; done; done

#################################################################
# Strength Skills
  if [ "$Blacksmithing" != "0" ]; 	then Skillset+=("Blacksmithing_($Blacksmithing)_STR/$(( $STRthrow + ( $Blacksmithing - 1 )))"); fi
  if [ "$Carpentry" != "0" ]; 		then Skillset+=("Carpentry_($Carpentry)_STR/$(( $STRthrow + ( $Carpentry - 1 )))"); fi
if [ "$STRthrow" -ge "$CHAthrow" ]; then
	if [ "$Intimidation" != "0" ]; 		then Skillset+=("Intimidation_($Intimidation)_STR/$(( $STRthrow + ( $Intimidation - 1 )))"); fi; fi
	if [ "$Jumping" != "0" ]; 		then Skillset+=("Jumping_($Jumping)_STR/$(( $STRthrow + ( $Jumping - 1 )))"); fi
	if [ "$Natural_Fighting" != "0" ];	then Skillset+=("Natural_Fighting_($Natural_Fighting)_STR/$(( $STRthrow + ( $Natural_Fighting - 2 )))"); fi
	if [ "$Rowing" != "0" ]; 		then Skillset+=("Rowing_($Rowing)_STR/$(( $STRthrow + ( $Rowing - 1 )))"); fi
	if [ "$Stonemasonry" != "0" ]; 		then Skillset+=("Stonemasonry_($Stonemasonry)_STR/$((( $STRthrow - 2 ) + ( $Stonemasonry - 1 )))"); fi
	if [ "$Swimming" != "0" ]; 		then Skillset+=("Swimming_($Swimming)_STR/$(( $STRthrow + ( $Swimming - 1 )))"); fi
	if [ "$Wild_Fighting" != "0" ]; 	then Skillset+=("Wild_Fighting_($Wild_Fighting)_STR/$(( $STRthrow + ( $Wild_Fighting - 2 )))"); fi
	if [ "$Woodcutting" != "0" ]; 		then Skillset+=("Woodcutting_($Woodcutting)_STR/$(( ( $STRthrow - 2 ) + ( $Woodcutting - 1 )))"); fi
#################################################################
# Dexterity Skills
  if [ "$Ambidexterity" != "0" ]; 	then Skillset+=("Ambidexterity_($Ambidexterity)_DEX/$(( $DEXthrow + ( $Ambidexterity - 1 )))"); fi
  if [ "$Animal_Rending" != "0" ]; 	then Skillset+=("Animal_Rending_($Animal_Rending)_DEX/$((( $DEXthrow + 2 ) + ( $Animal_Rending - 1 )))"); fi
  if [ "$Athletics" != "0" ]; 		then Skillset+=("Athletics_($Athletics)_DEX/$((( $DEXthrow - 1 ) + ( $Athletics - 1 )))"); fi
  if [ "$BowyerFletcher" != "0" ]; 	then Skillset+=("Bowyer/Fletcher_($BowyerFletcher)_DEX/$((( $DEXthrow - 1 ) + ( $BowyerFletcher - 1 )))"); fi
  if [ "$BowyerFletcher_Crude" != "0" ]; then Skillset+=("Bowyer/Fletcher,_Crude_($BowyerFletcher_Crude)_DEX/$(( $DEXthrow + ( $BowyerFletcher_Crude - 1 )))"); fi
  if [ "$Butchering" != "0" ]; 		then Skillset+=("Butchering_($Butchering)_DEX/$((( $DEXthrow - 2 ) + ( $Butchering - 1 )))"); fi
  if [ "$Calligraphy" != "0" ]; 	then Skillset+=("Calligraphy_($Calligraphy)_DEX/$(( $DEXthrow + ( $Calligraphy - 1 )))"); fi
  if [ "$Charioteering" != "0" ]; 	then Skillset+=("Charioteering_($Charioteering)_DEX/$((( $STRthrow + 2 ) + ( $Charioteering - 1 )))"); fi
  if [ "$Chicanery" != "0" ]; 		then Skillset+=("Chicanery_($Chicanery)_DEX/$(( $DEXthrow + ( $Chicanery - 1 )))"); fi
  if [ "$Clockwork_Creation" != "0" ];	then Skillset+=("Clockwork_Creation_($Clockwork_Creation)_DEX/$(( $DEXthrow + ( $Clockwork_Creation - 1 )))"); fi
  if [ "$Close_Quarters_Fighting" != "0" ]; then Skillset+=("Close_Quarters_Fighting_($Close_Quarters_Fighting)_DEX/$(( $DEXthrow + ( $Close_Quarters_Fighting - 2 )))"); fi
  if [ "$Cobbling" != "0" ]; then Skillset+=("Cobbling_($Cobbling)_DEX/$(( $DEXthrow + ( $Cobbling - 1 )))"); fi
  if [ "$Craft_Instrument" != "0" ]; then Skillset+=("Craft_Instrument_($Craft_Instrument)_DEX/$((( $DEXthrow - 2 ) + ( $Craft_Instrument - 2 )))"); fi
  if [ "$Dancing" != "0" ]; then Skillset+=("Dancing_($Dancing)_DEX/$(( $DEXthrow + ( $Dancing - 1 )))"); fi
  if [ "$Deep_Diving" != "0" ]; then Skillset+=("Deep_Diving_($Deep_Diving)_DEX/$((( $DEXthrow - 2 ) + ( $Deep_Diving - 2 )))"); fi
  if [ "$Display_Weapon_Prowess" != "0" ]; then Skillset+=("Display_Weapon_Prowess_($Display_Weapon_Prowess)_DEX/$(( $DEXthrow + ( $Display_Weapon_Prowess - 1 )))"); fi
  if [ "$Escape" != "0" ]; then Skillset+=("Escape_($Escape)_DEX/$(( $DEXthrow + ( $Escape - 2 )))"); fi
  if [ "$Forgery" != "0" ]; then Skillset+=("Forgery_($Forgery)_DEX/$((( $DEXthrow - 1 ) + ( $Forgery - 1 )))"); fi
  if [ "$Gem_Cutting" != "0" ]; then Skillset+=("Gem_Cutting_($Gem_Cutting)_DEX/$((( $DEXthrow - 2 ) + ( $Gem_Cutting - 2 )))"); fi
  if [ "$Glassblowing" != "0" ]; then Skillset+=("Glassblowing_($Glassblowing)_DEX/$(( $DEXthrow + ( $Glassblowing - 1 )))"); fi
  if [ "$Grooming" != "0" ]; then Skillset+=("Grooming_($Grooming)_DEX/$(( $DEXthrow + ( $Grooming - 2 )))"); fi
  if [ "$Jousting" != "0" ]; then Skillset+=("Jousting_($Jousting)_DEX/$((( $DEXthrow + 2 ) + ( $Jousting - 1 )))"); fi
  if [ "$Juggling" != "0" ]; then Skillset+=("Juggling_($Juggling)_DEX/$((( $DEXthrow - 1 ) + ( $Juggling - 1 )))"); fi
  if [ "$Locksmithing" != "0" ]; then Skillset+=("Locksmithing_($Locksmithing)_DEX/$(( $DEXthrow + ( $Locksmithing - 1 )))"); fi
  if [ "$Looting" != "0" ]; then Skillset+=("Looting_($Looting)_DEX/$(( $DEXthrow + ( $Looting - 1 )))"); fi
  if [ "$Masseur" != "0" ]; then Skillset+=("Masseur_($Masseur)_DEX/$(( $DEXthrow + ( $Masseur - 1 )))"); fi
if [ "$DEXthrow" -ge "$INTthrow" ]; then
  if [ "$Mountaineering" != "0" ]; then Skillset+=("Mountaineering_($Mountaineering)_DEX/$((( $DEXthrow - 2 )  + ( $Mountaineering - 1 )))"); fi; fi
  if [ "$Musical_Instrument" != "0" ]; then Skillset+=("Musical_Instrument_($Musical_Instrument)_DEX/$((( $DEXthrow - 1 ) + ( $Musical_Instrument - 1 )))"); fi
  if [ "$Origami" != "0" ]; then Skillset+=("Origami_($Origami)_DEX/$((( $DEXthrow - 1 ) + ( $Origami - 1 )))"); fi
  if [ "$Pottery" != "0" ]; then Skillset+=("Pottery_($Pottery)_DEX/$((( $DEXthrow - 2 ) + ( $Pottery - 1 )))"); fi
  if [ "$Prestidigitation" != "0" ]; then Skillset+=("Prestidigitation_($Prestidigitation)_DEX/$((( $DEXthrow - 1 ) + ( $Prestidigitation - 1 )))"); fi
  if [ "$Riding_Sea_Based" != "0" ]; then Skillset+=("Riding,_Sea-Based_($Riding_Sea_Based)_DEX/$((( $DEXthrow - 2 ) + ( $Riding_Sea_Based - 2 )))"); fi
  if [ "$Rope_Use" != "0" ]; then Skillset+=("Rope_Use_($Rope_Use)_DEX/$((( $DEXthrow + 0 ) + ( $Rope_Use - 1 )))"); fi
  if [ "$Scribe" != "0" ]; then Skillset+=("Scribe_($Scribe)_DEX/$((( $DEXthrow + 1 ) + ( $Scribe - 1 )))"); fi
  if [ "$Sculpting" != "0" ]; then Skillset+=("Sculpting_($Sculpting)_DEX/$((( $DEXthrow + 0 ) + ( $Sculpting - 2 )))"); fi
  if [ "$Seamanship" != "0" ]; then Skillset+=("Seamanship_($Seamanship)_DEX/$((( $DEXthrow + 1 ) + ( $Seamanship - 1 )))"); fi
  if [ "$SeamstressTailor" != "0" ]; then Skillset+=("Seamstress_/_Tailor_($SeamstressTailor)_DEX/$((( $DEXthrow - 1 ) + ( $SeamstressTailor - 1 )))"); fi
  if [ "$Silk_Making" != "0" ]; then Skillset+=("Silk_Making_($Silk_Making)_DEX/$((( $DEXthrow + 0 ) + ( $Silk_Making - 1 )))"); fi
  if [ "$Tattooing" != "0" ]; then Skillset+=("Tattooing_($Tattooing)_DEX/$((( $DEXthrow + 0 ) + ( $Tattooing - 1 )))"); fi
  if [ "$Tightrope_Walking" != "0" ]; then Skillset+=("Tightrope_Walking_($Tightrope_Walking)_DEX/$((( $DEXthrow + 0 ) + ( $Tightrope_Walking - 1 )))"); fi
  if [ "$Trailing" != "0" ]; then Skillset+=("Trailing_($Trailing)_DEX/*Special* "); fi
  if [ "$Tumbling" != "0" ]; then Skillset+=("Tumbling_($Tumbling)_DEX/$((( $DEXthrow + 0 ) + ( $Tumbling - 1 )))"); fi
  if [ "$WhistlingHumming" != "0" ]; then Skillset+=("Whistling/Humming_($WhistlingHumming)_DEX/$((( $DEXthrow - 2 ) + ( $WhistlingHumming - 1 )))"); fi
  if [ "$Whitesmithing" != "0" ]; then Skillset+=("Whitesmithing_($Whitesmithing)_DEX/$((( $DEXthrow - 3 ) + ( $Whitesmithing - 2 )))"); fi
  if [ "$Woodworking" != "0" ]; then Skillset+=("Woodworking_($Woodworking)_DEX/$((( $DEXthrow + 0 ) + ( $Woodworking - 1 )))"); fi
#################################################################
# Constitution Skills
  if [ "$Deep_Diving" != "0" ]; then Skillset+=("Deep_Diving_($Deep_Diving)_CON/$((( $CONthrow - 2 ) + ( $Deep_Diving - 2 )))"); fi
  if [ "$Eating" != "0" ]; then Skillset+=("Eating_($Eating)_CON/$((( $CONthrow - 2 ) + ( $Eating - 1 )))"); fi
  if [ "$Endurance" != "0" ]; then Skillset+=("Endurance_($Endurance)_CON/$((( $CONthrow - 1 ) + ( $Endurance - 2 )))"); fi
  if [ "$Hard_Running" != "0" ]; then Skillset+=("Hard_Running_($Hard_Running)_CON/$((( $CONthrow - 8 ) + ( $Hard_Running - 2 )))"); fi
  if [ "$Hold_Breath" != "0" ]; then Skillset+=("Hold_Breath_($Hold_Breath)_CON/$((( $CONthrow + 0 ) + ( $Hold_Breath - 1 )))"); fi
  if [ "$Light_Sleeping" != "0" ]; then Skillset+=("Light_Sleeping_($Light_Sleeping)_CON/$((( $CONthrow + 0 ) + ( $Light_Sleeping - 1 )))"); fi
  if [ "$Running" != "0" ]; then Skillset+=("Running_($Running)_CON/$((( $CONthrow - 6 ) + ( $Running - 1 )))"); fi
if [ "$CONthrow" -ge "$WISthrow" ]; then
  if [ "$Slow_Respiration" != "0" ]; then Skillset+=("Slow_Respiration_($Slow_Respiration)_CON/$((( $CONthrow - 2 ) + ( $Slow_Respiration - 1 )))"); fi; fi
  if [ "$Trance" != "0" ]; then Skillset+=("Trance_($Trance)_CON/$((( $CONthrow + 0 ) + ( $Trance - 2 )))"); fi
#################################################################
# Intelligence Skills
  if [ "$Administration" != "0" ]; then Skillset+=("Administration_($Administration)_INT/$((( $INTthrow + 1 ) + ( $Administration - 1 )))"); fi
  if [ "$Agriculture" != "0" ]; then Skillset+=("Agriculture_($Agriculture)_INT/$((( $INTthrow + 0 ) + ( $Agriculture - 1 )))"); fi
  if [ "$Alchemy" != "0" ]; then Skillset+=("Alchemy_($Alchemy)_INT/$((( $INTthrow - 3 ) + ( $Alchemy - 2 )))"); fi
  if [ "$Anatomy" != "0" ]; then Skillset+=("Anatomy_($Anatomy)_INT/$((( $INTthrow - 2 ) + ( $Anatomy - 2 )))"); fi
  if [ "$Ancient_Geography" != "0" ]; then Skillset+=("Ancient_Geography_($Ancient_Geography)_INT/$((( $INTthrow - 2 ) + ( $Ancient_Geography - 1 )))"); fi
  if [ "$Ancient_History" != "0" ]; then Skillset+=("Ancient_History_($Ancient_History)_INT/$((( $INTthrow - 1 ) + ( $Ancient_History - 1 )))"); fi
  if [ "$Animal_Lore" != "0" ]; then Skillset+=("Animal_Lore_($Animal_Lore)_INT/$((( $INTthrow + 0 ) + ( $Animal_Lore - 1 )))"); fi
  if [ "$Appraising" != "0" ]; then Skillset+=("Appraising_($Appraising)_INT/$((( $INTthrow + 0 ) + ( $Appraising - 1 )))"); fi
  if [ "$Arcanology" != "0" ]; then Skillset+=("Arcanology_($Arcanology)_INT/$((( $INTthrow - 3 ) + ( $Arcanology - 1 )))"); fi
  if [ "$Archon_Lore" != "0" ]; then Skillset+=("Archon_Lore_($Archon_Lore)_INT/$((( $INTthrow - 2 ) + ( $Archon_Lore - 1 )))"); fi
  if [ "$Armorer" != "0" ]; then Skillset+=("Armorer_($Armorer)_INT/$((( $INTthrow - 2 ) + ( $Armorer - 2 )))"); fi
  if [ "$Armorer_Crude" != "0" ]; then Skillset+=(Armorer,_Crude"_($Armorer_Crude)_INT/$((( $INTthrow - 1 ) + ( $Armorer_Crude - 1 )))"); fi
  if [ "$Artist_Playwright" != "0" ]; then Skillset+=("Artist_/_Playwright_($Artist_Playwright)_INT/$((( $INTthrow - 2 ) + ( $Artist_Playwright - 1 )))"); fi
  if [ "$Assimilation" != "0" ]; then Skillset+=("Assimilation_($Assimilation)_INT/$((( $INTthrow + 0 ) + ( $Assimilation - 1 )))"); fi
  if [ "$Astrology" != "0" ]; then Skillset+=("Astrology_($Astrology)_INT/$((( $INTthrow + 0 ) + ( $Astrology - 2 )))"); fi
  if [ "$Boatwright" != "0" ]; then Skillset+=("Boatwright_($Boatwright)_INT/$((( $INTthrow - 2 ) + ( $Boatwright - 1 )))"); fi
  if [ "$Bookbinding" != "0" ]; then Skillset+=("Bookbinding_($Bookbinding)_INT/$((( $INTthrow + 0 ) + ( $Bookbinding - 1 )))"); fi
  if [ "$Brewing" != "0" ]; then Skillset+=("Brewing_($Brewing)_INT/$((( $INTthrow + 0 ) + ( $Brewing - 1 )))"); fi
  if [ "$Bureaucracy" != "0" ]; then Skillset+=("Bureaucracy_($Bureaucracy)_INT/$((( $INTthrow + 0 ) + ( $Bureaucracy - 2 )))"); fi
  if [ "$Cartography" != "0" ]; then Skillset+=("Cartography_($Cartography)_INT/$((( $INTthrow - 2 ) + ( $Cartography - 1 )))"); fi
  if [ "$Cheesemaking" != "0" ]; then Skillset+=("Cheesemaking_($Cheesemaking)_INT/$((( $INTthrow - 1 ) + ( $Cheesemaking - 1 )))"); fi
  if [ "$City_Familiarity" != "0" ]; then Skillset+=("City_Familiarity_($City_Familiarity)_INT/$((( $INTthrow + 0 ) + ( $City_Familiarity - 1 )))"); fi
  if [ "$Clothesmaking_Crude" != "0" ]; then Skillset+=("Clothesmaking,_Crude_($Clothesmaking_Crude)_INT/$((( $INTthrow + 0 ) + ( $Clothesmaking_Crude - 1 )))"); fi
  if [ "$Concocting" != "0" ]; then Skillset+=("Concocting_($Concocting)_INT/$((( $INTthrow + 0 ) + ( $Concocting - 1 )))"); fi
  if [ "$Cooking" != "0" ]; then Skillset+=("Cooking_($Cooking)_INT/$((( $INTthrow + 0 ) + ( $Cooking - 1 )))"); fi
  if [ "$Cryptography" != "0" ]; then Skillset+=("Cryptography_($Cryptography)_INT/$((( $INTthrow - 2 ) + ( $Cryptography - 3 )))"); fi
  if [ "$Debate" != "0" ]; then Skillset+=("Debate_($Debate)_INT/$((( $INTthrow - 1 ) + ( $Debate - 1 )))"); fi
  if [ "$Engineering" != "0" ]; then Skillset+=("Engineering_($Engineering)_INT/$((( $INTthrow - 3 ) + ( $Engineering - 2 )))"); fi
  if [ "$FeignDetect_Sleep" != "0" ]; then Skillset+=("Feign/Detect_Sleep_($FeignDetect_Sleep)_INT/$((( $INTthrow + 0 ) + ( $FeignDetect_Sleep - 1 )))"); fi
  if [ "$Foraging" != "0" ]; then Skillset+=("Foraging_($Foraging)_INT/$((( $INTthrow - 2 ) + ( $Foraging - 1 )))"); fi
  if [ "$Heraldry" != "0" ]; then Skillset+=("Heraldry_($Heraldry)_INT/$((( $INTthrow + 0 ) + ( $Heraldry - 1 )))"); fi
  if [ "$Herbalism" != "0" ]; then Skillset+=("Herbalism_($Herbalism)_INT/$((( $INTthrow - 2 ) + ( $Herbalism - 2 )))"); fi
  if [ "$Hiding" != "0" ]; then Skillset+=("Hiding_($Hiding)_INT/$((( $INTthrow - 1 ) + ( $Hiding - 2 )))"); fi
  if [ "$Leatherworking" != "0" ]; then Skillset+=("Leatherworking_($Leatherworking)_INT/$((( $INTthrow + 0 ) + ( $Leatherworking - 1 )))"); fi
  if [ "$Lip_Reading" != "0" ]; then Skillset+=("Lip_Reading_($Lip_Reading)_INT/$((( $INTthrow - 2 ) + ( $Lip_Reading - 1 )))"); fi
  if [ "$Local_History" != "0" ]; then Skillset+=("Local_History_($Local_History)_INT/$((( $INTthrow + 0 ) + ( $Local_History - 1 )))"); fi
  if [ "$Military_Science" != "0" ]; then Skillset+=("Military_Science_($Military_Science)_INT/$((( $INTthrow - 1 ) + ( $Military_Science - 1 )))"); fi
if [ "$INTthrow" -gt "$DEXthrow" ]; then
  if [ "$Mountaineering" != "0" ]; then Skillset+=("Mountaineering_($Mountaineering)_INT/$((( $INTthrow - 2 ) + ( $Mountaineering - 1 )))"); fi; fi
  if [ "$Mycology" != "0" ]; then Skillset+=("Mycology_($Mycology)_INT/$((( $INTthrow + 3 ) + ( $Mycology - 1 )))"); fi
  if [ "$Navigation" != "0" ]; then Skillset+=("Navigation_($Navigation)_INT/$((( $INTthrow - 2 ) + ( $Navigation - 1 )))"); fi
  if [ "$Numeracy" != "0" ]; then Skillset+=("Numeracy_($Numeracy)_INT/$((( $INTthrow + 0 ) + ( $Numeracy - 1 )))"); fi
  if [ "$Numerology" != "0" ]; then Skillset+=("Numerology_($Numerology)_INT/$((( $INTthrow + 0 ) + ( $Numerology - 2 )))"); fi
  if [ "$Omen_Interpretation" != "0" ]; then Skillset+=("Omen_Interpretation_($Omen_Interpretation)_INT/$((( $INTthrow - 1 ) + ( $Omen_Interpretation - 1 )))"); fi
  if [ "$Orienteering" != "0" ]; then Skillset+=("Orienteering_($Orienteering)_INT/$((( $INTthrow + 0 ) + ( $Orienteering - 3 )))"); fi
  if [ "$Papermaking" != "0" ]; then Skillset+=("Papermaking_($Papermaking)_INT/$((( $INTthrow + 0 ) + ( $Papermaking - 1 )))"); fi
  if [ "$Planology" != "0" ]; then Skillset+=("Planology_($Planology)_INT/$((( $INTthrow - 3 ) + ( $Planology - 1 )))"); fi
  if [ "$Poetry" != "0" ]; then Skillset+=("Poetry_($Poetry)_INT/$((( $INTthrow - 2 ) + ( $Poetry - 1 )))"); fi
  if [ "$Quick_Study" != "0" ]; then Skillset+=("Quick_Study_($Quick_Study)_INT/$((( $INTthrow - 3 ) + ( $Quick_Study - 8 )))"); fi
  if [ "$Reading_Lips" != "0" ]; then Skillset+=("Reading_Lips_($Reading_Lips)_INT/$((( $INTthrow - 2 ) + ( $Reading_Lips - 2 )))"); fi
  if [ "$ReadingWriting" != "0" ]; then Skillset+=("Reading/Writing_($ReadingWriting)_INT/$((( $INTthrow + 1 ) + ( $ReadingWriting - 1 )))"); fi
  if [ "$Research" != "0" ]; then Skillset+=("Research_($Research)_INT/$((( $INTthrow + 0 ) + ( $Research - 1 )))"); fi
  if [ "$Sage_Knowledge" != "0" ]; then Skillset+=$SageSkill"_(Sage)"; fi # I don't know why this works LOL!- Alan
  if [ "$Set_Snares" != "0" ]; then Skillset+=("Set_Snares_($Set_Snares)_INT/$((( $INTthrow - 1 ) + ( $Set_Snares - 1 )))"); fi
  if [ "$Shipwright" != "0" ]; then Skillset+=("Shipwright_($Shipwright)_INT/$((( $INTthrow - 2 ) + ( $Shipwright - 2 )))"); fi
  if [ "$Sign_Language" != "0" ]; then Skillset+=("Sign_Language_($Sign_Language)_INT/$((( $INTthrow + 2 ) + ( $Sign_Language - 1 )))"); fi
  if [ "$Signaling" != "0" ]; then Skillset+=("Signaling_($Signaling)_INT/$((( $INTthrow - 2 ) + ( $Signaling - 1 )))"); fi
  if [ "$Smelting" != "0" ]; then Skillset+=("Smelting_($Smelting)_INT/$((( $INTthrow + 0 ) + ( $Smelting - 1 )))"); fi
  if [ "$Soothsaying" != "0" ]; then Skillset+=("Soothsaying_($Soothsaying)_INT/$((( $INTthrow - 1 ) + ( $Soothsaying - 2 )))"); fi
#################################################################
# FLAG - May remove Spell Recovery for new magic system
  if [ "$Spell_Recovery" != "0" ]; then Skillset+=("Spell_Recovery_($Spell_Recovery)_INT/$((( $INTthrow - 5 ) + ( $Spell_Recovery - 2 )))"); fi
  if [ "$Spellcraft" != "0" ]; then Skillset+=("Spellcraft_($Spellcraft)_INT/$((( $INTthrow - 2 ) + ( $Spellcraft - 1 )))"); fi
  if [ "$Spell_Specialization" != "0" ]; then Skillset+=("Spell_Specialization_($Spell_Specialization)_INT/$((( $INTthrow - 3 ) + ( $Spell_Specialization - 1 )))"); fi
  if [ "$Spelunking" != "0" ]; then Skillset+=("Spelunking_($Spelunking)_INT/$((( $INTthrow - 2 ) + ( $Spelunking - 1 )))"); fi
  if [ "$Spirit_Lore" != "0" ]; then Skillset+=("Spirit_Lore_($Spirit_Lore)_INT/$((( $INTthrow - 2 ) + ( $Spirit_Lore - 2 )))"); fi
  if [ "$Style_Analysis" != "0" ]; then Skillset+=("Style_Analysis_($Style_Analysis)_INT/$((( $INTthrow - 1 ) + ( $Style_Analysis - 1 )))"); fi
  if [ "$Survival" != "0" ]; then Skillset+=("Survival_($Survival)_INT/$((( $INTthrow + 0 ) + ( $Survival - 2 )))"); fi
  if [ "$Tactics_of_Magic" != "0" ]; then Skillset+=("Tactics_of_Magic_($Tactics_of_Magic)_INT/$((( $INTthrow - 1 ) + ( $Tactics_of_Magic - 1 )))"); fi
  if [ "$Thaumaturgy" != "0" ]; then Skillset+=("Thaumaturgy_($Thaumaturgy)_INT/$((( $INTthrow - 2 ) + ( $Thaumaturgy - 1 )))"); fi
  if [ "$Toxicology" != "0" ]; then Skillset+=("Toxicology_($Toxicology)_INT/$((( $INTthrow + 0 ) + ( $Toxicology - 2 )))"); fi
  if [ "$Trail_Signs" != "0" ]; then Skillset+=("Trail_Signs_($Trail_Signs)_INT/$((( $INTthrow - 1 ) + ( $Trail_Signs - 1 )))"); fi
  if [ "$Undead_Knowledge" != "0" ]; then Skillset+=("Undead_Knowledge_($Undead_Knowledge)_INT/$((( $INTthrow + 0 ) + ( $Undead_Knowledge - 1 )))"); fi
  if [ "$Ventriloquism" != "0" ]; then Skillset+=("Ventriloquism_($Ventriloquism)_INT/$((( $INTthrow - 2 ) + ( $Ventriloquism - 1 )))"); fi
  if [ "$Weaponsmithing" != "0" ]; then Skillset+=("Weaponsmithing_($Weaponsmithing)_INT/$((( $INTthrow - 3 ) + ( $Weaponsmithing - 3 )))"); fi
  if [ "$Weaving" != "0" ]; then Skillset+=("Weaving_($Weaving)_INT/$((( $INTthrow - 1 ) + ( $Weaving - 1 )))"); fi
  if [ "$Winemaking" != "0" ]; then Skillset+=("Winemaking_($Winemaking)_INT/$((( $INTthrow - 1 ) + ( $Winemaking - 1 )))"); fi
#################################################################
# Wisdom Skills
  if [ "$Animal_Handling" != "0" ]; then Skillset+=("Animal_Handling_($Animal_Handling)_WIS/$((( $WISthrow - 1 ) + ( $Animal_Handling - 1 )))"); fi
  if [ "$Animal_Noise" != "0" ]; then Skillset+=("Animal_Noise_($Animal_Noise)_WIS/$((( $WISthrow - 1 ) + ( $Animal_Noise - 1 )))"); fi
  if [ "$Animal_Training" != "0" ]; then Skillset+=("Animal_Training_($Animal_Training)_WIS/$((( $WISthrow + 0 ) + ( $Animal_Training - 1 )))"); fi
  if [ "$Artistic_Ability" != "0" ]; then Skillset+=("Artistic_Ability_($Artistic_Ability)_WIS/$((( $WISthrow + 0 ) + ( $Artistic_Ability - 1 )))"); fi
  if [ "$Boating" != "0" ]; then Skillset+=("Boating_($Boating)_WIS/$((( $WISthrow + 0 ) + ( $Boating - 1 )))"); fi
  if [ "$Camouflage" != "0" ]; then Skillset+=("Camouflage_($Camouflage)_WIS/$((( $WISthrow + 0 ) + ( $Camouflage - 1 )))"); fi
  if [ "$Caving" != "0" ]; then Skillset+=("Caving_($Caving)_WIS/$((( $WISthrow + 0 ) + ( $Caving - 2 )))"); fi
  if [ "$Concentration" != "0" ]; then Skillset+=("Concentration_($Concentration)_WIS/$((( $WISthrow - 2 ) + ( $Concentration - 2 )))"); fi
  if [ "$Danger_Sense" != "0" ]; then Skillset+=("Danger_Sense_($Danger_Sense)_WIS/$((( $WISthrow - 1 ) + ( $Danger_Sense - 2 )))"); fi
  if [ "$Diagnostics" != "0" ]; then Skillset+=("Diagnostics_($Diagnostics)_WIS/$((( $WISthrow - 1 ) + ( $Diagnostics - 1 )))"); fi
  if [ "$Direction_Sense" != "0" ]; then Skillset+=("Direction_Sense_($Direction_Sense)_WIS/$((( $WISthrow + 1 ) + ( $Direction_Sense - 1 )))"); fi
  if [ "$Distance_Sense" != "0" ]; then Skillset+=("Distance_Sense_($Distance_Sense)_WIS/$((( $WISthrow + 0 ) + ( $Distance_Sense - 2 )))"); fi
  if [ "$Dowsing" != "0" ]; then Skillset+=("Dowsing_($Dowsing)_WIS/$((( $WISthrow - 3 ) + ( $Dowsing - 1 )))"); fi
  if [ "$Dream_Interpretation" != "0" ]; then Skillset+=("Dream_Interpretation_($Dream_Interpretation)_WIS/$((( $WISthrow + 0 ) + ( $Dream_Interpretation - 2 )))"); fi
  if [ "$Falconry" != "0" ]; then Skillset+=("Falconry_($Falconry)_WIS/$((( $WISthrow - 1 ) + ( $Falconry - 1 )))"); fi
  if [ "$Fire_Building" != "0" ]; then Skillset+=("Fire_Building_($Fire_Building)_WIS/$((( $WISthrow - 1 ) + ( $Fire_Building - 1 )))"); fi
  if [ "$Fishing" != "0" ]; then Skillset+=("Fishing_($Fishing)_WIS/$((( $WISthrow - 1 ) + ( $Fishing - 1 )))"); fi
  if [ "$Flower_Arranging" != "0" ]; then Skillset+=("Flower_Arranging_($Flower_Arranging)_WIS/$((( $WISthrow + 0 ) + ( $Flower_Arranging - 1 )))"); fi
  if [ "$Harness_Subconscious" != "0" ]; then Skillset+=("Harness_Subconscious_($Harness_Subconscious)_WIS/$((( $WISthrow - 2 ) + ( $Harness_Subconscious - 2 )))"); fi
  if [ "$Healing" != "0" ]; then Skillset+=("Healing_($Healing)_WIS/$((( $WISthrow - 2 ) + ( $Healing - 2 )))"); fi
  if [ "$Hunting" != "0" ]; then Skillset+=("Hunting_($Hunting)_WIS/$((( $WISthrow - 1 ) + ( $Hunting - 1 )))"); fi
  if [ "$Landscape_Gardening" != "0" ]; then Skillset+=("Landscape_Gardening_($Landscape_Gardening)_WIS/$((( $WISthrow - 1 ) + ( $Landscape_Gardening - 1 )))"); fi
  if [ "$Law" != "0" ]; then Skillset+=("Law_($Law)_WIS/$((( $WISthrow + 0 ) + ( $Law - 1 )))"); fi
  if [ "$Meditative_Focus" != "0" ]; then Skillset+=("Meditative_Focus_($Meditative_Focus)_WIS/$((( $WISthrow - 1 ) + ( $Meditative_Focus - 1 )))"); fi
  if [ "$Medium" != "0" ]; then Skillset+=("Medium_($Medium)_WIS/$((( $WISthrow + 0 ) + ( $Medium - 2 )))"); fi
  if [ "$Mental_Resistance" != "0" ]; then Skillset+=("Mental_Resistance_($Mental_Resistance)_WIS/$((( $WISthrow - 1 ) + ( $Mental_Resistance - 1 )))"); fi
  if [ "$Mining" != "0" ]; then Skillset+=("Mining_($Mining)_WIS/$((( $WISthrow - 3 ) + ( $Mining - 2 )))"); fi
  if [ "$Necrology" != "0" ]; then Skillset+=("Necrology_($Necrology)_WIS/$((( $WISthrow - 1 ) + ( $Necrology - 1 )))"); fi
  if [ "$Netherworld_Knowledge" != "0" ]; then Skillset+=("Netherworld_Knowledge_($Netherworld_Knowledge)_WIS/$((( $WISthrow - 3 ) + ( $Netherworld_Knowledge - 1 )))"); fi
  if [ "$Omen_Reading" != "0" ]; then Skillset+=("Omen_Reading_($Omen_Reading)_WIS/$((( $WISthrow - 2 ) + ( $Omen_Reading - 1 )))"); fi
  if [ "$Pest_Control" != "0" ]; then Skillset+=("Pest_Control_($Pest_Control)_WIS/$((( $WISthrow + 0 ) + ( $Pest_Control - 2 )))"); fi
  if [ "$Philosophy" != "0" ]; then Skillset+=("Philosophy_($Philosophy)_WIS/$((( $WISthrow - 0 ) + ( $Philosophy - 2 )))"); fi
  if [ "$Prophecy" != "0" ]; then Skillset+=("Prophecy_($Prophecy)_WIS/$((( $WISthrow - 0 ) + ( $Prophecy - 2 )))"); fi
  if [ "$Recover_Scent" != "0" ]; then Skillset+=("Recover_Scent_($Recover_Scent)_WIS/$((( $WISthrow - 1 ) + ( $Recover_Scent - 1 )))"); fi
  if [ "$Religion" != "0" ]; then Skillset+=("Religion_($Religion)_WIS/$((( $WISthrow + 0 ) + ( $Religion - 1 )))"); fi
  if [ "$Riding_Airborne" != "0" ]; then Skillset+=("Riding,_Airborne_($Riding_Airborne)_WIS/$((( $WISthrow - 2 ) + ( $Riding_Airborne - 2 )))"); fi
  if [ "$Riding_Land_Based" != "0" ]; then Skillset+=("Riding,_Land_Based_($Riding_Land_Based)_WIS/$((( $WISthrow + 3 ) + ( $Riding_Land_Based - 1 )))"); fi
  if [ "$Shamanistic_Ritual" != "0" ]; then Skillset+=("Shamanistic_Ritual_($Shamanistic_Ritual)_WIS/$((( $WISthrow + 0 ) + ( $Shamanistic_Ritual - 1 )))"); fi
  if [ "$Skinning" != "0" ]; then Skillset+=("Skinning_($Skinning)_WIS/$((( $WISthrow - 1 ) + ( $Skinning - 1 )))"); fi
if [ "$WISthrow" -gt "$CONthrow" ]; then
  if [ "$Slow_Respiration" != "0" ]; then Skillset+=("Slow_Respiration_($Slow_Respiration)_WIS/$((( $WISthrow - 2 ) + ( $Slow_Respiration - 1 )))"); fi; fi
  if [ "$Sound_Analysis" != "0" ]; then Skillset+=("Sound_Analysis_($Sound_Analysis)_WIS/$((( $WISthrow - 0 ) + ( $Sound_Analysis - 1 )))"); fi
  if [ "$Time_Sense" != "0" ]; then Skillset+=("Time_Sense_($Time_Sense)_WIS/$((( $WISthrow - 2 ) + ( $Time_Sense - 1 )))"); fi
  if [ "$Tracking" != "0" ]; then Skillset+=("Tracking_($Tracking)_WIS/$((( $WISthrow - 0 ) + ( $Tracking - 2 )))"); fi
  if [ "$Track_by_Scent" != "0" ]; then Skillset+=("Track_by_Scent_($Track_by_Scent)_WIS/$((( $WISthrow - 0 ) + ( $Track_by_Scent - 2 )))"); fi
  if [ "$Trail_Marking" != "0" ]; then Skillset+=("Trail_Marking_($Trail_Marking)_WIS/$((( $WISthrow - 0 ) + ( $Trail_Marking - 1 )))"); fi
  if [ "$Undead_Lore" != "0" ]; then Skillset+=("Undead_Lore_($Undead_Lore)_WIS/$((( $WISthrow - 2 ) + ( $Undead_Lore - 1 )))"); fi
  if [ "$Underclass" != "0" ]; then Skillset+=("Underclass_($Underclass)_WIS/$((( $WISthrow + 0 ) + ( $Underclass - 1 )))"); fi
  if [ "$Venom_Handling" != "0" ]; then Skillset+=("Venom_Handling_($Venom_Handling)_WIS/$((( $WISthrow - 1 ) + ( $Venom_Handling - 1 )))"); fi
  if [ "$Veterinary_Healing" != "0" ]; then Skillset+=("Veterinary_Healing_($Veterinary_Healing)_WIS/$((( $WISthrow - 3 ) + ( $Veterinary_Healing - 1 )))"); fi
  if [ "$Weapon_Improvisation" != "0" ]; then Skillset+=("Weapon_Improvisation_($Weapon_Improvisation)_WIS/$((( $WISthrow - 2 ) + ( $Weapon_Improvisation - 1 )))"); fi
  if [ "$Weaponsmithing_Crude" != "0" ]; then Skillset+=("Weaponsmithing,_Crude_($Weaponsmithing_Crude)_WIS/$((( $WISthrow - 3 ) + ( $Weaponsmithing_Crude - 1 )))"); fi
  if [ "$Weather_Sense" != "0" ]; then Skillset+=("Weather_Sense_($Weather_Sense)_WIS/$((( $WISthrow - 1 ) + ( $Weather_Sense - 1 )))"); fi
#################################################################
# Charisma Skills
  if [ "$Acting" != "0" ]; then Skillset+=("Acting_($Acting)_CHA/$((( $CHAthrow + 1 ) + ( $Acting - 1 )))"); fi
  if [ "$Alms" != "0" ]; then Skillset+=("Alms_($Alms)_CHA/$((( $CHAthrow + 1 ) + ( $Alms - 0 )))"); fi
  if [ "$Begging" != "0" ]; then Skillset+=("Begging_($Begging)_CHA/$((( $CHAthrow + 0 ) + ( $Begging - 1 )))"); fi
  if [ "$Buffoonery" != "0" ]; then Skillset+=("Buffoonery_($Buffoonery)_CHA/$((( $CHAthrow + 2 ) + ( $Buffoonery - 1 )))"); fi
  if [ "$Ceremony" != "0" ]; then Skillset+=("Ceremony_($Ceremony)_CHA/$((( $CHAthrow + 0 ) + ( $Ceremony - 1 )))"); fi
  if [ "$Chanting" != "0" ]; then Skillset+=("Chanting_($Chanting)_CHA/$((( $CHAthrow + 2 ) + ( $Chanting - 1 )))"); fi
  if [ "$Comedy" != "0" ]; then Skillset+=("Comedy_($Comedy)_CHA/$((( $CHAthrow + 2 ) + ( $Comedy - 1 )))"); fi
  if [ "$Crowd_Working" != "0" ]; then Skillset+=("Crowd_Working_($Crowd_Working)_CHA/$((( $CHAthrow + 0 ) + ( $Crowd_Working - 1 )))"); fi
  if [ "$Dirty_Fighting" != "0" ]; then Skillset+=("Dirty_Fighting_($Dirty_Fighting)_CHA/$((( $CHAthrow + 0 ) + ( $Dirty_Fighting - 1 )))"); fi
  if [ "$Disguise" != "0" ]; then Skillset+=("Disguise_($Disguise)_CHA/$((( $CHAthrow + 1 ) + ( $Disguise - 1 )))"); fi
  if [ "$Drinking" != "0" ]; then Skillset+=("Drinking_($Drinking)_CHA/$((( $CHAthrow + 1 ) + ( $Drinking - 1 )))"); fi
  if [ "$Enamor" != "0" ]; then Skillset+=("Enamor_($Enamor)_CHA/$((( $CHAthrow + 2 ) + ( $Enamor - 1 )))"); fi
  if [ "$Etiquette" != "0" ]; then Skillset+=("Etiquette_($Etiquette)_CHA/$((( $CHAthrow + 0 ) + ( $Etiquette - 1 )))"); fi
  if [ "$Fast_Talking" != "0" ]; then Skillset+=("Fast-Talking_($Fast_Talking)_CHA/$((( $CHAthrow + 0 ) + ( $Fast_Talking - 1 )))"); fi
  if [ "$Fortune_Telling" != "0" ]; then Skillset+=("Fortune_Telling_($Fortune_Telling)_CHA/$((( $CHAthrow + 2 ) + ( $Fortune_Telling - 2 )))"); fi
  if [ "$Gaming" != "0" ]; then Skillset+=("Gaming_($Gaming)_CHA/$((( $CHAthrow + 0 ) + ( $Gaming - 1 )))"); fi
  if [ "$Haggling" != "0" ]; then Skillset+=("Haggling_($Haggling)_CHA/$((( $CHAthrow - 2 ) + ( $Haggling - 2 )))"); fi
  if [ "$Horde_Summoning" != "0" ]; then Skillset+=("Horde_Summoning_($Horde_Summoning)_CHA/$((( $CHAthrow - 2 ) + ( $Horde_Summoning - 2 )))"); fi
  if [ "$Hypnotism" != "0" ]; then Skillset+=("Hypnotism_($Hypnotism)_CHA/$((( $CHAthrow - 2 ) + ( $Hypnotism - 1 )))"); fi
  if [ "$Information_Gathering" != "0" ]; then Skillset+=("Info_Gathering_($Information_Gathering)_CHA/*Special*"); fi
if [ "$CHAthrow" -ge "$STRthrow" ]; then
  if [ "$Intimidation" != "0" ]; then Skillset+=("Intimidation_($Intimidation)_CHA/$((( $CHAthrow + 0 ) + ( $Intimidation - 1 )))"); fi; fi
  if [ "$Oratory" != "0" ]; then Skillset+=("Oratory_($Oratory)_CHA/$((( $CHAthrow + 0 ) + ( $Oratory - 1 )))"); fi
  if [ "$Persuasion" != "0" ]; then Skillset+=("Persuasion_($Persuasion)_CHA/$((( $CHAthrow + 0 ) + ( $Persuasion - 1 )))"); fi
  if [ "$Rhetoric" != "0" ]; then Skillset+=("Rhetoric_($Rhetoric)_CHA/$((( $CHAthrow + 0 ) + ( $Rhetoric - 1 )))"); fi
  if [ "$Singing" != "0" ]; then Skillset+=("Singing_($Singing)_CHA/$((( $CHAthrow + 0 ) + ( $Singing - 1 )))"); fi
  if [ "$Sound_Imitation" != "0" ]; then Skillset+=("Sound_Imitation_($Sound_Imitation)_CHA/$((( $CHAthrow - 2 ) + ( $Sound_Imitation - 2 )))"); fi
  if [ "$Voice_Mimicry" != "0" ]; then Skillset+=("Voice_Mimicry_($Voice_Mimicry)_CHA/*Special*"); fi
#################################################################
# Comeliness Skills
  if [ "$Crowd_Working" != "0" ]; then Skillset+=("Crowd_Working_($Crowd_Working)_COM/$((( $COMthrow + 0 ) + ( $Crowd_Working - 1 )))"); fi
  if [ "$Enamor" != "0" ]; then Skillset+=("Enamor_($Enamor)_COM/$((( $COMthrow - 2 ) + ( $Enamor - 1 )))"); fi
  if [ "$Haggling" != "0" ]; then Skillset+=("Haggling_($Haggling)_COM/$((( $COMthrow - 2 ) + ( $Haggling - 2 )))"); fi
#################################################################
# Perception Skills
  if [ "$Blind_Fighting" != "0" ]; then Skillset+=("Blind_Fighting_($Blind_Fighting)_PER/$((( $PERthrow + 0 ) + ( $Blind_Fighting - 2 )))"); fi
  if [ "$Alertness" != "0" ]; then Skillset+=("Alertness_($Alertness)_PER/$((( $PERthrow + 1 ) + ( $Alertness - 1 )))"); fi
  if [ "$Detect_Signing" != "0" ]; then Skillset+=("Detect_Signing_($Detect_Signing)_PER/$((( $PERthrow + 1 ) + ( $Detect_Signing - 1 )))"); fi
  if [ "$Observation" != "0" ]; then Skillset+=("Observation_($Observation)_PER/$((( $PERthrow + 0 ) + ( $Observation - 1 )))"); fi


#
#
#                     END SKILLS SECTION
#
#

#################################################################
#                       LANGUAGES SECTION		        #
#################################################################
# Languages are determined here
languages=$(( ${int[0]} - 1 ))
if [ "$CLASS" = "Thief" ] && [ "$INTthrow" -ge "9" ]; then let "languages=$languages-1"; fi 
if [ "$RACE" = "Relic" ]; then let "languages=$languages-20"; fi 
if [ "$RACE" = "Protean" ]; then let "languages=$languages-1"; fi 

#Define language tracking variables
Dethek=0; Futharken=0; Darastrix=0; Thuluuk=0; Halai=0; Angellican=0; Kung=0; Sithic=0; Ald_Dethek=0; Acandian=0; Wuuth=0; Dauthi=0; Common=1
LanguagesARRAY=( "Dethek" "Futharken" "Darastrix" "Thuluuk" "Halai" "Angellican" "Kung" "Sithic" "Ald_Dethek" "Acandian" "Wuuth" "Dauthi" "Common")

#Define language printing function
function KnownLanguages {
# if a value is 0 or greater than 2, then this function does nothing and the language result is not printed
if [ "$Dethek" = "1" ]; 	then Languageset+=( "Language_(Dethek)_RW" ); fi
if [ "$Futharken" = "1" ]; 	then Languageset+=( "Language_(Futharken)_S" ); fi
if [ "$Darastrix" = "1" ]; 	then Languageset+=( "Language_(Darastrix)_S" ); fi
if [ "$Thuluuk" = "1" ]; 	then Languageset+=( "Language_(Thuluuk)_S" ); fi
if [ "$Halai" = "1" ]; 		then Languageset+=( "Language_(Halai)_S" ); fi
if [ "$Angellican" = "1" ]; 	then Languageset+=( "Language_(Angellican)_RW" ); fi
if [ "$Kung" = "1" ]; 		then Languageset+=( "Language_(Kung)_S" ); fi
if [ "$Sithic" = "1" ]; 	then Languageset+=( "Language_(Sithic)_S" ); fi
if [ "$Ald_Dethek" = "1" ]; 	then Languageset+=( "Language_(Ald_Dethek)_RW" ); fi
if [ "$Acandian" = "1" ]; 	then Languageset+=( "Language_(Acandian)_RW" ); fi
if [ "$Wuuth" = "1" ]; 		then Languageset+=( "Language_(Wuuth)_S" ); fi
if [ "$Dauthi" = "1" ]; 	then Languageset+=( "Language_(Dauthi)_S" ); fi
if [ "$Common" = "1" ]; 	then Languageset+=( "Language_(Common)_S" ); fi

if [ "$Dethek" = "2" ]; 	then Languageset+=( "Language_(Dethek)_RW/S" ); fi
if [ "$Futharken" = "2" ]; 	then Languageset+=( "Language_(Futharken)_RW/S" ); fi
if [ "$Darastrix" = "2" ]; 	then Languageset+=( "Language_(Darastrix)_RW/S" ); fi
if [ "$Thuluuk" = "2" ]; 	then Languageset+=( "Language_(Thuluuk)_RW/S" ); fi
if [ "$Halai" = "2" ]; 		then Languageset+=( "Language_(Halai)_RW/S" ); fi
if [ "$Angellican" = "2" ]; 	then Languageset+=( "Language_(Angellican)_RW/S" ); fi
if [ "$Kung" = "2" ]; 		then Languageset+=( "Language_(Kung)_RW/S" ); fi
if [ "$Sithic" = "2" ]; 	then Languageset+=( "Language_(Sithic)_RW/S" ); fi
if [ "$Ald_Dethek" = "2" ]; 	then Languageset+=( "Language_(Ald_Dethek)_RW/S" ); fi
if [ "$Acandian" = "2" ]; 	then Languageset+=( "Language_(Acandian)_RW/S" ); fi
if [ "$Wuuth" = "2" ]; 		then Languageset+=( "Language_(Wuuth)_RW/S" ); fi
if [ "$Dauthi" = "2" ]; 	then Languageset+=( "Language_(Dauthi)_RW/S" ); fi
if [ "$Common" = "2" ]; 	then Languageset+=( "Language_(Common)_RW/S" ); fi
}

until [ "$languages" -le "0" ]; do
 	for index in `shuf --input-range=0-$(( ${#LanguagesARRAY[*]} - 1 )) | head -1`; do SelectedTongue=${LanguagesARRAY[$index]}
	if [ "$RACE" = "Dwarf" ]; then
	if [ "$SelectedTongue" = "Dethek" ] && [ "$Dethek" -lt "2" ]; 		then Dethek=$(( $Dethek + 1 )); 	languages=$(( $languages - 1 )); fi; fi

	if [ "$SelectedTongue" = "Dethek" ] && [ "$Dethek" -lt "1" ]; 		then Dethek=$(( $Dethek + 1 )); 	languages=$(( $languages - 1 )); fi
	if [ "$SelectedTongue" = "Futharken" ] && [ "$Futharken" -lt "2" ]; 	then Futharken=$(( $Futharken + 1 )); 	languages=$(( $languages - 1 )); fi 
	if [ "$SelectedTongue" = "Darastrix" ] && [ "$Darastrix" -lt "2" ]; 	then Darastrix=$(( $Darastrix + 1 )); 	languages=$(( $languages - 1 )); fi 
	if [ "$SelectedTongue" = "Thuluuk" ] && [ "$Thuluuk" -lt "2" ]; 	then Thuluuk=$(( $Thuluuk + 1 )); 	languages=$(( $languages - 1 )); fi 
	if [ "$SelectedTongue" = "Halai" ] && [ "$Halai" -lt "2" ]; 		then Halai=$(( $Halai + 1 )); 		languages=$(( $languages - 1 )); fi 
	if [ "$SelectedTongue" = "Angellican" ] && [ "$Angellican" = "0" ];	then Angellican=$(( $Angellican + 1 )); languages=$(( $languages - 1 )); fi 
	if [ "$SelectedTongue" = "Kung" ] && [ "$Kung" -lt "2" ]; 		then Kung=$(( $Kung + 1 )); 		languages=$(( $languages - 1 )); fi 
	if [ "$SelectedTongue" = "Sithic" ] && [ "$Sithic" -lt "2" ]; 		then Sithic=$(( $Sithic + 1 )); 	languages=$(( $languages - 1 )); fi 
	if [ "$SelectedTongue" = "Ald_Dethek" ] && [ "$Ald_Dethek" = "0" ]; 	then Ald_Dethek=$(( $Ald_Dethek + 1 )); languages=$(( $languages - 1 )); fi 
	if [ "$SelectedTongue" = "Acandian" ] && [ "$Acandian" = "0" ]; 	then Acandian=$(( $Acandian + 1 )); 	languages=$(( $languages - 1 )); fi 
	if [ "$SelectedTongue" = "Wuuth" ] && [ "$Wuuth" -lt "2" ]; 		then Wuuth=$(( $Wuuth + 1 )); 		languages=$(( $languages - 1 )); fi 
	if [ "$SelectedTongue" = "Dauthi" ] && [ "$Dauthi" -lt "2" ]; 		then Dauthi=$(( $Dauthi + 1 )); 	languages=$(( $languages - 1 )); fi 
	if [ "$SelectedTongue" = "Common" ] && [ "$Common" -lt "2" ]; 		then Common=$(( $Common + 1 )); 	languages=$(( $languages - 1 )); fi; done; done

    KnownLanguages 		#Calls the KnownLanguages Function for populating the Languageset array

if [ "$CLASS" = "Thief" ] && [ "$INTthrow" -ge "9" ]; then Languageset+=( "Language (Thieves' Cant) RW/S" ); fi
if [ "$PROTEAN" = "Y" ] || [ "$RACE" = "Elf" ]; then Languageset+=( "Language (Angellican) RW/S" ); fi
#if [ "$RACE" = "Dwarf" ]; then Languageset+=( "Language (Dethek) RW/S" ); fi

SkillsandLanguages=( "${Racialset[@]}" "${Weaponset[@]}" "${Skillset[@]}" "${Languageset[@]}" )

#Check for sage knowledge and print chosen skills
if [ "$Sage_Knowledge" != "0" ]; then echo SAGE KNOWLEDGE!
echo $First"'s Sage Skill is" ${Skillset[0]} | tr "_" " " | cut -f1 -d"("; echo; fi 
	for value in "${SkillsandLanguages[@]}"; do printf "%-8s\n" "${value}" | tr -s "_" " "
		done | pr --columns 3 -aT -W118; echo

#################################################################

# ************** MOVEMENT RATES ****************** #
if [ "$SIZE" = "S" ]; then BaseMove=" 6"; LEncum=" 4"; MEncum=" 3"; HEncum=" 2"; SevEnc=" 1"; Jog2="12"; Run3="18"; Run4="24"; Run5="30";fi 	# Not yet used, but should be!
if [ "$SIZE" = "L" ]; then BaseMove="18"; LEncum="12"; MEncum=" 8"; HEncum=" 4"; SevEnc=" 1"; Jog2="36"; Run3="54"; Run4="72"; Run5="90";fi
if [ "$SIZE" = "M" ]; then BaseMove="12"; LEncum=" 9"; MEncum=" 6"; HEncum=" 3"; SevEnc=" 1"; Jog2="24"; Run3="36"; Run4="48"; Run5="60";fi

# **************** SPECIAL CASTING / MOVEMENT INFORMATION ***************** #
# This used to be a whole bunch of shaggy-looking echo statements, but wrapping
# the works in a case tree made it look nicer and more readable (to me).
# The Specialty Priest / Nanawen entries were done with an if statement because
# I couldn't figure out how to do a case tree that could match two variables 
# simultaneously without nesting. The help I got online digging through man pages
# wasn't very. I'm not sure it's possible, but knock yourself out if you think 
# you can make it work.

case "$CLASS" in
	Specialty\ Priest)
    if [ "$SPEC" = "of Nanawen" ]; then 
printf "%-40s%-31s%-29s\n" "****** ANIMAL TURNING TABLE ******" "****** MOVEMENT RATE ******" "***** SPELL PROGRESSION *****"
printf "%-40s%-31s%-29s\n" "Small Insect or 1 HD    $Skeleton"   "Base Movement =         $BaseMove"  "${spellslv[0]} First Level Spells"
printf "%-40s%-31s%-29s\n" "Rat                     $Zombie"	 "Light Encumbrance =     $LEncum"    "${spellslv[1]} Second Level Spells"
printf "%-40s%-31s%-29s\n" "Raven or 2 HD           $Ghoul"	 "Medium Emcumbrance =    $MEncum"    "${spellslv[2]} Third Level Spells"
printf "%-40s%-31s%-29s\n" "Vampire Bat or 3-4 HD   $Shadow"	 "Heavy Encumbrance =     $HEncum"    "${spellslv[3]} Fourth Level Spells"
printf "%-40s%-31s%-29s\n" "Wolf or 5 HD            $Wight"	 "Severe Encumbrance =    $SevEnc"    "${spellslv[4]} Fifth Level Spells"
printf "%-40s%-31s%-29s\n" "Puma                    $Ghast"	 "Jog x 2 =               $Jog2"      "${spellslv[5]} Sixth Level Spells"
printf "%-40s%-31s%-29s\n" "Black Bear or 6 HD      $Wraith"	 "Run x 3 =               $Run3"      "${spellslv[6]} Seventh Level Spells"
printf "%-40s%-31s\n"      "Giant Eagle or 7 HD     $Mummy"	 "Run x 4 =               $Run4"	
printf "%-40s%-31s\n"      "Brown Bear or 8 HD      $Spectre"	 "Run x 5 =               $Run5"
printf "%-40s\n"           "Hippo or 9 HD           $Vampire"
printf "%-40s\n"           "Rhinoceros or 10 HD     $Ghost"
printf "%-40s\n"           "Polar Bear or 11 HD     $Lich"
printf "%-40s\n"           "Special **              $Special"
    else
printf "%-40s%-31s%-29s\n" "****** CLERICAL TURNING TABLE ******" "****** MOVEMENT RATE ******" "***** SPELL PROGRESSION *****"
printf "%-40s%-31s%-29s\n" "Skeleton or 1 HD         $Skeleton"   "Base Movement =          $BaseMove"  "${spellslv[0]} First Level Spells"
printf "%-40s%-31s%-29s\n" "Zombie                   $Zombie"	  "Light Encumbrance =      $LEncum"    "${spellslv[1]} Second Level Spells"
printf "%-40s%-31s%-29s\n" "Ghoul or 2 HD            $Ghoul"	  "Medium Emcumbrance =     $MEncum"    "${spellslv[2]} Third Level Spells"
printf "%-40s%-31s%-29s\n" "Shadow or 3-4 HD         $Shadow"	  "Heavy Encumbrance =      $HEncum"    "${spellslv[3]} Fourth Level Spells"
printf "%-40s%-31s%-29s\n" "Wight or 5 HD            $Wight"	  "Severe Encumbrance =     $SevEnc"    "${spellslv[4]} Fifth Level Spells"
printf "%-40s%-31s%-29s\n" "Ghast                    $Ghast"	  "Jog x 2 =                $Jog2"      "${spellslv[5]} Sixth Level Spells"
printf "%-40s%-31s%-29s\n" "Wraith or 6 HD           $Wraith"	  "Run x 3 =                $Run3"      "${spellslv[6]} Seventh Level Spells"
printf "%-40s%-31s\n"      "Mummy or 7 HD            $Mummy"	  "Run x 4 =                $Run4"	
printf "%-40s%-31s\n"      "Spectre or 8 HD          $Spectre"	  "Run x 5 =                $Run5"
printf "%-40s\n"           "Vampire or 9 HD          $Vampire"
printf "%-40s\n"           "Ghost or 10 HD           $Ghost"
printf "%-40s\n"           "Lich or 11 HD            $Lich"
printf "%-40s\n"           "Special **               $Special"
    fi								;;

	Druid|Shaman)
printf "%-31s%-31s%-29s\n" "****** MOVEMENT RATE ******"          "***** SPELL PROGRESSION *****"	
printf "%-31s%-31s%-29s\n" "Base Movement =         $BaseMove"	"  ${spellslv[0]} First Level Spells"	
printf "%-31s%-31s%-29s\n" "Light Encumbrance =     $LEncum"	"  ${spellslv[1]} Second Level Spells"
printf "%-31s%-31s%-29s\n" "Medium Emcumbrance =    $MEncum"	"  ${spellslv[2]} Third Level Spells"	
printf "%-31s%-31s%-29s\n" "Heavy Encumbrance =     $HEncum"	"  ${spellslv[3]} Fourth Level Spells"
printf "%-31s%-31s%-29s\n" "Severe Encumbrance =    $SevEnc"	"  ${spellslv[4]} Fifth Level Spells"	
printf "%-31s%-31s%-29s\n" "Jog x 2 =               $Jog2"	"  ${spellslv[5]} Sixth Level Spells"	
printf "%-31s%-31s%-29s\n" "Run x 3 =               $Run3"	"  ${spellslv[6]} Seventh Level Spells"
printf "%-62s%-29s\n" 	   "Run x 4 =               $Run4"						
printf "%-62s%-29s\n" 	   "Run x 5 =               $Run5"	;;				

	Monk)
printf "%-31s%-31s%-29s\n" "****** MOVEMENT RATE ******"        "***** SPELL PROGRESSION *****"            "  ***** MARTIAL ARTS TABLE *****"
printf "%-31s%-31s%-29s\n" "Base Movement =         $BaseMove"	"  ${spellslv[0]} First Level Spells"      "  Attack  Martial Arts    Base" 
printf "%-31s%-31s%-29s\n" "Light Encumbrance =     $LEncum"	"  ${spellslv[1]} Second Level Spells"     "   Roll     Maneuver     Damage"
printf "%-31s%-31s%-29s\n" "Medium Emcumbrance =    $MEncum"	"  ${spellslv[2]} Third Level Spells"      "  19—20     Head Kick      4"
printf "%-31s%-31s%-29s\n" "Heavy Encumbrance =     $HEncum"	"  ${spellslv[3]} Fourth Level Spells"     "  17–18     Head Punch     3"
printf "%-31s%-31s%-29s\n" "Severe Encumbrance =    $SevEnc"	"  ${spellslv[4]} Fifth Level Spells"      "  15–16     Vitals Kick    3"
printf "%-31s%-31s%-29s\n" "Jog x 2 =               $Jog2"	"  ${spellslv[5]} Sixth Level Spells"      "  13–14     Vitals Punch   2"
printf "%-31s%-31s%-29s\n" "Run x 3 =               $Run3"	"  ${spellslv[6]} Seventh Level Spells"    "  11–12     High Kick      2"
printf "%-62s%-29s\n" 	   "Run x 4 =               $Run4"						   "   9–10     Side Kick      2"
printf "%-62s%-29s\n" 	   "Run x 5 =               $Run5"						   "   6–8      Body Punch     1"
printf "%-62s%-29s\n"      "                                                              "                "   3–5      Low Kick       1"
printf "%-62s%-29s\n"      "                                                              "                "    2       Graze          0" ;;

	Mage|Abjurer|Conjurer|Diviner|Enchanter|Illusionist|Invoker|Necromancer|Transmuter)				  
printf "%-31s%-31s\n" "****** MOVEMENT RATE ******"          "***** SPELL PROGRESSION *****"	
printf "%-31s%-31s\n" "Base Movement =         $BaseMove"    " ${spellslv[0]} First Level Spells"	
printf "%-31s%-31s\n" "Light Encumbrance =     $LEncum"	     " ${spellslv[1]} Second Level Spells"
printf "%-31s%-31s\n" "Medium Emcumbrance =    $MEncum"	     " ${spellslv[2]} Third Level Spells"	
printf "%-31s%-31s\n" "Heavy Encumbrance =     $HEncum"	     " ${spellslv[3]} Fourth Level Spells"
printf "%-31s%-31s\n" "Severe Encumbrance =    $SevEnc"	     " ${spellslv[4]} Fifth Level Spells"	
printf "%-31s%-31s\n" "Jog x 2 =               $Jog2"	     " ${spellslv[5]} Sixth Level Spells"	
printf "%-31s%-31s\n" "Run x 3 =               $Run3"	     " ${spellslv[6]} Seventh Level Spells"
printf "%-31s%-29s\n" "Run x 4 =               $Run4"        " ${spellslv[6]} Eighth Level Spells"						
printf "%-31s%-29s\n" "Run x 5 =               $Run5"        " ${spellslv[6]} Ninth Level Spells"	;;

	Bard)
printf "%-32s%-31s\n" "****** MOVEMENT RATE ******"        "***** SPELL PROGRESSION *****"
printf "%-32s%-31s\n" "Base Movement =          $BaseMove" " ${spellslv[0]} First Level Spells"	
printf "%-32s%-31s\n" "Light Encumbrance =      $LEncum"   " ${spellslv[1]} Second Level Spells"
printf "%-32s%-31s\n" "Medium Emcumbrance =     $MEncum"   " ${spellslv[2]} Third Level Spells"	
printf "%-32s%-31s\n" "Heavy Encumbrance =      $HEncum"   " ${spellslv[3]} Fourth Level Spells"
printf "%-32s%-31s\n" "Severe Encumbrance =     $SevEnc"   " ${spellslv[3]} Fifth Level Spells"
printf "%-32s%-31s\n" "Jog x 2 =                $Jog2"     " ${spellslv[3]} Sixth Level Spells"
printf "%-32s\n"      "Run x 3 =                $Run3"
printf "%-32s\n"      "Run x 4 =                $Run4"
printf "%-32s\n"      "Run x 5 =                $Run5"          ;;

	Cleric)
printf "%-32s%-31s\n" "****** MOVEMENT RATE ******"        "***** SPELL PROGRESSION *****"
printf "%-32s%-31s\n" "Base Movement =          $BaseMove" " ${spellslv[0]} First Level Spells"	
printf "%-32s%-31s\n" "Light Encumbrance =      $LEncum"   " ${spellslv[1]} Second Level Spells"
printf "%-32s%-31s\n" "Medium Emcumbrance =     $MEncum"   " ${spellslv[2]} Third Level Spells"	
printf "%-32s\n"      "Heavy Encumbrance =      $HEncum"  
printf "%-32s\n"      "Severe Encumbrance =     $SevEnc"   
printf "%-32s\n"      "Jog x 2 =                $Jog2"    
printf "%-32s\n"      "Run x 3 =                $Run3"
printf "%-32s\n"      "Run x 4 =                $Run4"
printf "%-32s\n"      "Run x 5 =                $Run5"          ;;

	Fighter|Thief|Handler|Sorcerer|Mentalist|Arcanist)
printf "%-32s\n"           "****** MOVEMENT RATE ******"
printf "%-31s%-31s%-29s\n" "Base Movement =          $BaseMove"	 	
printf "%-31s%-31s%-29s\n" "Light Encumbrance =      $LEncum"	 
printf "%-31s%-31s%-29s\n" "Medium Emcumbrance =     $MEncum"	  	
printf "%-31s%-31s%-29s\n" "Heavy Encumbrance =      $HEncum"	 
printf "%-31s%-31s%-29s\n" "Severe Encumbrance =     $SevEnc"	  	
printf "%-31s%-31s%-29s\n" "Jog x 2 =                $Jog2"	 	
printf "%-31s%-31s%-29s\n" "Run x 3 =                $Run3"	
printf "%-62s%-29s\n" 	   "Run x 4 =                $Run4"						
printf "%-62s%-29s\n" 	   "Run x 5 =                $Run5"	;;

	Paladin|Ranger)
printf "%-32s%-31s\n" "****** MOVEMENT RATE ******"        "***** SPELL PROGRESSION *****"
printf "%-32s%-31s\n" "Base Movement =          $BaseMove" " ${spellslv[0]} First Level Spells"	
printf "%-32s%-31s\n" "Light Encumbrance =      $LEncum"   " ${spellslv[1]} Second Level Spells"
printf "%-32s%-31s\n" "Medium Emcumbrance =     $MEncum"   " ${spellslv[2]} Third Level Spells"	
printf "%-32s%-31s\n" "Heavy Encumbrance =      $HEncum"   " ${spellslv[3]} Fourth Level Spells"
printf "%-32s%-31s\n" "Severe Encumbrance =     $SevEnc"
printf "%-32s\n"      "Jog x 2 =                $Jog2"
printf "%-32s\n"      "Run x 3 =                $Run3"
printf "%-32s\n"      "Run x 4 =                $Run4"
printf "%-32s\n"      "Run x 5 =                $Run5"          ;;

esac

echo

#################################################################
#################################################################
# MOUNTS, BONDED MOUNTS, FOLLOWERS, ANIMAL FOLLOWERS & HENCHMEN
#---------------------------------------------------------------#
# MOUNTS SECTION

SMountSpeciesARRAY=( "Riding Horse" "Pony" "Quarter Horse" "Elk" "Snow Elk" "Caribou" "Moose" "Snow Bear" "Brown Bear" "Reindeer" "Wolf" "Snow Puma" "Ice Drake" "Bull Mastiff" )
MMountSpeciesARRAY=( "Riding Horse" "Pony" "Quarter Horse" "Elk" "Snow Elk" "Caribou" "Moose" "Buffalo" "Snow Bear" "Brown Bear" "Clydesdale Horse" "Reindeer" )
LMountSpeciesARRAY=( "Riding Horse" "Quarter Horse" "Elk" "White Elk" "Caribou" "Moose" "Buffalo" "Snow Bear" "Brown Bear" "Clydesdale Horse" "Reindeer" )
ExoticMountARRAY=( "Griffon" "Unicorn" "Warg" "Wyvern" "Pegasus" "Tundra Lord" "Displacer Beast" )
MPaladinMountARRAY=( "Griffon" "War Horse" "Wyvern" "Pegasus" "Snow Elk" )
FPaladinMountARRAY=( "Unicorn" "War Horse" "Wyvern" "Pegasus" "Snow Elk" )

let "Mount_Check = $RANDOM % 5 + (( $LEVEL * 2 ))"
  if [ "$Mount_Check" -ge "10" ]; then Mount=Y; fi

if [ "$Mount" = "Y" ] && [ "$Race" != "Selah" ]; then 
 if [ "$SIZE" = "S" ]; then let "MountHD = $RANDOM % 5 + 2"; 
	for index in `shuf --input-range=0-$(( ${#SMountSpeciesARRAY[*]} - 1 )) | head -1`
	do    MountSpecies=${SMountSpeciesARRAY[$index]}; done
	MountLoadLimit=$((( $MountHD * 1252) / 13 )); MountSPD=18; fi
  if [ "$SIZE" = "M" ]; then let "MountHD = $RANDOM % 6 + 2";
	for index in `shuf --input-range=0-$(( ${#MMountSpeciesARRAY[*]} - 1 )) | head -1`
	do    MountSpecies=${MMountSpeciesARRAY[$index]}; done
	MountLoadLimit=$((( $MountHD * 2886) / 17 )); MountSPD=18; fi
  if [ "$SIZE" = "L" ]; then let "MountHD = $RANDOM % 7 + 3";
	for index in `shuf --input-range=0-$(( ${#LMountSpeciesARRAY[*]} - 1 )) | head -1`
	do    MountSpecies=${LMountSpeciesARRAY[$index]}; done
	MountLoadLimit=$((( $MountHD * 3761) / 19 )); MountSPD=24; fi
#Paladin Special case
  if [ "$CLASS" = "Paladin" ] && [ "$SEX" != "Female" ] && [ "$LEVEL" -ge "4" ]; then let "MountHD = $RANDOM % 8 + 4";
	for index in `shuf --input-range=0-$(( ${#MPaladinMountARRAY[*]} - 1 )) | head -1`
	do    MountSpecies=${MPaladinMountARRAY[$index]}; done
	MountLoadLimit=$((( $MountHD * 4225) / 23 )); MountSPD=24; fi
  if [ "$CLASS" = "Paladin" ] && [ "$SEX" = "Female" ] && [ "$LEVEL" -ge "4" ]; then let "MountHD = $RANDOM % 8 + 4";
	for index in `shuf --input-range=0-$(( ${#FPaladinMountARRAY[*]} - 1 )) | head -1`
	do    MountSpecies=${FPaladinMountARRAY[$index]}; done
	MountLoadLimit=$((( $MountHD * 4225) / 23 )); MountSPD=24; fi
#---------------------------------------------------------------#
# This should never happen. Figure how I want to call this for exotic mounts later.
  if [ "$SIZE" = "Exotic" ]; then let "MountHD = $RANDOM % 8 + 4";
	for index in `shuf --input-range=0-$(( ${#ExoticMountARRAY[*]} - 1 )) | head -1`
	do    EMountSpecies=${ExoticMountARRAY[$index]}; done
	MountLoadLimit=$((( $MountHD * 4225) / 23 )); MountSPD=24; fi
#---------------------------------------------------------------#
# FOLLOWERS FUNCTION 

function Followers {
printf "%-45s%-35s%24s\n" " " "$FName" "$FSex $FRace $FClassandLevel"
printf "%-45s%-25s%34s\n" " " "AL: $FAlignment  $FHitPoints HP  TAB $FTAB " "$FArmor"
printf "%-45s%-60s\n" "" "$FWeapon "; echo;}

#---------------------------------------------------------------#
let "Generated_Followers = $RANDOM % 3 + 1"

function FollowerGen {

# DEFAULT NO-FOLLOWER CODE
if [ "$LEVEL" -le "8" ]; then FName="$First has no followers"; fi

# Set Follower Sex
get_sex; FSex=$SEX

#Set Follower Level
fnum=0
let "FLEVEL = $RANDOM % 5 + 1"
FHPLoop=$(( $FLEVEL - 1 ))

let "FTAB = $RANDOM % 4 + 1"
FArmor="Armor: Chain Mail (AC 15)"
FWeapon="Weapon: Longsword (1d8/1d12)"
FAlignmentARRAY=( LG NG CG LN N CN )
FAlignmentARRAY2=( LG NG LN N ) # This is for Monk characters
#---------------------------------------------------------------#
# BASIC FOLLOWER CLASS ARRAYS FOR CHARACTER ARCHETYPE
# (Ranger class calls a different array for animals)
# NOTE: These aren't supposed to be fully detailed characters - just 
# little "smudges" with enough detail to do combat. If you want 
# fully detailed followers, run Mass-IV again and juggle character
# sheets as appropriate. This is some serious low-rent stuff here.

if [ "$ATYPE" = "Warrior" ]; then FollowerARRAY=( Fighter Ranger Paladin )
    FWeaponARRAY=( "Weapon: Short Sword (1d6/1d8) Spd: 3" "Weapon: Club (1d6/1d3) Spd: 3" "Weapon: Battle Axe (1d8/1d8) Spd: 7" "Weapon: Longbow (1d6/1d6) Spd:7" "Weapon: Broadsword (2d4/2d6+1) Spd: 5" "Weapon: Scimitar (1d8/1d8) Spd: 5" )
    FArmorARRAY=( "Armor: Leather Armor (AC 12)" "Armor: Chain Mail (AC 15)" "Armor: Hide Armor (AC 14)" "Armor: Studded Leather (AC 13)" "Armor: Brigandine (AC 14)" "Armor: Quilted Armor (AC 11)" "Armor: None! (AC 10)" )
until [ "$FHPLoop" -le "0" ]; do let FHPLoop-=1; let fdie=$[ 6 + $[ RANDOM % 5 ]]; let fnum+=$fdie; done; FHP=$(( 10 + $fnum )); let "FHitPoints = $FHP"; fi

if [ "$ATYPE" = "Wizard" ]; then FollowerARRAY=( Mage Invoker ) 
    FWeaponARRAY=( "Weapon: Dagger (1d4/1d3) Spd: 2" "Weapon: Dirk (1d4/1d3) Spd: 2" "Weapon: Quarterstaff (1d6/1d6) Spd: 4" "Weapon: Dart (1d3/1d2) Spd: 2" "Weapon: Ulu (1d3/1d2) Spd: 3" )
    FArmorARRAY=( "Armor: Robes (AC 10)" "Armor: Traveling Clothes (AC 10)" "Armor: None! (AC 10)" )
until [ "$FHPLoop" -le "0" ]; do let FHPLoop-=1; let fdie=$[ 3 + $[ RANDOM % 2 ]]; let fnum+=$fdie; done; FHP=$(( 4 + $fnum )); let "FHitPoints = $FHP"; fi

if [ "$ATYPE" = "Rogue" ]; then FollowerARRAY=( Thief Bard ) 
    FWeaponARRAY=( "Weapon: Short Sword (1d6/1d8) Spd: 3" "Weapon: Dagger (1d4/1d3) Spd: 2" "Weapon: Gladius (1d8+2/1d6) Spd: 3" "Weapon: Dirk (1d4/1d3) Spd: 2" "Weapon: Iuak (1d4/1d6) Spd: 4" )
    FArmorARRAY=( "Armor: Leather Armor (AC 12)" "Armor: Studded Leather Armor (AC 13)" "Armor: Brigandine (AC 14)" "Armor: Quilted Armor (AC 11)" "Armor: None! (AC 10)" )
until [ "$FHPLoop" -le "0" ]; do let FHPLoop-=1; let fdie=$[ 4 + $[ RANDOM % 3 ]]; let fnum+=$fdie; done; FHP=$(( 6 + $fnum )); let "FHitPoints = $FHP"; fi

if [ "$ATYPE" = "Priest" ]; then FollowerARRAY=( Cleric Monk ) 
    FWeaponARRAY=( "Weapon: Club (1d6/1d3) Spd: 4" "Weapon: Mace (1d6+1/1d6) Spd: 4" "Weapon: Flail (1d6+1/1d4) Spd: 6" "Weapon: Warhammer (1d4+1/1d4) Spd: 4" "Weapon: Bolas (1d3/1d2) Spd:8" )
    FArmorARRAY=( "Armor: Leather Armor (AC 12)" "Armor: Leather Armor (AC 12)" "Armor: Hide Armor (AC 14)" "Armor: Studded Leather (AC 13)" "Armor: Brigandine (AC 14)" "Armor: Quilted Armor (AC 11)" "Armor: None! (AC 10)" )
until [ "$FHPLoop" -le "0" ]; do let FHPLoop-=1; let fdie=$[ 5 + $[ RANDOM % 4 ]]; let fnum+=$fdie; done; FHP=$(( 8 + $fnum )); let "FHitPoints = $FHP"; fi


#----------------------------------------------------------------
# Select follower class & alignment

for index in `shuf --input-range=0-$(( ${#FollowerARRAY[*]} - 1 )) | head -1`
	do FollowerCLASS=${FollowerARRAY[$index]}; done
for index in `shuf --input-range=0-$(( ${#FAlignmentARRAY[*]} - 1 )) | head -1`
	do FAlignment=${FAlignmentARRAY[$index]}; done


if [ "$CLASS" != "Ranger" ]; then 
	for index in `shuf --input-range=0-$(( ${#ARRAY[*]} - 1 )) | head -1`; do FRace=${ARRAY[$index]}; done
	if [ "$CLASS" = "Paladin" ]; then FAlignment="LG"; fi
	if [ "$FollowerCLASS" = "Monk" ]; then for index in `shuf --input-range=0-$(( ${#FAlignmentARRAY2[*]} - 1 )) | head -1`; do FAlignment=${FAlignmentARRAY2[$index]}; done; fi
	if [ "$FRACE" = "Jaka" ] && [ "$ATYPE" = "Wizard" ]; then for index in `shuf --input-range=0-$(( ${#ARRAY[*]} - 1 )) | head -1`; do FRace=${ARRAY[$index]}; done ; fi
	if [ "$FRACE" = "Alvani" ] && [ "$FollowerCLASS" = "Paladin" ]; then FollowerCLASS="Human"; fi
	if [ "$FRACE" = "Alvani" ] && [ "$ATYPE" = "Priest" ]; then FollowerCLASS="Human"; fi
	FClassandLevel=($FollowerCLASS\ $FLEVEL)

# Follower Sex Adjustments
	if [ "$FRace" = "Koza" ]; then FSex=Herm; fi
	if [ "$FRace" = "Relic" ]; then FSex=""; fi
	if [ "$FRace" = "Protean" ]; then FSex=""; fi; fi


#---------------------------------------------------------------#
#Follower Names
# This was implemented in this manner because the name generator 
# code above in the race block could not be pulled out without a
# wholesale re-write. I suppose I could make this into a function
# and call it for both the character's name and his/her followers
# as appropriate, but I don't feel like doing the work just now.

FFirst=""
FPat=""
FSur=""

case "$FRace" in

  Human | Redblood)
	FFirst=$(shuf -n 1 ./names/"Human Male First Names.txt") 
	if [ "$FSex" = "Female" ]; then 
	FFirst=$(shuf -n 1 ./names/"Human Female First Names.txt"); fi
	FSur=$(shuf -n 1 ./names/"Human Surnames.txt")				;;
  Jaka)
	FFirst=$(shuf -n 1 ./names/"Jaka Male Names.txt")
	if [ "$FSex" = "Female" ]; then 
	FFirst=$(shuf -n 1 ./names/"Jaka Female Names.txt"); fi
	FSur=$(shuf -n 1 ./names/"Jaka Surnames.txt")				;;
  Kobold)
	FFirst=$(shuf -n 1 ./names/"Kobold Male Names.txt")
	if [ "$FSex" = "Female" ]; then 
	FFirst=$(shuf -n 1 ./names/"Kobold Female Names.txt"); fi
	FSur=$(shuf -n 1 ./names/"Kobold Surnames.txt")				;;
  Minotaur)
	FFirst=$(shuf -n 1 ./names/"Minotaur Male Names.txt")
	if [ "$FSex" = "Female" ]; then 
	FFirst=$(shuf -n 1 ./names/"Minotaur Female Names.txt"); fi
	FSur=$(shuf -n 1 ./names/"Minotaur Surnames.txt")			;;
  Alvani)
	FFirst=$(shuf -n 1 ./names/"Alvani Male Names.txt")
	if [ "$FSex" = "Female" ]; then 
	FFirst=$(shuf -n 1 ./names/"Alvani Female Names.txt"); fi		;;
  Fairborn|Greenblood|Halfblood)
	FFirst=$(shuf -n 1 ./names/"Trollborn Male Names.txt")
	if [ "$FSex" = "Female" ]; then 
	FFirst=$(shuf -n 1 ./names/"Trollborn Female Names.txt");fi
	FSur=$(shuf -n 1 ./names/"Trollborn Surnames.txt")			;;
  Lugan)
	FFirst=$(shuf -n 1 ./names/"Lugan Male Names.txt")
	if [ "$FSex" = "Female" ]; then 
	FFirst=$(shuf -n 1 ./names/"Lugan Female Names.txt");fi 
	FSur=$(shuf -n 1 ./names/"Lugan Surnames.txt")				;;
  Waterfolk)
	FFirst=$(shuf -n 1 ./names/"Waterfolk Names.txt")
	FSur=$(shuf -n 1 ./names/"Waterfolk Surnames.txt")			;;
  Ursa)
	FFirst=$(shuf -n 1 ./names/"Ursa Male Names.txt")
	FPat=$(shuf -n 1 ./names/"Ursa Male Patronymic.txt")
	if [ "$FSex" = "Female" ]; then 
	FFirst=$(shuf -n 1 ./names/"Ursa Female Names.txt")
	FPat=$(shuf -n 1 ./names/"Ursa Female Patronymic.txt"); fi
	FSur=$(shuf -n 1 ./names/"Ursa Surnames.txt")				
	FName=("$FFirst ""$FPat ""$FSur");;
  Selah)
	FFirst=$(shuf -n 1 ./names/"Selah Names.txt")				;;
  Half\-Orc)
	FFirst=$(shuf -n 1 ./names/"Half Orc Male Names.txt")
	if [ "$FSex" = "Female" ]; then 
	FFirst=$(shuf -n 1 ./names/"Half Orc Female Names.txt"); fi		;;
  Elkan)
	FSur=$(shuf -n 1 ./names/"Elkan Surnames.txt")				;;
  Gnooshe)
	FFirst=$(shuf -n 1 ./names/"Gnooshe Male Names.txt")
	if [ "$FSex" = "Female" ]; then 
	FFirst=$(shuf -n 1 ./names/"Gnooshe Female Names.txt"); fi
	FSur=$(shuf -n 1 ./names/"Gnooshe Surnames.txt")			;;
  Protean|Relic)
	FFirst=$(cat /dev/urandom | tr -cd A-Z | fold -w2 | head -n 1)
	FPat=$(cat /dev/urandom | tr -cd 0001-9999 | fold -w4 | head -n 1)
	FSur=$(shuf -n 1 ./names/"Protean Surnames.txt")			;;
  Rotan)
	FFirst=$(shuf -n 1 ./names/"Rotan Male Names.txt")
	if [ "$FSex" = "Female" ]; then 
	FFirst=$(shuf -n 1 ./names/"Rotan Female Names.txt"); fi		;;
  Nibbin)
	FFirst=$(shuf -n 1 ./names/"Nibbin Male Names.txt")
	if [ "$FSex" = "Female" ]; then 
	FFirst=$(shuf -n 1 ./names/"Nibbin Female Names.txt"); fi
	FSur=$(shuf -n 1 ./names/"Nibbin Surnames.txt")				;;
esac
#---------------------------------------------------------------#
# Assemble Follower Name and make corrections to layout as needed
case "$FRace" in
  Ursa)
	FName=("$FFirst""$FPat""$FSur")	;;
  Alvani|Half-Orc|Selah|Rotan)
	FName=("$FFirst")			;;
  *)
	FName=("$FFirst ""$FSur")		;;
esac


#if  [ "$FRace" = "Alvani" ] || [ "$FRace" = "Half-Orc" ] || [ "$FRace" = "Selah" ] || [ "$FRace" = "Rotan" ]; then FName=($FFirst); fi 	#Annoying fixes....

#---------------------------------------------------------------#
# ASSIGN WEAPONS & ARMOR

    for index in `shuf --input-range=0-$(( ${#FWeaponARRAY[*]} - 1 )) | head -1`; do FWeapon=${FWeaponARRAY[$index]}; done
    for index in `shuf --input-range=0-$(( ${#FArmorARRAY[*]} - 1 )) | head -1`; do FArmor=${FArmorARRAY[$index]}; done
#---------------------------------------------------------------#
# RANGER SPECIAL CASE - Actually this is rather compact!

if [ "$CLASS" = "Ranger" ]; then 
	AnimalARRAY=( "Dog" "Cat" "Wolf" "Black Bear" "Ferret" "Puma" "Screech Owl" "Great Horned Owl" "Raven" "Falcon" "Hawk" ) # Add more later
	for index in `shuf --input-range=0-$(( ${#AnimalARRAY[*]} - 1 )) | head -1`; do FRace=${AnimalARRAY[$index]}; done
case "$FRace" in
	Dog)			FWeapon="Bite (1d3/1d2) Spd: 0"	;;
	Cat)			FWeapon="Claw (1d2/1) Spd: 0"	;;
	Wolf)			FWeapon="Bite (1d4/1d3) Spd: 0"	;;
	Black\ Bear)		FWeapon="Claw (1d6/1d6), Bite (1d8/1d6) Spd: 0"	;;
	Ferret)			FWeapon="" ;;
	Puma)			FWeapon="" ;;
	Screech\ Owl)		FWeapon="" ;;
	Great\ Horned\ Owl)	FWeapon="" ;;
	Raven)			FWeapon="" ;;
	Falcon)			FWeapon="" ;;
	Hawk)			FWeapon="" ;;
esac
	FClassandLevel="(Animal)"; FAlignment=Neutral; FName=$(shuf -n 1 ./names/Horse\ Names.txt); FArmor="Armor: None (AC: 10)"; fi
}
# Uncomment the following line to make followers
FollowerGen
#---------------------------------------------------------------#
# Okay, mount stuff!

MCOUNTER=$MountHD
if [ "$CLASS" = "Paladin" ]; then let MountHD=$(( $MountHD + 4 )); MCOUNTER=$MountHD
    while [ $MCOUNTER -gt 1 ]; do Mdie=10; let MountHP+=$Mdie; let MCOUNTER-=1; done
    else     while [ $MCOUNTER -gt 1 ]; do Mdie=$[ 6 + $[ RANDOM % 5 ]]; let MountHP+=$Mdie; let MCOUNTER-=1; done; fi
MountName=$(cat ./names/Horse\ Names.txt | sort -R |head -1)

if [ "$CLASS" = "Paladin" ] && [ "$LEVEL" -ge "4" ]; then 
printf "%-45s%-60s\n" "************ BONDED MOUNT *************" "************************ FOLLOWERS ************************";
else
printf "%-45s%-60s\n" "**************** MOUNT ****************" "************************ FOLLOWERS ************************" ; fi

if [ "$RACE" = "Selah" ]; then 
printf "%-45s%-35s%24s\n" "Selah characters cannot ride mounts" "$FName" "$FSex $FRace $FClassandLevel"
printf "%-45s%-25s%34s\n" "" "AL: $FAlignment  $FHitPoints HP  TAB $FTAB " "$FArmor"
printf "%-45s%-60s\n" "" "$FWeapon "; else

printf "%-45s%-35s%24s\n" "NAME: $MountName  SPECIES: $MountSpecies" "$FName" "$FSex $FRace $FClassandLevel"
printf "%-45s%-25s%34s\n" "HD: $MountHD  HP: $MountHP  SPD: $MountSPD  MAX WT: $MountLoadLimit" "AL: $FAlignment  $FHitPoints HP  TAB $FTAB " "$FArmor"
printf "%-45s%-60s\n" "" "$FWeapon "; fi; fi

echo
if [ "$Generated_Followers" = "2" ]; then FollowerGen; Followers; echo; fi
if [ "$Generated_Followers" = "3" ]; then FollowerGen; Followers; FollowerGen; Followers; echo; fi
}

# ===============  END OF GENERATED LINES =============== #
# ===============  END OF GENERATED LINES =============== #
# ===============  END OF GENERATED LINES =============== #

if [ "$Pat" = " " ]; then Pat=""; fi 			  #This is a tweak to fix the double space name printing bug when assigning filenames to generated characters.

if [ "$Terminal_Output" = "Y" ]; then 
Character | tee ~/Desktop/Characters/"$First $Pat $Sur "Level" $LEVEL $RACE $SEX $CLASS $SPEC".txt
else Character > ~/Desktop/Characters/"$First $Pat $Sur "Level" $LEVEL $RACE $SEX $CLASS $SPEC".txt; fi

let ITERATIONS+=1; let USERCOUNTER-=1; echo "Generating character "$ITERATIONS"	"$RACE $SEX $CLASS $SPEC $LEVEL $First $Pat $Sur; done

ENDTIME=$(date +%s)

echo "Finished generating characters in $(($ENDTIME - $STARTTIME)) seconds. Exiting script.";  exit 0


################################################################## 6484 Unique Lines






